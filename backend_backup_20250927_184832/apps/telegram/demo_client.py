"""
–î–µ–º–æ-–≤–µ—Ä—Å–∏—è Telegram –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""
import qrcode
import logging
from io import BytesIO
from datetime import datetime

from .models import TelegramUser

logger = logging.getLogger(__name__)


def run_telegram_auth_sync(telegram_user_id: int, action: str, **kwargs):
    """–î–µ–º–æ-–≤–µ—Ä—Å–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    
    logger.info(f"üéØ –î–ï–ú–û-–ö–õ–ò–ï–ù–¢: –í—ã–∑–æ–≤ {action} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_user_id}")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        telegram_user = TelegramUser.objects.get(id=telegram_user_id)
        
        if action == "generate_qr":
            # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ QR-–∫–æ–¥
            demo_url = "https://telegram.me/login_code?token=demo_token_123"
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥
            qr = qrcode.QRCode(version=1, box_size=10, border=5)
            qr.add_data(demo_url)
            qr.make(fit=True)
            
            img = qr.make_image(fill_color="black", back_color="white")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ bytes
            buffer = BytesIO()
            img.save(buffer, format='PNG')
            qr_data = buffer.getvalue()
            
            logger.info(f"–î–µ–º–æ QR-–∫–æ–¥ —Å–æ–∑–¥–∞–Ω –¥–ª—è {telegram_user.user.username}")
            return qr_data, demo_url, "success"
            
        elif action == "wait_auth":
            # –í –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ –∂–¥–µ–º 5 —Å–µ–∫—É–Ω–¥, –ø–æ—Ç–æ–º –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 2FA
            import time
            time.sleep(5)
            logger.info(f"–î–µ–º–æ: —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ 2FA –¥–ª—è {telegram_user.user.username}")
            return "2fa_required", None, "–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"
            
        elif action == "handle_2fa":
            password = kwargs.get('password')
            if not password:
                return "error", None, "–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"
            
            # –í –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ –ø—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π –ø–∞—Ä–æ–ª—å
            if password == "demo123":
                logger.info(f"–î–µ–º–æ 2FA —É—Å–ø–µ—à–Ω–æ –¥–ª—è {telegram_user.user.username}")
                
                user_data = {
                    'id': 123456789,
                    'username': 'demo_user',
                    'first_name': '–î–µ–º–æ',
                    'last_name': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                    'phone': '+1234567890',
                }
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                telegram_user.is_authorized = True
                telegram_user.telegram_id = user_data['id']
                telegram_user.username = user_data['username']
                telegram_user.first_name = user_data['first_name']
                telegram_user.last_name = user_data['last_name']
                telegram_user.phone = user_data['phone']
                telegram_user.auth_date = datetime.now()
                telegram_user.last_activity = datetime.now()
                telegram_user.save()
                
                return "success", user_data, None
            else:
                return "error", None, "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å 2FA"
                
        else:
            return "error", None, f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}"
            
    except TelegramUser.DoesNotExist:
        return "error", None, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram –Ω–µ –Ω–∞–π–¥–µ–Ω"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è {action}: {e}")
        return "error", None, str(e)
