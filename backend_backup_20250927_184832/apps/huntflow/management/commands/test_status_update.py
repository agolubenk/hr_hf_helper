from django.core.management.base import BaseCommand
from django.contrib.auth import get_user_model
from apps.huntflow.services import HuntflowService


class Command(BaseCommand):
    help = '–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç'

    def handle(self, *args, **options):
        User = get_user_model()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è admin
        try:
            user = User.objects.get(username='admin')
        except User.DoesNotExist:
            self.stdout.write(self.style.ERROR('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å admin –Ω–µ –Ω–∞–π–¥–µ–Ω'))
            return
        
        self.stdout.write(self.style.SUCCESS('=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ë–ù–û–í–õ–ï–ù–ò–Ø –°–¢–ê–¢–£–°–ê ===\n'))
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å
        huntflow_service = HuntflowService(user)
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã
        accounts = huntflow_service.get_accounts()
        if not accounts or 'items' not in accounts:
            self.stdout.write(self.style.ERROR('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã'))
            return
        
        account_id = accounts['items'][0]['id']
        self.stdout.write(f'üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫–∫–∞—É–Ω—Ç: {account_id}')
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
        applicants = huntflow_service.get_applicants(account_id, count=1)
        if not applicants or 'items' not in applicants or not applicants['items']:
            self.stdout.write(self.style.ERROR('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤'))
            return
        
        applicant_id = applicants['items'][0]['id']
        self.stdout.write(f'üë§ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: {applicant_id}')
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã
        statuses = huntflow_service.get_vacancy_statuses(account_id)
        if not statuses or 'items' not in statuses:
            self.stdout.write(self.style.ERROR('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å—ã'))
            return
        
        # –ù–∞—Ö–æ–¥–∏–º —Å—Ç–∞—Ç—É—Å "–ù–æ–≤—ã–µ" (–æ–±—ã—á–Ω–æ ID 3321)
        new_status = None
        for status in statuses['items']:
            if status.get('name') == '–ù–æ–≤—ã–µ':
                new_status = status
                break
        
        if not new_status:
            new_status = statuses['items'][0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
        
        status_id = new_status['id']
        self.stdout.write(f'üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç—É—Å: {new_status["name"]} (ID: {status_id})')
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –≤–∞–∫–∞–Ω—Å–∏–∏
        applicant_data = huntflow_service.get_applicant(account_id, applicant_id)
        if not applicant_data or not applicant_data.get('links'):
            self.stdout.write(self.style.ERROR('‚ùå –£ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏'))
            return
        
        current_vacancy = applicant_data['links'][0]['vacancy']
        self.stdout.write(f'üíº –¢–µ–∫—É—â–∞—è –≤–∞–∫–∞–Ω—Å–∏—è: {current_vacancy}')
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        self.stdout.write(f'\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞...')
        test_comment = f'–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç Django - {self.get_timestamp()}'
        
        result = huntflow_service.update_applicant_status(
            account_id, 
            applicant_id, 
            status_id, 
            test_comment
        )
        
        if result:
            self.stdout.write(self.style.SUCCESS('‚úÖ –°—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!'))
            self.stdout.write(f'üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {test_comment}')
        else:
            self.stdout.write(self.style.ERROR('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å'))
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏
        import time
        time.sleep(2)
        
        # –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        self.stdout.write(f'\nüìã –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞...')
        logs = huntflow_service.get_applicant_logs(account_id, applicant_id)
        if logs and 'items' in logs:
            recent_logs = logs['items'][:3]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –ª–æ–≥–∞
            for log in recent_logs:
                log_type = log.get('type', 'UNKNOWN')
                comment = log.get('comment', '')
                created = log.get('created', '')
                self.stdout.write(f'  - {log_type}: {comment} ({created})')
        
        self.stdout.write(self.style.SUCCESS('\n=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û ==='))
        self.stdout.write('\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤ –∞–¥–º–∏–Ω–∫–µ Django:')
        self.stdout.write('http://127.0.0.1:8000/admin/huntflow/huntflowlog/')
    
    def get_timestamp(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç—Ä–æ–∫–∏"""
        from datetime import datetime
        return datetime.now().strftime('%H:%M:%S')
