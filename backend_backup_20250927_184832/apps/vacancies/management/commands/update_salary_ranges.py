from django.core.management.base import BaseCommand
from apps.vacancies.models import SalaryRange


class Command(BaseCommand):
    help = "–û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞—Ä–ø–ª–∞—Ç–Ω—ã–µ –≤–∏–ª–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç"

    def add_arguments(self, parser):
        parser.add_argument(
            '--force',
            action='store_true',
            help='–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞—Ä–ø–ª–∞—Ç–Ω—ã—Ö –≤–∏–ª–æ–∫',
        )

    def handle(self, *args, **options):
        self.stdout.write("üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç–Ω—ã—Ö –≤–∏–ª–æ–∫...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—Ä–ø–ª–∞—Ç–Ω—ã–µ –≤–∏–ª–∫–∏
            salary_ranges = SalaryRange.objects.filter(is_active=True)
            
            if not salary_ranges.exists():
                self.stdout.write("‚ÑπÔ∏è  –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—Ä–ø–ª–∞—Ç–Ω—ã–µ –≤–∏–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            updated_count = 0
            error_count = 0
            
            for salary_range in salary_ranges:
                try:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç, —á—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–µ—Ç –≤–∞–ª—é—Ç—ã
                    salary_range.save()
                    updated_count += 1
                    
                    self.stdout.write(
                        f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞—Ä–ø–ª–∞—Ç–Ω–∞—è –≤–∏–ª–∫–∞ –¥–ª—è –≥—Ä–µ–π–¥–∞: {salary_range.grade.name}"
                    )
                    
                except Exception as e:
                    error_count += 1
                    self.stdout.write(
                        self.style.ERROR(
                            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞—Ä–ø–ª–∞—Ç–Ω–æ–π –≤–∏–ª–∫–∏ –¥–ª—è –≥—Ä–µ–π–¥–∞ {salary_range.grade.name}: {e}"
                        )
                    )
            
            # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.stdout.write("\n" + "="*50)
            self.stdout.write(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:")
            self.stdout.write(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_count}")
            if error_count > 0:
                self.stdout.write(f"   ‚ùå –û—à–∏–±–æ–∫: {error_count}")
            
            if updated_count > 0:
                self.stdout.write(
                    self.style.SUCCESS(
                        f"üéâ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç–Ω—ã—Ö –≤–∏–ª–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} –≤–∏–ª–æ–∫."
                    )
                )
            else:
                self.stdout.write("‚ÑπÔ∏è  –ù–µ—Ç –∑–∞—Ä–ø–ª–∞—Ç–Ω—ã—Ö –≤–∏–ª–æ–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
                
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            )
            if not options['force']:
                raise

