#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram
"""

import os
import sys
import django
import asyncio
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.append('/Users/agolubenko/hrhelper/fullstack/backend')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

from apps.telegram.telegram_client import run_telegram_auth_async
from apps.telegram.models import TelegramUser
from django.contrib.auth import get_user_model
from asgiref.sync import sync_to_async

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

User = get_user_model()

async def test_successful_auth():
    """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await sync_to_async(User.objects.get)(username='andrei.golubenko')
        telegram_user = await sync_to_async(TelegramUser.objects.get)(user=user)
        
        logger.info(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è {user.username}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥
        logger.info("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥...")
        qr_data, qr_url, status = await run_telegram_auth_async(
            user.id, 'generate_qr'
        )
        
        if status != "success":
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR: {status}")
            return
        
        logger.info(f"QR-–∫–æ–¥ —Å–æ–∑–¥–∞–Ω: {qr_url}")
        
        # –ñ–¥–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        logger.info("–ñ–¥–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
        for i in range(10):  # –ñ–¥–µ–º –¥–æ 50 —Å–µ–∫—É–Ω–¥
            auth_status, user_data, error = await run_telegram_auth_async(
                user.id, 'wait_auth'
            )
            
            logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ {i+1}: —Å—Ç–∞—Ç—É—Å={auth_status}, –¥–∞–Ω–Ω—ã–µ={user_data}, –æ—à–∏–±–∫–∞={error}")
            
            if auth_status == "success":
                logger.info("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
                logger.info(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_data}")
                break
            elif auth_status == "2fa_required":
                logger.info("üîê –¢—Ä–µ–±—É–µ—Ç—Å—è 2FA")
                break
            elif auth_status == "error":
                logger.error(f"‚ùå –û—à–∏–±–∫–∞: {error}")
                break
            elif auth_status == "timeout":
                logger.info("‚è∞ –¢–∞–π–º–∞—É—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
                continue
            else:
                logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ... ({auth_status})")
                await asyncio.sleep(5)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await sync_to_async(telegram_user.refresh_from_db)()
        logger.info(f"–§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω={telegram_user.is_authorized}, telegram_id={telegram_user.telegram_id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(test_successful_auth())
