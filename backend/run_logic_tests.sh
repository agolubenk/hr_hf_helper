#!/bin/bash

# üß™ –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ logic –º–æ–¥—É–ª–µ–π
# –ê–≤—Ç–æ—Ä: AI Assistant
# –î–∞—Ç–∞: $(date)

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
TEST_DIR="logic/tests"
COVERAGE_DIR="htmlcov"
COVERAGE_REPORT="coverage_report.txt"

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
run_all_tests() {
    log_info "–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ logic –º–æ–¥—É–ª–µ–π..."
    
    cd "$TEST_DIR"
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –≤—ã–≤–æ–¥–æ–º
    python3 -m unittest discover -v -s . -p "test_*.py"
    
    if [ $? -eq 0 ]; then
        log_success "–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!"
        return 0
    else
        log_error "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å!"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
run_specific_test() {
    local test_file="$1"
    
    if [ -z "$test_file" ]; then
        log_error "–ù–µ —É–∫–∞–∑–∞–Ω —Ñ–∞–π–ª —Ç–µ—Å—Ç–∞"
        return 1
    fi
    
    if [ ! -f "$TEST_DIR/$test_file" ]; then
        log_error "–§–∞–π–ª —Ç–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: $TEST_DIR/$test_file"
        return 1
    fi
    
    log_info "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: $test_file"
    
    cd "$TEST_DIR"
    python3 -m unittest "$test_file" -v
    
    if [ $? -eq 0 ]; then
        log_success "–¢–µ—Å—Ç $test_file –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!"
        return 0
    else
        log_error "–¢–µ—Å—Ç $test_file –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è!"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º
run_tests_with_coverage() {
    log_info "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ–¥–∞..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ coverage
    if ! command -v coverage &> /dev/null; then
        log_warning "coverage –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º..."
        pip3 install coverage
    fi
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
    mkdir -p "$COVERAGE_DIR"
    
    cd "$TEST_DIR"
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º
    coverage run --source=../../logic -m unittest discover -v -s . -p "test_*.py"
    
    if [ $? -eq 0 ]; then
        log_success "–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!"
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
        log_info "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –ø–æ–∫—Ä—ã—Ç–∏–∏..."
        coverage report > "../../$COVERAGE_REPORT"
        coverage html -d "../../$COVERAGE_DIR"
        
        # –í—ã–≤–æ–¥ –∫—Ä–∞—Ç–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        log_info "–û—Ç—á–µ—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏:"
        coverage report
        
        log_success "–û—Ç—á–µ—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏ —Å–æ–∑–¥–∞–Ω –≤ $COVERAGE_DIR/"
        return 0
    else
        log_error "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å!"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±—ã—Å—Ç—Ä—ã—Ö —Ç–µ—Å—Ç–æ–≤
run_quick_tests() {
    log_info "–ó–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä—ã—Ö —Ç–µ—Å—Ç–æ–≤ (–±–µ–∑ –ø–æ–∫—Ä—ã—Ç–∏—è)..."
    
    cd "$TEST_DIR"
    
    # –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    python3 -m unittest test_base.py test_response_handler.py -v
    
    if [ $? -eq 0 ]; then
        log_success "–ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!"
        return 0
    else
        log_error "–ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å!"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–µ—Å—Ç–æ–≤
check_test_structure() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–µ—Å—Ç–æ–≤..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ —Ç–µ—Å—Ç–æ–≤
    test_files=(
        "test_base.py"
        "test_api_client.py"
        "test_response_handler.py"
        "test_exceptions.py"
        "test_shared_modules.py"
        "test_integration.py"
    )
    
    missing_files=()
    
    for file in "${test_files[@]}"; do
        if [ ! -f "$TEST_DIR/$file" ]; then
            missing_files+=("$file")
        fi
    done
    
    if [ ${#missing_files[@]} -eq 0 ]; then
        log_success "–í—Å–µ —Ñ–∞–π–ª—ã —Ç–µ—Å—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω—ã"
        return 0
    else
        log_error "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã —Ç–µ—Å—Ç–æ–≤:"
        for file in "${missing_files[@]}"; do
            echo "  - $file"
        done
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤
cleanup_test_results() {
    log_info "–û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤..."
    
    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã –ø–æ–∫—Ä—ã—Ç–∏—è
    rm -rf "$COVERAGE_DIR"
    rm -f "$COVERAGE_REPORT"
    rm -f ".coverage"
    rm -f "coverage.xml"
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã Python
    find . -name "*.pyc" -delete
    find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
    
    log_success "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ –æ—á–∏—â–µ–Ω—ã"
}

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —Å–ø—Ä–∞–≤–∫–∏
show_help() {
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 {all|specific|coverage|quick|check|cleanup|help}"
    echo ""
    echo "–ö–æ–º–∞–Ω–¥—ã:"
    echo "  all <file>     - –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã"
    echo "  specific <file> - –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–µ—Å—Ç"
    echo "  coverage       - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –∫–æ–¥–∞"
    echo "  quick          - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã"
    echo "  check          - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–µ—Å—Ç–æ–≤"
    echo "  cleanup        - –û—á–∏—Å—Ç–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤"
    echo "  help           - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    echo ""
    echo "–ü—Ä–∏–º–µ—Ä—ã:"
    echo "  $0 all"
    echo "  $0 specific test_api_client.py"
    echo "  $0 coverage"
    echo "  $0 quick"
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
case "${1:-all}" in
    "all")
        run_all_tests
        ;;
    "specific")
        run_specific_test "$2"
        ;;
    "coverage")
        run_tests_with_coverage
        ;;
    "quick")
        run_quick_tests
        ;;
    "check")
        check_test_structure
        ;;
    "cleanup")
        cleanup_test_results
        ;;
    "help")
        show_help
        ;;
    *)
        echo "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $1"
        echo ""
        show_help
        exit 1
        ;;
esac
