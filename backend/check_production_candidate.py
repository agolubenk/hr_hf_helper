#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
"""
import os
import sys
import django

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

from django.contrib.auth import get_user_model
from apps.huntflow.services import HuntflowService

User = get_user_model()

def main():
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = User.objects.first()
        if not user:
            print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username}")
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å Huntflow
        huntflow_service = HuntflowService(user)
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã
        accounts = huntflow_service.get_accounts()
        if not accounts or 'items' not in accounts:
            print("‚ùå –ê–∫–∫–∞—É–Ω—Ç—ã Huntflow –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        # –ò—â–µ–º –ø—Ä–æ–¥–∞–∫—à–µ–Ω –∞–∫–∫–∞—É–Ω—Ç (ID: 291341)
        production_account = None
        for account in accounts['items']:
            if account['id'] == 291341:
                production_account = account
                break
        
        if not production_account:
            print("‚ùå –ü—Ä–æ–¥–∞–∫—à–µ–Ω –∞–∫–∫–∞—É–Ω—Ç (ID: 291341) –Ω–µ –Ω–∞–π–¥–µ–Ω")
            print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã:")
            for account in accounts['items']:
                print(f"   - ID: {account['id']}, –ù–∞–∑–≤–∞–Ω–∏–µ: '{account['name']}'")
            return
        
        account_id = production_account['id']
        print(f"üè¢ –ü—Ä–æ–¥–∞–∫—à–µ–Ω –∞–∫–∫–∞—É–Ω—Ç: {production_account['name']} (ID: {account_id})")
        
        # ID –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∏–∑ –ª–æ–≥–æ–≤ (74647940)
        applicant_id = 74647940
        
        print(f"\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ {applicant_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ
        applicant = huntflow_service.get_applicant(account_id, applicant_id)
        if not applicant:
            print(f"‚ùå –ö–∞–Ω–¥–∏–¥–∞—Ç {applicant_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        print(f"‚úÖ –ö–∞–Ω–¥–∏–¥–∞—Ç –Ω–∞–π–¥–µ–Ω: {applicant.get('first_name')} {applicant.get('last_name')}")
        print(f"üìß Email: {applicant.get('email')}")
        print(f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {applicant.get('phone')}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–∫–∏
        tags = applicant.get('tags', [])
        print(f"\nüè∑Ô∏è –ú–µ—Ç–∫–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ ({len(tags)}):")
        
        if tags:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–µ–≥–∏ –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
            all_tags = huntflow_service.get_tags(account_id)
            tag_names = {}
            if all_tags and 'items' in all_tags:
                for tag_info in all_tags['items']:
                    tag_names[tag_info['id']] = tag_info
            
            for tag in tags:
                tag_id = tag.get('id')
                tag_tag = tag.get('tag')  # –≠—Ç–æ ID —Ç–µ–≥–∞
                
                tag_info = tag_names.get(tag_tag, {})
                tag_name = tag_info.get('name', f'Unknown (ID: {tag_tag})')
                tag_color = tag_info.get('color', 'default')
                
                print(f"   - ID —Å–≤—è–∑–∏: {tag_id}, ID —Ç–µ–≥–∞: {tag_tag}")
                print(f"     ‚îî‚îÄ –ù–∞–∑–≤–∞–Ω–∏–µ: '{tag_name}', –¶–≤–µ—Ç: {tag_color}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–µ—Ç–∫–∞ clickup-new
                if tag_name == 'clickup-new':
                    print(f"     ‚úÖ –ù–ê–ô–î–ï–ù–ê –ú–ï–¢–ö–ê CLICKUP-NEW!")
        else:
            print("   ‚ùå –ú–µ—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –≤–∞–∫–∞–Ω—Å–∏—é
        if applicant.get('links'):
            print(f"\nüìä –°–≤—è–∑–∏ —Å –≤–∞–∫–∞–Ω—Å–∏—è–º–∏:")
            for link in applicant['links']:
                status_id = link.get('status')
                vacancy_id = link.get('vacancy')
                print(f"   - –í–∞–∫–∞–Ω—Å–∏—è: {vacancy_id}, –°—Ç–∞—Ç—É—Å: {status_id}")
                
                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
                statuses = huntflow_service.get_vacancy_statuses(account_id)
                if statuses and 'items' in statuses:
                    for status in statuses['items']:
                        if status['id'] == status_id:
                            print(f"     ‚îî‚îÄ –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞: '{status['name']}'")
                            break
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ (Telegram)
        social = applicant.get('social', [])
        if social:
            print(f"\nüì± –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏:")
            for soc in social:
                soc_type = soc.get('social_type')
                soc_value = soc.get('value')
                print(f"   - {soc_type}: {soc_value}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
