#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
"""
import os
import sys
import django

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

from django.contrib.auth import get_user_model
from apps.huntflow.services import HuntflowService

User = get_user_model()

def main():
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è andrei.golubenko (production)
        user = User.objects.get(username='andrei.golubenko')
        
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username}")
        print(f"üî• –°–∏—Å—Ç–µ–º–∞: {user.active_system}")
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å Huntflow
        huntflow_service = HuntflowService(user)
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã
        accounts = huntflow_service.get_accounts()
        if not accounts or 'items' not in accounts:
            print("‚ùå –ê–∫–∫–∞—É–Ω—Ç—ã Huntflow –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        print(f"üè¢ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã:")
        for account in accounts['items']:
            account_id = account['id']
            account_name = account['name']
            print(f"   - ID: {account_id}, –ù–∞–∑–≤–∞–Ω–∏–µ: '{account_name}'")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
            applicants = huntflow_service.get_applicants(account_id, count=10)
            if applicants and 'items' in applicants:
                print(f"     ‚îî‚îÄ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã:")
                
                for applicant in applicants['items'][:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 5
                    applicant_id = applicant['id']
                    first_name = applicant.get('first_name', '')
                    last_name = applicant.get('last_name', '')
                    created = applicant.get('created', '')
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–∫–∏
                    tags = applicant.get('tags', [])
                    has_clickup_tag = False
                    has_executor_tag = False
                    
                    if tags:
                        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–µ–≥–∏ –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
                        all_tags = huntflow_service.get_tags(account_id)
                        tag_names = {}
                        if all_tags and 'items' in all_tags:
                            for tag_info in all_tags['items']:
                                tag_names[tag_info['id']] = tag_info
                        
                        for tag in tags:
                            tag_tag = tag.get('tag')  # –≠—Ç–æ ID —Ç–µ–≥–∞
                            tag_info = tag_names.get(tag_tag, {})
                            tag_name = tag_info.get('name', '')
                            
                            if tag_name == 'clickup-new':
                                has_clickup_tag = True
                            elif tag_name and not tag_name in ['clickup-new', 'notion-new']:
                                has_executor_tag = True
                    
                    clickup_status = "‚úÖ" if has_clickup_tag else "‚ùå"
                    executor_status = "‚úÖ" if has_executor_tag else "‚ùå"
                    
                    print(f"       - ID: {applicant_id}, –ò–º—è: {first_name} {last_name}")
                    print(f"         –°–æ–∑–¥–∞–Ω: {created}")
                    print(f"         –ú–µ—Ç–∫–∞ clickup-new: {clickup_status}")
                    print(f"         –ú–µ—Ç–∫–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è: {executor_status}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –º–µ—Ç–æ–∫
                    if tags:
                        print(f"         –ú–µ—Ç–∫–∏:")
                        for tag in tags:
                            tag_tag = tag.get('tag')
                            tag_info = tag_names.get(tag_tag, {})
                            tag_name = tag_info.get('name', f'Unknown (ID: {tag_tag})')
                            tag_color = tag_info.get('color', 'default')
                            print(f"           - '{tag_name}' (—Ü–≤–µ—Ç: {tag_color})")
        
    except User.DoesNotExist:
        print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å andrei.golubenko –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
