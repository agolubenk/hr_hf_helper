#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Ç–æ–∫ –≤ Huntflow
"""
import os
import sys
import django

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

from django.contrib.auth import get_user_model
from apps.huntflow.services import HuntflowService

User = get_user_model()

def main():
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è andrei.golubenko (production)
        user = User.objects.get(username='andrei.golubenko')
        
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username}")
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å Huntflow
        huntflow_service = HuntflowService(user)
        
        account_id = 291341
        applicant_id = 74647940  # –ö–∞–Ω–¥–∏–¥–∞—Ç Nastassia PL
        
        print(f"üè¢ –ê–∫–∫–∞—É–Ω—Ç: {account_id}")
        print(f"üë§ –ö–∞–Ω–¥–∏–¥–∞—Ç: {applicant_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –º–µ—Ç–∫–∏
        print(f"\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –º–µ—Ç–∫–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞...")
        applicant = huntflow_service.get_applicant(account_id, applicant_id)
        if not applicant:
            print(f"‚ùå –ö–∞–Ω–¥–∏–¥–∞—Ç {applicant_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        current_tags = applicant.get('tags', [])
        print(f"üìã –¢–µ–∫—É—â–∏–µ –º–µ—Ç–∫–∏ ({len(current_tags)}):")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–µ–≥–∏ –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
        all_tags = huntflow_service.get_tags(account_id)
        tag_names = {}
        if all_tags and 'items' in all_tags:
            for tag_info in all_tags['items']:
                tag_names[tag_info['id']] = tag_info
        
        current_tag_ids = []
        for tag in current_tags:
            tag_id = tag.get('tag')
            tag_info = tag_names.get(tag_id, {})
            tag_name = tag_info.get('name', f'Unknown (ID: {tag_id})')
            tag_color = tag_info.get('color', 'default')
            print(f"   - ID: {tag_id}, –ù–∞–∑–≤–∞–Ω–∏–µ: '{tag_name}', –¶–≤–µ—Ç: {tag_color}")
            current_tag_ids.append(tag_id)
        
        # –ò—â–µ–º –º–µ—Ç–∫—É clickup-new
        clickup_tag_id = None
        for tag_info in all_tags['items']:
            if tag_info['name'] == 'clickup-new':
                clickup_tag_id = tag_info['id']
                break
        
        if not clickup_tag_id:
            print(f"‚ùå –ú–µ—Ç–∫–∞ 'clickup-new' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ")
            return
        
        print(f"\nüè∑Ô∏è –ù–∞–π–¥–µ–Ω–∞ –º–µ—Ç–∫–∞ 'clickup-new' —Å ID: {clickup_tag_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–∞ –º–µ—Ç–∫–∞
        if clickup_tag_id in current_tag_ids:
            print(f"‚úÖ –ú–µ—Ç–∫–∞ 'clickup-new' —É–∂–µ –µ—Å—Ç—å —É –∫–∞–Ω–¥–∏–¥–∞—Ç–∞")
        else:
            print(f"‚ùå –ú–µ—Ç–∫–∞ 'clickup-new' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —É –∫–∞–Ω–¥–∏–¥–∞—Ç–∞")
            
            # –ü—Ä–æ–±—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–∫—É
            print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∫–∏ 'clickup-new'...")
            
            # –°–ø–æ—Å–æ–± 1: –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ clickup-new
            print(f"üì§ –°–ø–æ—Å–æ–± 1: –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ clickup-new")
            tag_data = {'tags': [clickup_tag_id]}
            result1 = huntflow_service._make_request('POST', f"/accounts/{account_id}/applicants/{applicant_id}/tags", json=tag_data)
            
            if result1:
                print(f"‚úÖ –°–ø–æ—Å–æ–± 1: –ú–µ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
            else:
                print(f"‚ùå –°–ø–æ—Å–æ–± 1: –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–∫—É")
            
            # –°–ø–æ—Å–æ–± 2: –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –º–µ—Ç–∫–∏ (–≤–∫–ª—é—á–∞—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ + clickup-new)
            print(f"üì§ –°–ø–æ—Å–æ–± 2: –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –º–µ—Ç–∫–∏ (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ + clickup-new)")
            all_tag_ids = current_tag_ids + [clickup_tag_id]
            tag_data = {'tags': all_tag_ids}
            result2 = huntflow_service._make_request('POST', f"/accounts/{account_id}/applicants/{applicant_id}/tags", json=tag_data)
            
            if result2:
                print(f"‚úÖ –°–ø–æ—Å–æ–± 2: –í—Å–µ –º–µ—Ç–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
            else:
                print(f"‚ùå –°–ø–æ—Å–æ–± 2: –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–∫–∏")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print(f"\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...")
        applicant_after = huntflow_service.get_applicant(account_id, applicant_id)
        tags_after = applicant_after.get('tags', [])
        
        print(f"üìã –ú–µ—Ç–∫–∏ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞ ({len(tags_after)}):")
        has_clickup_tag = False
        for tag in tags_after:
            tag_id = tag.get('tag')
            tag_info = tag_names.get(tag_id, {})
            tag_name = tag_info.get('name', f'Unknown (ID: {tag_id})')
            tag_color = tag_info.get('color', 'default')
            print(f"   - ID: {tag_id}, –ù–∞–∑–≤–∞–Ω–∏–µ: '{tag_name}', –¶–≤–µ—Ç: {tag_color}")
            
            if tag_name == 'clickup-new':
                has_clickup_tag = True
        
        if has_clickup_tag:
            print(f"\nüéâ –£–°–ü–ï–•! –ú–µ—Ç–∫–∞ 'clickup-new' —Ç–µ–ø–µ—Ä—å –µ—Å—Ç—å —É –∫–∞–Ω–¥–∏–¥–∞—Ç–∞!")
        else:
            print(f"\n‚ùå –ü–†–û–ë–õ–ï–ú–ê! –ú–µ—Ç–∫–∞ 'clickup-new' –≤—Å–µ –µ—â–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        
    except User.DoesNotExist:
        print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å andrei.golubenko –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
