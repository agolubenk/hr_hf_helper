#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ—Ç–æ–∫ —É –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤ Huntflow
"""
import os
import sys
import django

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

from django.contrib.auth import get_user_model
from apps.huntflow.services import HuntflowService

User = get_user_model()

def main():
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = User.objects.first()
        if not user:
            print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username}")
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å Huntflow
        huntflow_service = HuntflowService(user)
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã
        accounts = huntflow_service.get_accounts()
        if not accounts or 'items' not in accounts:
            print("‚ùå –ê–∫–∫–∞—É–Ω—Ç—ã Huntflow –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        account_id = accounts['items'][0]['id']
        print(f"üè¢ –ê–∫–∫–∞—É–Ω—Ç ID: {account_id}")
        
        # ID –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∏–∑ –ª–æ–≥–æ–≤ (74647598)
        applicant_id = 74647598
        
        print(f"\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ {applicant_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ
        applicant = huntflow_service.get_applicant(account_id, applicant_id)
        if not applicant:
            print(f"‚ùå –ö–∞–Ω–¥–∏–¥–∞—Ç {applicant_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        print(f"‚úÖ –ö–∞–Ω–¥–∏–¥–∞—Ç –Ω–∞–π–¥–µ–Ω: {applicant.get('first_name')} {applicant.get('last_name')}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–∫–∏
        tags = applicant.get('tags', [])
        print(f"\nüè∑Ô∏è –ú–µ—Ç–∫–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ ({len(tags)}):")
        
        if tags:
            for tag in tags:
                tag_id = tag.get('id')
                tag_name = tag.get('name')
                tag_color = tag.get('color', 'default')
                print(f"   - ID: {tag_id}, –ù–∞–∑–≤–∞–Ω–∏–µ: '{tag_name}', –¶–≤–µ—Ç: {tag_color}")
        else:
            print("   ‚ùå –ú–µ—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        if applicant.get('links'):
            for link in applicant['links']:
                status_id = link.get('status')
                vacancy_id = link.get('vacancy')
                print(f"\nüìä –°—Ç–∞—Ç—É—Å: {status_id}, –í–∞–∫–∞–Ω—Å–∏—è: {vacancy_id}")
                
                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
                statuses = huntflow_service.get_vacancy_statuses(account_id)
                if statuses and 'items' in statuses:
                    for status in statuses['items']:
                        if status['id'] == status_id:
                            print(f"   üìã –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞: '{status['name']}'")
                            break
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        logs = huntflow_service.get_applicant_logs(account_id, applicant_id)
        if logs and 'items' in logs:
            comments = [log for log in logs['items'] if log.get('type') == 'COMMENT']
            print(f"\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {len(comments)}")
            
            for comment in comments[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                comment_text = comment.get('comment', '')[:100]
                created = comment.get('created', '')
                print(f"   - {created}: {comment_text}...")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
