#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –Ω–∞ "–û—Ç–∫–∞–∑"
"""
import os
import sys
import django

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

from django.contrib.auth import get_user_model
from apps.huntflow.services import HuntflowService

User = get_user_model()

def main():
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = User.objects.first()
        if not user:
            print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username}")
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å Huntflow
        huntflow_service = HuntflowService(user)
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã
        accounts = huntflow_service.get_accounts()
        if not accounts or 'items' not in accounts:
            print("‚ùå –ê–∫–∫–∞—É–Ω—Ç—ã Huntflow –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        account_id = accounts['items'][0]['id']
        print(f"üè¢ –ê–∫–∫–∞—É–Ω—Ç ID: {account_id}")
        
        # ID –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∏–∑ –ª–æ–≥–æ–≤ (74644273)
        applicant_id = 74644273
        
        print(f"\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ {applicant_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ
        applicant = huntflow_service.get_applicant(account_id, applicant_id)
        if not applicant:
            print(f"‚ùå –ö–∞–Ω–¥–∏–¥–∞—Ç {applicant_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        print(f"‚úÖ –ö–∞–Ω–¥–∏–¥–∞—Ç –Ω–∞–π–¥–µ–Ω: {applicant.get('first_name')} {applicant.get('last_name')}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
        if applicant.get('links'):
            current_vacancy = applicant['links'][0].get('vacancy')
            current_status = applicant['links'][0].get('status')
            print(f"üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {current_status}, –≤–∞–∫–∞–Ω—Å–∏—è: {current_vacancy}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã
        statuses = huntflow_service.get_vacancy_statuses(account_id)
        if not statuses or 'items' not in statuses:
            print("‚ùå –°—Ç–∞—Ç—É—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        # –ù–∞—Ö–æ–¥–∏–º —Å—Ç–∞—Ç—É—Å "–û—Ç–∫–∞–∑"
        reject_status_id = None
        for status in statuses['items']:
            if status.get('name', '').lower() == '–æ—Ç–∫–∞–∑':
                reject_status_id = status['id']
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Å—Ç–∞—Ç—É—Å –æ—Ç–∫–∞–∑–∞: {status['name']} (ID: {status['id']})")
                break
        
        if not reject_status_id:
            print("‚ùå –°—Ç–∞—Ç—É—Å –æ—Ç–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        if current_vacancy:
            print(f"\nüîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ {applicant_id} –Ω–∞ —Å—Ç–∞—Ç—É—Å {reject_status_id}")
            
            result = huntflow_service.update_applicant_status(
                account_id=account_id,
                applicant_id=applicant_id,
                status_id=reject_status_id,
                comment="–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑ ClickUp (reject)",
                vacancy_id=current_vacancy
            )
            
            if result:
                print("‚úÖ –°—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
                print(f"üìä –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: {reject_status_id}")
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å")
        else:
            print("‚ùå –£ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
