import random
import time
import logging
import json
from celery import shared_task
from django.contrib.auth import get_user_model
from django.utils import timezone
from .models import ClickUpBulkImport, ClickUpTask
from .services import ClickUpService, ClickUpAPIError

User = get_user_model()
logger = logging.getLogger(__name__)


@shared_task(bind=True)
def bulk_import_clickup_tasks(self, user_id, bulk_import_id):
    """
    –ú–∞—Å—Å–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç –∑–∞–¥–∞—á ClickUp —Å —Ä–∞–Ω–¥–æ–º–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bulk_import_id: ID –∑–∞–ø–∏—Å–∏ –º–∞—Å—Å–æ–≤–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
    """
    print(f"üéØ [WORKER] –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –º–∞—Å—Å–æ–≤–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞: user_id={user_id}, bulk_import_id={bulk_import_id}")
    logger.info(f"üéØ [WORKER] –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –º–∞—Å—Å–æ–≤–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞: user_id={user_id}, bulk_import_id={bulk_import_id}")
    
    try:
        user = User.objects.get(id=user_id)
        bulk_import = ClickUpBulkImport.objects.get(id=bulk_import_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ –∏–º–ø–æ—Ä—Ç —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        if bulk_import.status in ['stopped', 'cancelled', 'completed', 'failed']:
            print(f"‚ö†Ô∏è [WORKER] –ú–∞—Å—Å–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç {bulk_import_id} —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: {bulk_import.status}")
            logger.warning(f"‚ö†Ô∏è [WORKER] –ú–∞—Å—Å–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç {bulk_import_id} —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: {bulk_import.status}")
            return
        
        print(f"üë§ [WORKER] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {user.username}")
        logger.info(f"üë§ [WORKER] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {user.username}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º celery_task_id —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å (–ø—Ä–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –∑–∞–ø—É—Å–∫–µ)
        if hasattr(self, 'request') and self.request.id:
            bulk_import.celery_task_id = self.request.id
        bulk_import.save()
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        from .models import ClickUpSettings
        try:
            settings = ClickUpSettings.objects.get(user=user)
        except ClickUpSettings.DoesNotExist:
            bulk_import.status = 'failed'
            bulk_import.error_message = '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ClickUp –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'
            bulk_import.save()
            return
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å ClickUp
        service = ClickUpService(user.clickup_api_key)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ
        print(f"üîç [WORKER] –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username}")
        logger.info(f"üîç [WORKER] –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username}")
        all_tasks = []
        page = 0
        
        try:
            print(f"üîç [WORKER] –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –∏–∑ ClickUp API...")
            print(f"üîç [WORKER] –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –∏–∑ ClickUp API...", flush=True)
            logger.info(f"üîç [WORKER] –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –∏–∑ ClickUp API...")
            
            while True:
                print(f"üìÑ [WORKER] –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É {page}...")
                print(f"üìÑ [WORKER] –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É {page}...", flush=True)
                logger.info(f"üìÑ [WORKER] –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É {page}...")
                
                tasks = service.get_tasks(settings.list_id, include_closed=True, page=page)
                if not tasks:
                    print(f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}: –∑–∞–¥–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∑–∞–≤–µ—Ä—à–∞–µ–º")
                    print(f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}: –∑–∞–¥–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∑–∞–≤–µ—Ä—à–∞–µ–º", flush=True)
                    logger.info(f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}: –∑–∞–¥–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∑–∞–≤–µ—Ä—à–∞–µ–º")
                    break
                all_tasks.extend(tasks)
                page += 1
                logger.info(f"üìÑ –ü–æ–ª—É—á–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}, –∑–∞–¥–∞—á: {len(tasks)}")
                print(f"üìÑ –ü–æ–ª—É—á–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}, –∑–∞–¥–∞—á: {len(tasks)}")
                print(f"üìÑ –ü–æ–ª—É—á–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}, –∑–∞–¥–∞—á: {len(tasks)}", flush=True)
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                if page > 100:  # –ú–∞–∫—Å–∏–º—É–º 100 —Å—Ç—Ä–∞–Ω–∏—Ü
                    logger.warning(f"‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü (100), –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è")
                    print(f"‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü (100), –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è")
                    print(f"‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü (100), –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è", flush=True)
                    break
        except ClickUpAPIError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á –∏–∑ ClickUp: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á –∏–∑ ClickUp: {e}")
            bulk_import.status = 'failed'
            bulk_import.error_message = f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á: {str(e)}'
            bulk_import.save()
            return
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á: {e}")
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á: {e}")
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á: {e}", flush=True)
            bulk_import.status = 'failed'
            bulk_import.error_message = f'–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}'
            bulk_import.save()
            return
        
        print(f"üìä [WORKER] –ü–æ–ª—É—á–µ–Ω–æ –≤—Å–µ–≥–æ {len(all_tasks)} –∑–∞–¥–∞—á –∏–∑ ClickUp")
        print(f"üìä [WORKER] –ü–æ–ª—É—á–µ–Ω–æ –≤—Å–µ–≥–æ {len(all_tasks)} –∑–∞–¥–∞—á –∏–∑ ClickUp", flush=True)
        logger.info(f"üìä [WORKER] –ü–æ–ª—É—á–µ–Ω–æ –≤—Å–µ–≥–æ {len(all_tasks)} –∑–∞–¥–∞—á –∏–∑ ClickUp")
        
        print(f"üöÄ [WORKER] –ù–∞—á–∏–Ω–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {len(all_tasks)} –∑–∞–¥–∞—á...")
        print(f"üöÄ [WORKER] –ù–∞—á–∏–Ω–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {len(all_tasks)} –∑–∞–¥–∞—á...", flush=True)
        logger.info(f"üöÄ [WORKER] –ù–∞—á–∏–Ω–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {len(all_tasks)} –∑–∞–¥–∞—á...")
        
        if not all_tasks:
            print(f"‚ö†Ô∏è [WORKER] –ó–∞–¥–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∑–∞–≤–µ—Ä—à–∞–µ–º –º–∞—Å—Å–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç")
            print(f"‚ö†Ô∏è [WORKER] –ó–∞–¥–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∑–∞–≤–µ—Ä—à–∞–µ–º –º–∞—Å—Å–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç", flush=True)
            logger.info(f"‚ö†Ô∏è [WORKER] –ó–∞–¥–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∑–∞–≤–µ—Ä—à–∞–µ–º –º–∞—Å—Å–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç")
            bulk_import.status = 'completed'
            bulk_import.total_tasks = 0
            bulk_import.completed_at = timezone.now()
            bulk_import.save()
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á
        bulk_import.total_tasks = len(all_tasks)
        bulk_import.save()
        
        print(f"üìä [WORKER] –ù–∞–π–¥–µ–Ω–æ {len(all_tasks)} –∑–∞–¥–∞—á –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞")
        print(f"üìä [WORKER] –ù–∞–π–¥–µ–Ω–æ {len(all_tasks)} –∑–∞–¥–∞—á –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞", flush=True)
        logger.info(f"üìä [WORKER] –ù–∞–π–¥–µ–Ω–æ {len(all_tasks)} –∑–∞–¥–∞—á –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –∑–∞–¥–∞—á—É —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        print(f"üöÄ [WORKER] –ù–∞—á–∏–Ω–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {len(all_tasks)} –∑–∞–¥–∞—á...")
        print(f"üöÄ [WORKER] –ù–∞—á–∏–Ω–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {len(all_tasks)} –∑–∞–¥–∞—á...", flush=True)
        logger.info(f"üöÄ [WORKER] –ù–∞—á–∏–Ω–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {len(all_tasks)} –∑–∞–¥–∞—á...")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏ —á–µ—Ä–µ–∑ apply_async —Å countdown
        for i, task_data in enumerate(all_tasks):
            try:
                task_id = task_data.get('id', f'task_{i+1}')
                print(f"‚è≥ [WORKER] –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É {i+1}/{len(all_tasks)} (ID: {task_id})...")
                print(f"‚è≥ [WORKER] –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É {i+1}/{len(all_tasks)} (ID: {task_id})...", flush=True)
                logger.info(f"‚è≥ [WORKER] –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É {i+1}/{len(all_tasks)} (ID: {task_id})...")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π —á–µ—Ä–µ–∑ countdown (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º worker)
                delay_seconds = i * 8  # –ö–∞–∂–¥–∞—è –∑–∞–¥–∞—á–∞ —á–µ—Ä–µ–∑ 8 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π
                result = import_single_task.apply_async(
                    args=[user_id, task_data, bulk_import_id],
                    countdown=delay_seconds
                )
                print(f"‚úÖ [WORKER] –ó–∞–¥–∞—á–∞ {i+1} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {delay_seconds}—Å —Å ID: {result.id}")
                print(f"‚úÖ [WORKER] –ó–∞–¥–∞—á–∞ {i+1} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {delay_seconds}—Å —Å ID: {result.id}", flush=True)
                logger.info(f"‚úÖ [WORKER] –ó–∞–¥–∞—á–∞ {i+1} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {delay_seconds}—Å —Å ID: {result.id}")
                
            except Exception as e:
                print(f"‚ùå [WORKER] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ {i+1}: {e}")
                print(f"‚ùå [WORKER] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ {i+1}: {e}", flush=True)
                logger.error(f"‚ùå [WORKER] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ {i+1}: {e}")
                bulk_import.failed_tasks += 1
                bulk_import.failed_task_ids.append(task_data.get('id', f'task_{i+1}'))
                bulk_import.save()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å - –≤—Å–µ –∑–∞–¥–∞—á–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã
        bulk_import.status = 'running'
        bulk_import.save()
        
        logger.info(f"‚úÖ –ú–∞—Å—Å–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω. –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {len(all_tasks)}")
        print(f"‚úÖ –ú–∞—Å—Å–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω. –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {len(all_tasks)}")
        print(f"‚úÖ –ú–∞—Å—Å–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω. –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {len(all_tasks)}", flush=True)
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –º–∞—Å—Å–æ–≤–æ–º –∏–º–ø–æ—Ä—Ç–µ: {e}")
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –º–∞—Å—Å–æ–≤–æ–º –∏–º–ø–æ—Ä—Ç–µ: {e}")
        try:
            bulk_import = ClickUpBulkImport.objects.get(id=bulk_import_id)
            bulk_import.status = 'failed'
            bulk_import.error_message = str(e)
            bulk_import.save()
        except Exception as save_error:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ—à–∏–±–∫–∏: {save_error}")
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ—à–∏–±–∫–∏: {save_error}")


@shared_task(bind=True)
def import_single_task(self, user_id, task_data, bulk_import_id):
    """
    –ò–º–ø–æ—Ä—Ç –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏ ClickUp
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        task_data: –î–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏–∑ ClickUp API
        bulk_import_id: ID –∑–∞–ø–∏—Å–∏ –º–∞—Å—Å–æ–≤–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
    """
    task_id = task_data.get('id', 'unknown')
    print(f"üéØ [TASK] –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç –∑–∞–¥–∞—á–∏ {task_id}")
    logger.info(f"üéØ [TASK] –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç –∑–∞–¥–∞—á–∏ {task_id}")
    
    try:
        user = User.objects.get(id=user_id)
        bulk_import = ClickUpBulkImport.objects.get(id=bulk_import_id)
        
        if not task_id:
            raise ValueError("ID –∑–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        print(f"üîÑ [TASK] –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É {task_id}")
        logger.info(f"üîÑ [TASK] –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É {task_id}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å ClickUp
        service = ClickUpService(user.clickup_api_key)
        
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        try:
            parsed_data = service.parse_task_data(task_data)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∏ {task_id}: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∏ {task_id}: {e}")
            raise
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
        task = None
        created = False
        try:
            task, created = ClickUpTask.objects.update_or_create(
                task_id=task_id,
                user=user,
                defaults=parsed_data
            )
            logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ {task_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î")
            print(f"‚úÖ –ó–∞–¥–∞—á–∞ {task_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î")
        except Exception as e:
            error_msg = str(e)
            if "database is locked" in error_msg.lower():
                # –í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ - –ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
                logger.warning(f"‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ë–î –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}: {e}")
                print(f"‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ë–î –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}: {e}")
                # Retry —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
                import time
                time.sleep(5)
                try:
                    task, created = ClickUpTask.objects.update_or_create(
                        task_id=task_id,
                        user=user,
                        defaults=parsed_data
                    )
                    logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ {task_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î –ø–æ—Å–ª–µ retry")
                    print(f"‚úÖ –ó–∞–¥–∞—á–∞ {task_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î –ø–æ—Å–ª–µ retry")
                except Exception as retry_error:
                    logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ {task_id} –≤ –ë–î –ø–æ—Å–ª–µ retry: {retry_error}")
                    print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ {task_id} –≤ –ë–î –ø–æ—Å–ª–µ retry: {retry_error}")
                    raise
            else:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ {task_id} –≤ –ë–î: {e}")
                print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ {task_id} –≤ –ë–î: {e}")
                raise
        
        # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –≤ Huntflow, –µ—Å–ª–∏ –µ—Å—Ç—å –≤–ª–æ–∂–µ–Ω–∏—è - –ò–°–ü–û–õ–¨–ó–£–ï–ú –û–ë–©–£–Æ –õ–û–ì–ò–ö–£
        huntflow_success = False
        if task.attachments and task.attachments != '[]':
            try:
                logger.info(f"üîÑ –ü–µ—Ä–µ–Ω–æ—Å–∏–º –∑–∞–¥–∞—á—É {task_id} –≤ Huntflow...")
                print(f"üîÑ –ü–µ—Ä–µ–Ω–æ—Å–∏–º –∑–∞–¥–∞—á—É {task_id} –≤ Huntflow...")
                logger.debug(f"üìé –í–ª–æ–∂–µ–Ω–∏—è: {task.attachments}")
                print(f"üìé –í–ª–æ–∂–µ–Ω–∏—è: {task.attachments}")
                
                # –ò–°–ü–û–õ–¨–ó–£–ï–ú –û–ë–©–£–Æ –õ–û–ì–ò–ö–£ –í–ú–ï–°–¢–û –î–£–ë–õ–ò–†–û–í–ê–ù–ù–û–ì–û –ö–û–î–ê
                from logic.integration.shared.huntflow_operations import HuntflowOperations
                
                huntflow_ops = HuntflowOperations(user)
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é
                accounts = huntflow_ops.get_accounts()
                if not accounts:
                    logger.warning(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π Huntflow –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username}")
                    print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π Huntflow –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username}")
                else:
                    account_id = accounts[0]['id']
                    
                    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
                    task_data_for_huntflow = {
                        'name': task.name,
                        'description': task.description,
                        'status': task.status,
                        'attachments': json.loads(task.attachments) if isinstance(task.attachments, str) else task.attachments,
                        'comments': [],  # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                        'assignees': json.loads(task.assignees) if isinstance(task.assignees, str) else task.assignees,
                        'custom_fields': task.custom_fields
                    }
                    
                    # –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —á–µ—Ä–µ–∑ –æ–±—â—É—é –ª–æ–≥–∏–∫—É
                    applicant = huntflow_ops.create_candidate_from_task_data(
                        task_data=task_data_for_huntflow,
                        account_id=account_id,
                        vacancy_id=None,  # –ë–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –≤–∞–∫–∞–Ω—Å–∏–∏ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º –∏–º–ø–æ—Ä—Ç–µ
                        source_type='clickup'
                    )
                    
                    if applicant and isinstance(applicant, dict):
                        huntflow_success = True
                        applicant_id = applicant.get('id', 'unknown')
                        logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ {task_id} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ Huntflow (–∫–∞–Ω–¥–∏–¥–∞—Ç ID: {applicant_id})")
                        print(f"‚úÖ –ó–∞–¥–∞—á–∞ {task_id} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ Huntflow (–∫–∞–Ω–¥–∏–¥–∞—Ç ID: {applicant_id})")
                    else:
                        logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ –∑–∞–¥–∞—á–∏ {task_id} –≤ Huntflow: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ –∑–∞–¥–∞—á–∏ {task_id} –≤ Huntflow: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
                
            except Exception as huntflow_error:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ –≤ Huntflow: {huntflow_error}")
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ –≤ Huntflow: {huntflow_error}")
                import traceback
                traceback.print_exc()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        bulk_import.processed_tasks += 1
        # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î - —ç—Ç–æ —É–∂–µ —É—Å–ø–µ—Ö
        # Huntflow - —ç—Ç–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–∞—è
        bulk_import.successful_tasks += 1
        if not huntflow_success and task.attachments and task.attachments != '[]':
            # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—ã–ª–∏ –≤–ª–æ–∂–µ–Ω–∏—è, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤ Huntflow
            logger.warning(f"‚ö†Ô∏è –ó–∞–¥–∞—á–∞ {task_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, –Ω–æ –Ω–µ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ Huntflow")
            print(f"‚ö†Ô∏è –ó–∞–¥–∞—á–∞ {task_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, –Ω–æ –Ω–µ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ Huntflow")
        bulk_import.save()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ –º–∞—Å—Å–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç
        if bulk_import.processed_tasks >= bulk_import.total_tasks:
            bulk_import.status = 'completed'
            bulk_import.completed_at = timezone.now()
            bulk_import.save()
            logger.info(f"üéâ –ú–∞—Å—Å–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {bulk_import.processed_tasks}, —É—Å–ø–µ—à–Ω–æ: {bulk_import.successful_tasks}, –Ω–µ—É–¥–∞—á–Ω–æ: {bulk_import.failed_tasks}")
            print(f"üéâ –ú–∞—Å—Å–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {bulk_import.processed_tasks}, —É—Å–ø–µ—à–Ω–æ: {bulk_import.successful_tasks}, –Ω–µ—É–¥–∞—á–Ω–æ: {bulk_import.failed_tasks}")
        
        action = "—Å–æ–∑–¥–∞–Ω–∞" if created else "–æ–±–Ω–æ–≤–ª–µ–Ω–∞"
        huntflow_status = " –∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ Huntflow" if huntflow_success else ""
        logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ {task_id} {action}{huntflow_status}")
        print(f"‚úÖ –ó–∞–¥–∞—á–∞ {task_id} {action}{huntflow_status}")
        
    except Exception as e:
        task_id = task_data.get('id', 'unknown')
        print(f"‚ùå [TASK] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∑–∞–¥–∞—á–∏ {task_id}: {e}")
        logger.error(f"‚ùå [TASK] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∑–∞–¥–∞—á–∏ {task_id}: {e}")
        try:
            bulk_import = ClickUpBulkImport.objects.get(id=bulk_import_id)
            bulk_import.processed_tasks += 1
            bulk_import.failed_tasks += 1
            bulk_import.failed_task_ids.append(task_id)
            bulk_import.save()
            print(f"üìä [TASK] –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: processed={bulk_import.processed_tasks}, successful={bulk_import.successful_tasks}, failed={bulk_import.failed_tasks}")
            logger.info(f"üìä [TASK] –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: processed={bulk_import.processed_tasks}, successful={bulk_import.successful_tasks}, failed={bulk_import.failed_tasks}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ –º–∞—Å—Å–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç
            if bulk_import.processed_tasks >= bulk_import.total_tasks:
                bulk_import.status = 'completed'
                bulk_import.completed_at = timezone.now()
                bulk_import.save()
                print(f"üéâ [TASK] –ú–∞—Å—Å–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {bulk_import.processed_tasks}, —É—Å–ø–µ—à–Ω–æ: {bulk_import.successful_tasks}, –Ω–µ—É–¥–∞—á–Ω–æ: {bulk_import.failed_tasks}")
                logger.info(f"üéâ [TASK] –ú–∞—Å—Å–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {bulk_import.processed_tasks}, —É—Å–ø–µ—à–Ω–æ: {bulk_import.successful_tasks}, –Ω–µ—É–¥–∞—á–Ω–æ: {bulk_import.failed_tasks}")
        except Exception as save_error:
            print(f"‚ùå [TASK] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {save_error}")
            logger.error(f"‚ùå [TASK] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {save_error}")


@shared_task
def retry_failed_tasks(user_id, bulk_import_id):
    """
    –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∏–º–ø–æ—Ä—Ç –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–¥–∞—á
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bulk_import_id: ID –∑–∞–ø–∏—Å–∏ –º–∞—Å—Å–æ–≤–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
    """
    try:
        user = User.objects.get(id=user_id)
        bulk_import = ClickUpBulkImport.objects.get(id=bulk_import_id)
        
        if not bulk_import.failed_task_ids:
            logger.info("–ù–µ—Ç –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞")
            return
        
        logger.info(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∏–º–ø–æ—Ä—Ç {len(bulk_import.failed_task_ids)} –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–¥–∞—á")
        print(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∏–º–ø–æ—Ä—Ç {len(bulk_import.failed_task_ids)} –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–¥–∞—á")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–¥–∞—á
        failed_task_ids = bulk_import.failed_task_ids.copy()
        bulk_import.failed_tasks = 0
        bulk_import.failed_task_ids = []
        bulk_import.status = 'running'
        bulk_import.save()
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        from .models import ClickUpSettings
        settings = ClickUpSettings.objects.get(user=user)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å ClickUp
        service = ClickUpService(user.clickup_api_key)
        
        # –ü–æ–≤—Ç–æ—Ä–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ—É–¥–∞—á–Ω—ã–µ –∑–∞–¥–∞—á–∏
        for i, task_id in enumerate(failed_task_ids):
            try:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏–∑ API
                task_data = service.get_task(task_id)
                if task_data:
                    logger.info(f"üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∏–º–ø–æ—Ä—Ç –∑–∞–¥–∞—á–∏ {task_id} –≤ –æ—á–µ—Ä–µ–¥—å")
                    print(f"üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∏–º–ø–æ—Ä—Ç –∑–∞–¥–∞—á–∏ {task_id} –≤ –æ—á–µ—Ä–µ–¥—å")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å –ë–ï–ó –∑–∞–¥–µ—Ä–∂–∫–∏ - –æ–Ω–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è —Å—Ä–∞–∑—É
                    import_single_task.apply_async(
                        args=[user_id, task_data, bulk_import_id]
                    )
                    
                    # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∑–∞–¥–∞—á (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π)
                    if i < len(failed_task_ids) - 1:
                        delay = 8  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ 8 —Å–µ–∫—É–Ω–¥
                        logger.info(f"‚è∏Ô∏è –ñ–¥–µ–º {delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–∏...")
                        print(f"‚è∏Ô∏è –ñ–¥–µ–º {delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–∏...")
                        import time
                        time.sleep(delay)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –∏–º–ø–æ—Ä—Ç–µ –∑–∞–¥–∞—á–∏ {task_id}: {e}")
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –∏–º–ø–æ—Ä—Ç–µ –∑–∞–¥–∞—á–∏ {task_id}: {e}")
                bulk_import.failed_tasks += 1
                bulk_import.failed_task_ids.append(task_id)
                bulk_import.save()
        
        logger.info("‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∏–º–ø–æ—Ä—Ç –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–¥–∞—á –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω")
        print("‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∏–º–ø–æ—Ä—Ç –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–¥–∞—á –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –∏–º–ø–æ—Ä—Ç–µ: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –∏–º–ø–æ—Ä—Ç–µ: {e}")
        try:
            bulk_import = ClickUpBulkImport.objects.get(id=bulk_import_id)
            bulk_import.status = 'failed'
            bulk_import.error_message = str(e)
            bulk_import.save()
        except Exception as save_error:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ—à–∏–±–∫–∏: {save_error}")
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ—à–∏–±–∫–∏: {save_error}")
