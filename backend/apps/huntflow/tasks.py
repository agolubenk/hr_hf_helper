import time
import logging
from datetime import datetime, timedelta
from celery import shared_task
from django.utils import timezone
from django.conf import settings
from apps.accounts.models import User
from .token_service import HuntflowTokenService

logger = logging.getLogger(__name__)

@shared_task
def refresh_huntflow_tokens():
    """
    –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ Huntflow
    –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π —á–∞—Å –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω—ã
    """
    logger.info("üîÑ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ Huntflow")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏ Huntflow
    users_with_tokens = User.objects.filter(
        huntflow_access_token__isnull=False,
        huntflow_refresh_token__isnull=False,
        huntflow_access_token__gt='',
        huntflow_refresh_token__gt=''
    ).exclude(
        huntflow_access_token='',
        huntflow_refresh_token=''
    )
    
    updated_count = 0
    failed_count = 0
    
    for user in users_with_tokens:
        try:
            if should_refresh_tokens(user):
                logger.info(f"üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.email}")
                
                token_service = HuntflowTokenService(user)
                success = refresh_tokens_with_retry(token_service)
                
                if success:
                    updated_count += 1
                    logger.info(f"‚úÖ –¢–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è {user.email}")
                else:
                    failed_count += 1
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω—ã –¥–ª—è {user.email}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é —Å–∏—Ç—É–∞—Ü–∏—é
                    if is_critical_situation(user):
                        logger.critical(f"üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –°–ò–¢–£–ê–¶–ò–Ø: –¢–æ–∫–µ–Ω—ã –∏—Å—Ç–µ–∫–ª–∏ –¥–ª—è {user.email}")
                        send_critical_alert(user)
                        
        except Exception as e:
            failed_count += 1
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è {user.email}: {e}")
    
    logger.info(f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {updated_count} —É—Å–ø–µ—à–Ω–æ, {failed_count} –æ—à–∏–±–æ–∫")
    return {
        'updated': updated_count,
        'failed': failed_count,
        'total': users_with_tokens.count()
    }

def should_refresh_tokens(user):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞ 24 —á–∞—Å–∞ –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è –ª—é–±–æ–≥–æ –∏–∑ —Ç–æ–∫–µ–Ω–æ–≤
    """
    now = timezone.now()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º access token
    if user.huntflow_token_expires_at:
        access_refresh_time = user.huntflow_token_expires_at - timedelta(hours=24)
        if now >= access_refresh_time:
            logger.info(f"‚è∞ Access token –¥–ª—è {user.email} –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å (–∏—Å—Ç–µ–∫–∞–µ—Ç {user.huntflow_token_expires_at})")
            return True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º refresh token
    if user.huntflow_refresh_expires_at:
        refresh_refresh_time = user.huntflow_refresh_expires_at - timedelta(hours=24)
        if now >= refresh_refresh_time:
            logger.info(f"‚è∞ Refresh token –¥–ª—è {user.email} –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å (–∏—Å—Ç–µ–∫–∞–µ—Ç {user.huntflow_refresh_expires_at})")
            return True
    
    return False

def refresh_tokens_with_retry(token_service, max_retries=5):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω—ã —Å retry –ª–æ–≥–∏–∫–æ–π –∏ —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º backoff
    """
    backoff_delays = [30, 60, 120, 240, 480]  # –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    
    for attempt in range(max_retries):
        try:
            success = token_service.refresh_access_token()
            if success:
                return True
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
            
            if attempt < max_retries - 1:
                delay = backoff_delays[attempt]
                logger.info(f"‚è≥ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥...")
                time.sleep(delay)
            else:
                logger.error(f"‚ùå –í—Å–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –Ω–µ —É–¥–∞–ª–∏—Å—å")
                
    return False

def is_critical_situation(user):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–∏—Ç—É–∞—Ü–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π
    (–æ–±–∞ —Ç–æ–∫–µ–Ω–∞ –∏—Å—Ç–µ–∫–ª–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å)
    """
    now = timezone.now()
    
    access_expired = user.huntflow_token_expires_at and now >= user.huntflow_token_expires_at
    refresh_expired = user.huntflow_refresh_expires_at and now >= user.huntflow_refresh_expires_at
    
    return access_expired and refresh_expired

def send_critical_alert(user):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å —Ç–æ–∫–µ–Ω–∞–º–∏
    """
    message = f"""
üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –°–ò–¢–£–ê–¶–ò–Ø –° HUNTFLOW –¢–û–ö–ï–ù–ê–ú–ò

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.email}
Access token –∏—Å—Ç–µ–∫–∞–µ—Ç: {user.huntflow_token_expires_at}
Refresh token –∏—Å—Ç–µ–∫–∞–µ—Ç: {user.huntflow_refresh_expires_at}

–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Huntflow.
"""
    
    logger.critical(message)
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Slack, email –∏ —Ç.–¥.
    # –ù–∞–ø—Ä–∏–º–µ—Ä:
    # send_slack_notification(message)
    # send_email_alert(user.email, "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Huntflow", message)

@shared_task
def check_huntflow_token_health():
    """
    –ó–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Ç–æ–∫–µ–Ω–æ–≤ Huntflow
    –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    """
    logger.info("üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Ç–æ–∫–µ–Ω–æ–≤ Huntflow")
    
    users_with_tokens = User.objects.filter(
        huntflow_access_token__isnull=False,
        huntflow_refresh_token__isnull=False,
        huntflow_access_token__gt='',
        huntflow_refresh_token__gt=''
    )
    
    now = timezone.now()
    health_report = {
        'total_users': users_with_tokens.count(),
        'healthy': 0,
        'warning': 0,
        'critical': 0,
        'details': []
    }
    
    for user in users_with_tokens:
        status = get_token_health_status(user, now)
        health_report[status] += 1
        health_report['details'].append({
            'user': user.email,
            'status': status,
            'access_expires': user.huntflow_token_expires_at,
            'refresh_expires': user.huntflow_refresh_expires_at
        })
    
    logger.info(f"üè• –û—Ç—á–µ—Ç –æ –∑–¥–æ—Ä–æ–≤—å–µ —Ç–æ–∫–µ–Ω–æ–≤: {health_report}")
    return health_report

def get_token_health_status(user, now):
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    access_expires = user.huntflow_token_expires_at
    refresh_expires = user.huntflow_refresh_expires_at
    
    if not access_expires or not refresh_expires:
        return 'critical'
    
    # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π: —Ç–æ–∫–µ–Ω—ã –∏—Å—Ç–µ–∫–ª–∏
    if now >= access_expires and now >= refresh_expires:
        return 'critical'
    
    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: —Ç–æ–∫–µ–Ω—ã –∏—Å—Ç–µ–∫–∞—é—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤
    warning_threshold = now + timedelta(hours=24)
    if access_expires <= warning_threshold or refresh_expires <= warning_threshold:
        return 'warning'
    
    # –ó–¥–æ—Ä–æ–≤—ã–π: —Ç–æ–∫–µ–Ω—ã –≤–∞–ª–∏–¥–Ω—ã –±–æ–ª–µ–µ 24 —á–∞—Å–æ–≤
    return 'healthy'
