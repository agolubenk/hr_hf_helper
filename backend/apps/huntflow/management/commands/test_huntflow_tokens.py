from django.core.management.base import BaseCommand
from apps.huntflow.tasks import refresh_huntflow_tokens, check_huntflow_token_health
from apps.accounts.models import User

class Command(BaseCommand):
    help = '–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ Huntflow'

    def add_arguments(self, parser):
        parser.add_argument(
            '--action',
            type=str,
            choices=['refresh', 'health', 'both'],
            default='both',
            help='–î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è'
        )

    def handle(self, *args, **options):
        action = options['action']
        
        self.stdout.write(self.style.SUCCESS('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ Huntflow'))
        
        if action in ['refresh', 'both']:
            self.stdout.write('üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤...')
            try:
                result = refresh_huntflow_tokens()
                self.stdout.write(
                    self.style.SUCCESS(
                        f'‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {result["updated"]} —É—Å–ø–µ—à–Ω–æ, '
                        f'{result["failed"]} –æ—à–∏–±–æ–∫ –∏–∑ {result["total"]} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
                    )
                )
            except Exception as e:
                self.stdout.write(self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤: {e}'))
        
        if action in ['health', 'both']:
            self.stdout.write('üè• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Ç–æ–∫–µ–Ω–æ–≤...')
            try:
                result = check_huntflow_token_health()
                self.stdout.write(
                    self.style.SUCCESS(
                        f'‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {result["healthy"]} –∑–¥–æ—Ä–æ–≤—ã—Ö, '
                        f'{result["warning"]} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π, {result["critical"]} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö '
                        f'–∏–∑ {result["total_users"]} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
                    )
                )
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏
                if result['details']:
                    self.stdout.write('\nüìä –î–µ—Ç–∞–ª–∏:')
                    for detail in result['details']:
                        status_emoji = {
                            'healthy': '‚úÖ',
                            'warning': '‚ö†Ô∏è',
                            'critical': 'üö®'
                        }.get(detail['status'], '‚ùì')
                        
                        self.stdout.write(
                            f'  {status_emoji} {detail["user"]}: {detail["status"]} '
                            f'(access: {detail["access_expires"]}, refresh: {detail["refresh_expires"]})'
                        )
                        
            except Exception as e:
                self.stdout.write(self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–¥–æ—Ä–æ–≤—å—è: {e}'))
        
        self.stdout.write(self.style.SUCCESS('üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!'))
