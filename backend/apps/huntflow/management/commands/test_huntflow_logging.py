from django.core.management.base import BaseCommand
from django.contrib.auth import get_user_model
from apps.huntflow.services import HuntflowService


class Command(BaseCommand):
    help = '–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Huntflow API –∏ –ª–æ–≥–∏—Ä—É–µ—Ç –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã'

    def handle(self, *args, **options):
        User = get_user_model()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è admin
        try:
            user = User.objects.get(username='admin')
        except User.DoesNotExist:
            self.stdout.write(self.style.ERROR('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å admin –Ω–µ –Ω–∞–π–¥–µ–Ω'))
            return
        
        self.stdout.write(self.style.SUCCESS('=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï HUNTFLOW API –° –õ–û–ì–ò–†–û–í–ê–ù–ò–ï–ú ===\n'))
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å
        huntflow_service = HuntflowService(user)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        self.stdout.write('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Huntflow API...')
        if huntflow_service.test_connection():
            self.stdout.write(self.style.SUCCESS('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!'))
        else:
            self.stdout.write(self.style.ERROR('‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å'))
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã
        self.stdout.write('\nüìã –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤...')
        accounts = huntflow_service.get_accounts()
        if accounts and 'items' in accounts:
            self.stdout.write(f'‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(accounts["items"])} –∞–∫–∫–∞—É–Ω—Ç–æ–≤')
            for account in accounts['items']:
                self.stdout.write(f'  - ID: {account.get("id")}, Name: {account.get("name")}')
        else:
            self.stdout.write('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã')
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        if accounts and 'items' in accounts:
            account_id = accounts['items'][0]['id']
            self.stdout.write(f'\nüíº –ü–æ–ª—É—á–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}...')
            vacancies = huntflow_service.get_vacancies(account_id, count=5)
            if vacancies and 'items' in vacancies:
                self.stdout.write(f'‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(vacancies["items"])} –≤–∞–∫–∞–Ω—Å–∏–π')
                for vacancy in vacancies['items']:
                    self.stdout.write(f'  - ID: {vacancy.get("id")}, Position: {vacancy.get("position")}')
            else:
                self.stdout.write('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏')
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã
        if accounts and 'items' in accounts:
            self.stdout.write(f'\nüìä –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}...')
            statuses = huntflow_service.get_vacancy_statuses(account_id)
            if statuses and 'items' in statuses:
                self.stdout.write(f'‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(statuses["items"])} —Å—Ç–∞—Ç—É—Å–æ–≤')
                for status in statuses['items']:
                    self.stdout.write(f'  - ID: {status.get("id")}, Name: {status.get("name")}')
            else:
                self.stdout.write('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å—ã')
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∫–∏
        if accounts and 'items' in accounts:
            self.stdout.write(f'\nüè∑Ô∏è –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∫–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}...')
            tags = huntflow_service.get_tags(account_id)
            if tags and 'items' in tags:
                self.stdout.write(f'‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(tags["items"])} –º–µ—Ç–æ–∫')
                for tag in tags['items']:
                    self.stdout.write(f'  - ID: {tag.get("id")}, Name: {tag.get("name")}, Color: {tag.get("color")}')
            else:
                self.stdout.write('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç–∫–∏')
        
        self.stdout.write(self.style.SUCCESS('\n=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û ==='))
        self.stdout.write('\n–¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤ –∞–¥–º–∏–Ω–∫–µ Django:')
        self.stdout.write('http://127.0.0.1:8000/admin/huntflow/huntflowlog/')
