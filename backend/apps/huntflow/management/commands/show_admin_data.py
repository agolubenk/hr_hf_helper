from django.core.management.base import BaseCommand
from django.contrib.auth import get_user_model
from apps.finance.models import Grade, CurrencyRate
from apps.huntflow.models import HuntflowCache, HuntflowLog
from django.contrib.admin.models import LogEntry


class Command(BaseCommand):
    help = '–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤ –∞–¥–º–∏–Ω–∫–µ Django'

    def handle(self, *args, **options):
        User = get_user_model()
        
        self.stdout.write(self.style.SUCCESS('=== –î–ê–ù–ù–´–ï –í –ê–î–ú–ò–ù–ö–ï DJANGO ===\n'))
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        self.stdout.write(self.style.WARNING('üë• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò:'))
        users = User.objects.all()
        for user in users:
            self.stdout.write(f'  ID: {user.id}, Username: {user.username}, Full name: {user.full_name}')
            self.stdout.write(f'    - Huntflow prod URL: {user.huntflow_prod_url or "–ù–µ —É–∫–∞–∑–∞–Ω"}')
            self.stdout.write(f'    - Huntflow sandbox URL: {user.huntflow_sandbox_url or "–ù–µ —É–∫–∞–∑–∞–Ω"}')
            self.stdout.write(f'    - Active system: {user.active_system}')
            self.stdout.write(f'    - Groups: {", ".join([g.name for g in user.groups.all()])}')
            self.stdout.write()
        
        # –ì—Ä–µ–π–¥—ã
        self.stdout.write(self.style.WARNING('üìä –ì–†–ï–ô–î–´:'))
        grades = Grade.objects.all()
        for grade in grades:
            self.stdout.write(f'  ID: {grade.id}, Name: {grade.name}')
        self.stdout.write()
        
        # –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç
        self.stdout.write(self.style.WARNING('üí∞ –ö–£–†–°–´ –í–ê–õ–Æ–¢:'))
        rates = CurrencyRate.objects.all()
        for rate in rates:
            self.stdout.write(f'  ID: {rate.id}, Currency: {rate.code}, Rate: {rate.rate}, Date: {rate.fetched_at}')
        self.stdout.write()
        
        # –ö—ç—à Huntflow
        self.stdout.write(self.style.WARNING('üóÑÔ∏è –ö–≠–® HUNTFLOW:'))
        cache_items = HuntflowCache.objects.all()
        if cache_items:
            for item in cache_items:
                self.stdout.write(f'  ID: {item.id}, Key: {item.cache_key}, Age: {item.age_minutes} –º–∏–Ω, Status: {"–ò—Å—Ç–µ–∫" if item.is_expired else "–ê–∫—Ç–∏–≤–µ–Ω"}')
        else:
            self.stdout.write('  –ö—ç—à –ø—É—Å—Ç')
        self.stdout.write()
        
        # –õ–æ–≥–∏ Huntflow
        self.stdout.write(self.style.WARNING('üìù –õ–û–ì–ò HUNTFLOW:'))
        logs = HuntflowLog.objects.all()
        if logs:
            for log in logs:
                status = "‚úÖ" if log.is_success else "‚ùå" if log.is_error else "‚ö†Ô∏è"
                self.stdout.write(f'  ID: {log.id}, {status} {log.method} {log.endpoint}, Status: {log.status_code}, Time: {log.created_at}')
        else:
            self.stdout.write('  –õ–æ–≥–∏ –ø—É—Å—Ç—ã')
        self.stdout.write()
        
        # –õ–æ–≥–∏ –∞–¥–º–∏–Ω–∫–∏ Django
        self.stdout.write(self.style.WARNING('üîß –õ–û–ì–ò –ê–î–ú–ò–ù–ö–ò DJANGO:'))
        admin_logs = LogEntry.objects.all().order_by('-action_time')[:10]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10
        for log in admin_logs:
            self.stdout.write(f'  ID: {log.id}, User: {log.user.username}, Action: {log.get_action_flag_display()}, Object: {log.object_repr}, Time: {log.action_time}')
        self.stdout.write()
        
        self.stdout.write(self.style.SUCCESS('=== –ö–û–ù–ï–¶ –î–ê–ù–ù–´–• ==='))
        self.stdout.write()
        self.stdout.write('–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω–∫—É Django:')
        self.stdout.write('http://127.0.0.1:8000/admin/')
