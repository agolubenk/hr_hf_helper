import requests
from typing import Dict, Any, List, Optional
from django.conf import settings
from apps.google_oauth.cache_service import HuntflowAPICache
from .token_service import HuntflowTokenService
import logging

logger = logging.getLogger(__name__)


class HuntflowService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Huntflow API —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ç–æ–∫–µ–Ω–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    
    def __init__(self, user):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ Huntflow
        """
        self.user = user
        self.token_service = HuntflowTokenService(user)
    
    def _get_base_url(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –±–∞–∑–æ–≤—ã–π URL –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤"""
        if self.user.active_system == 'prod':
            return self.user.huntflow_prod_url
        else:
            return self.user.huntflow_sandbox_url
    
    def _get_api_key(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç API –∫–ª—é—á –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (fallback –¥–ª—è —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º—ã)"""
        if self.user.active_system == 'prod':
            return self.user.huntflow_prod_api_key
        else:
            return self.user.huntflow_sandbox_api_key
    
    def _get_headers(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –≤–∞–ª–∏–¥–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º"""
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ API –∫–ª—é—á –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–∏—Å—Ç–µ–º—ã
        api_key = self._get_api_key()
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å API –∫–ª—é—á, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏)
        if api_key:
            return {
                'Authorization': f'Bearer {api_key}',
                'Content-Type': 'application/json'
            }
        
        # –ï—Å–ª–∏ –Ω–µ—Ç API –∫–ª—é—á–∞, –ø—Ä–æ–±—É–µ–º —Ç–æ–∫–µ–Ω—ã
        if self.user.huntflow_access_token:
            # –ü–æ–ª—É—á–∞–µ–º –≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω
            access_token = self.token_service.ensure_valid_token()
            if access_token:
                return {
                    'Authorization': f'Bearer {access_token}',
                    'Content-Type': 'application/json'
                }
        
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        raise Exception("–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–∏—Å—Ç–µ–º—ã")
    
    def _extract_name_from_task_title(self, task_name: str) -> Dict[str, str]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–º—è, —Ñ–∞–º–∏–ª–∏—é –∏ –æ—Ç—á–µ—Å—Ç–≤–æ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ ClickUp
        
        Args:
            task_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–∞–º–∏ 'first_name', 'last_name', 'middle_name'
        """
        if not task_name:
            return {'first_name': '', 'last_name': '', 'middle_name': ''}
        
        # –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É –≤–∏–¥—É
        import re
        cleaned_name = re.sub(r'[^\w\s\-\.]', ' ', task_name)  # –£–±–∏—Ä–∞–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ –ø—Ä–æ–±–µ–ª–æ–≤, –¥–µ—Ñ–∏—Å–æ–≤ –∏ —Ç–æ—á–µ–∫
        cleaned_name = re.sub(r'\s+', ' ', cleaned_name).strip()  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–ª–æ–≤–∞
        words = cleaned_name.split()
        
        if len(words) == 0:
            return {'first_name': '', 'last_name': '', 'middle_name': ''}
        elif len(words) == 1:
            # –¢–æ–ª—å–∫–æ –æ–¥–Ω–æ —Å–ª–æ–≤–æ - —Å—á–∏—Ç–∞–µ–º –µ–≥–æ —Ñ–∞–º–∏–ª–∏–µ–π
            return {'first_name': '', 'last_name': words[0], 'middle_name': ''}
        elif len(words) == 2:
            # –î–≤–∞ —Å–ª–æ–≤–∞ - —Ñ–∞–º–∏–ª–∏—è –∏ –∏–º—è
            return {'first_name': words[1], 'last_name': words[0], 'middle_name': ''}
        elif len(words) == 3:
            # –¢—Ä–∏ —Å–ª–æ–≤–∞ - —Ñ–∞–º–∏–ª–∏—è, –∏–º—è, –æ—Ç—á–µ—Å—Ç–≤–æ
            return {'first_name': words[1], 'last_name': words[0], 'middle_name': words[2]}
        else:
            # –ë–æ–ª—å—à–µ —Ç—Ä–µ—Ö —Å–ª–æ–≤ - –ø—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –≥–¥–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –∏–º—è
            # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ç–∏–ø–∞ "–ò–º—è –§–∞–º–∏–ª–∏—è - –î–æ–ª–∂–Ω–æ—Å—Ç—å" –∏–ª–∏ "–§–∞–º–∏–ª–∏—è –ò–º—è - –î–æ–ª–∂–Ω–æ—Å—Ç—å"
            first_word = words[0]
            second_word = words[1]
            
            # –ï—Å–ª–∏ –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã –∏ –≤—Ç–æ—Ä–æ–µ —Ç–æ–∂–µ - —ç—Ç–æ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ "–ò–º—è –§–∞–º–∏–ª–∏—è"
            if first_word[0].isupper() and second_word[0].isupper():
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–µ—Ñ–∏—Å –∏–ª–∏ —Ç–∏—Ä–µ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ (—É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å)
                if '-' in task_name or '‚Äì' in task_name:
                    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é, –æ—Å—Ç–∞–ª—å–Ω–æ–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
                    return {'first_name': first_word, 'last_name': second_word, 'middle_name': ''}
                else:
                    # –ù–µ—Ç –¥–µ—Ñ–∏—Å–∞ - –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ "–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ"
                    return {'first_name': second_word, 'last_name': first_word, 'middle_name': ' '.join(words[2:])}
            else:
                # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞ - —Ñ–∞–º–∏–ª–∏—è, –∏–º—è, –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ –≤ –æ—Ç—á–µ—Å—Ç–≤–æ
                middle_name = ' '.join(words[2:])
                return {'first_name': words[1], 'last_name': words[0], 'middle_name': middle_name}
    
    def _create_clickup_comment(self, task_description: str = None, task_comments: List[Dict[str, Any]] = None, task_status: str = None) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –ª–∏—á–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è Huntflow –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ ClickUp
        
        Args:
            task_description: –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ ClickUp
            task_comments: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –∑–∞–¥–∞—á–µ ClickUp
            task_status: –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ ClickUp
            
        Returns:
            –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏—á–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è Huntflow
        """
        import re
        
        print(f"üîç –°–æ–∑–¥–∞–µ–º –ª–∏—á–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ –∏–∑ ClickUp:")
        print(f"  - –û–ø–∏—Å–∞–Ω–∏–µ: {task_description[:100] if task_description else '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}...")
        print(f"  - –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {len(task_comments) if task_comments else 0}")
        print(f"  - –°—Ç–∞—Ç—É—Å: {task_status if task_status else '–ù–µ—Ç —Å—Ç–∞—Ç—É—Å–∞'}")
        
        comment_parts = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
        if task_status and task_status.strip():
            comment_parts.append("üìä –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏:")
            comment_parts.append(task_status.strip())
            comment_parts.append("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
        if task_description and task_description.strip():
            # –û—á–∏—â–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç HTML —Ç–µ–≥–æ–≤ –∏ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
            clean_description = re.sub(r'<[^>]+>', '', task_description)  # –£–±–∏—Ä–∞–µ–º HTML —Ç–µ–≥–∏
            clean_description = re.sub(r'\s+', ' ', clean_description).strip()  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
            
            if clean_description:
                comment_parts.append("üìã –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
                comment_parts.append(clean_description)
                comment_parts.append("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
        if task_comments and len(task_comments) > 0:
            comment_parts.append("üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:")
            
            for comment in task_comments:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
                comment_date = comment.get('date', '')
                if comment_date:
                    try:
                        from datetime import datetime
                        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
                        if isinstance(comment_date, str):
                            # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
                            try:
                                dt = datetime.fromisoformat(comment_date.replace('Z', '+00:00'))
                                formatted_date = dt.strftime('%d.%m.%Y %H:%M')
                            except Exception as e:
                                formatted_date = str(comment_date)
                        elif isinstance(comment_date, (int, float)):
                            # –ï—Å–ª–∏ —ç—Ç–æ timestamp (—á–∏—Å–ª–æ)
                            try:
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö –ª–∏ timestamp
                                if comment_date > 1e12:  # –ë–æ–ª—å—à–µ 1 —Ç—Ä–∏–ª–ª–∏–æ–Ω–∞ = –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
                                    comment_date = comment_date / 1000
                                
                                dt = datetime.fromtimestamp(comment_date)
                                formatted_date = dt.strftime('%d.%m.%Y %H:%M')
                            except Exception as e:
                                formatted_date = str(comment_date)
                        else:
                            formatted_date = str(comment_date)
                    except Exception as e:
                        formatted_date = str(comment_date)
                else:
                    formatted_date = '–î–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞'
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
                comment_text = comment.get('comment', '')
                if comment_text:
                    # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç HTML —Ç–µ–≥–æ–≤
                    clean_text = re.sub(r'<[^>]+>', '', comment_text)
                    clean_text = re.sub(r'\s+', ' ', clean_text).strip()
                    
                    if clean_text:
                        comment_parts.append(f"{formatted_date}: {clean_text}")
                        comment_parts.append("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏
        if comment_parts:
            result = '\n'.join(comment_parts)
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω—ã –ª–∏—á–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ –∏–∑ ClickUp ({len(result)} —Å–∏–º–≤–æ–ª–æ–≤):")
            print(f"  {result[:200]}...")
            return result
        else:
            print("‚ö†Ô∏è –õ–∏—á–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ –∏–∑ ClickUp –ø—É—Å—Ç—ã–µ")
            return ""
    
    def _create_notion_comment(self, page_title: str = None, page_content: str = None, page_status: str = None, page_priority: str = None, assignees: List[str] = None, tags: List[str] = None, custom_properties: Dict[str, Any] = None, attachments: List[Dict[str, Any]] = None, due_date: str = None, comments: List[Dict[str, Any]] = None) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –ª–∏—á–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è Huntflow –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Notion
        
        Args:
            page_title: –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Notion
            page_content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Notion
            page_status: –°—Ç–∞—Ç—É—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã Notion
            page_priority: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã Notion
            assignees: –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Notion
            tags: –¢–µ–≥–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Notion
            custom_properties: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Notion
            attachments: –í–ª–æ–∂–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã Notion
            due_date: –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã Notion
            
        Returns:
            –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏—á–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è Huntflow
        """
        import re
        from datetime import datetime
        
        print(f"üîç –°–æ–∑–¥–∞–µ–º –ª–∏—á–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ –∏–∑ Notion:")
        print(f"  - –ù–∞–∑–≤–∞–Ω–∏–µ: {page_title[:100] if page_title else '–ù–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è'}...")
        print(f"  - –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {len(page_content) if page_content else 0} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"  - –°—Ç–∞—Ç—É—Å: {page_status if page_status else '–ù–µ—Ç —Å—Ç–∞—Ç—É—Å–∞'}")
        print(f"  - –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {page_priority if page_priority else '–ù–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞'}")
        print(f"  - –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏: {len(assignees) if assignees else 0}")
        print(f"  - –¢–µ–≥–∏: {len(tags) if tags else 0}")
        print(f"  - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞: {len(custom_properties) if custom_properties else 0}")
        print(f"  - –í–ª–æ–∂–µ–Ω–∏—è: {len(attachments) if attachments else 0}")
        
        comment_parts = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        comment_parts.append("üìÑ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –ò–ó NOTION")
        comment_parts.append("=" * 50)
        comment_parts.append("")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        if page_title and page_title.strip():
            comment_parts.append("üìã –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:")
            comment_parts.append(page_title.strip())
            comment_parts.append("")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        if page_status and page_status.strip():
            comment_parts.append("üìä –°—Ç–∞—Ç—É—Å:")
            comment_parts.append(page_status.strip())
            comment_parts.append("")
        
        if page_priority and page_priority.strip():
            comment_parts.append("‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:")
            comment_parts.append(page_priority.strip())
            comment_parts.append("")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        if due_date and due_date.strip():
            comment_parts.append("üìÖ –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:")
            comment_parts.append(due_date.strip())
            comment_parts.append("")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
        if assignees and len(assignees) > 0:
            comment_parts.append("üë• –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏:")
            for assignee in assignees:
                comment_parts.append(f"  ‚Ä¢ {assignee}")
            comment_parts.append("")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥–∏
        if tags and len(tags) > 0:
            comment_parts.append("üè∑Ô∏è –¢–µ–≥–∏:")
            for tag in tags:
                comment_parts.append(f"  ‚Ä¢ {tag}")
            comment_parts.append("")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if page_content and page_content.strip():
            print(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Notion: {len(page_content)} —Å–∏–º–≤–æ–ª–æ–≤")
            # –û—á–∏—â–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç HTML —Ç–µ–≥–æ–≤ –∏ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
            clean_content = re.sub(r'<[^>]+>', '', page_content)  # –£–±–∏—Ä–∞–µ–º HTML —Ç–µ–≥–∏
            clean_content = re.sub(r'\s+', ' ', clean_content).strip()  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
            
            print(f"üîç –û—á–∏—â–µ–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ: {len(clean_content)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            if clean_content:
                comment_parts.append("üìù –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:")
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
                if len(clean_content) > 2000:
                    clean_content = clean_content[:2000] + "... (—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ–±—Ä–µ–∑–∞–Ω–æ)"
                comment_parts.append(clean_content)
                comment_parts.append("")
                print(f"‚úÖ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∑–∞–º–µ—Ç–∫–∏: {len(clean_content)} —Å–∏–º–≤–æ–ª–æ–≤")
            else:
                print("‚ö†Ô∏è –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—É—Å—Ç–æ–µ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏")
        else:
            print("‚ö†Ô∏è –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Notion –ø—É—Å—Ç–æ–µ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        if comments and len(comments) > 0:
            print(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ Notion: {len(comments)} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
            comment_parts.append("üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:")
            for comment in comments:
                author = comment.get('author', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                text = comment.get('text', '')
                created_time = comment.get('created_time', '')
                
                if text.strip():
                    comment_parts.append(f"  ‚Ä¢ {author}: {text.strip()}")
                    if created_time:
                        comment_parts.append(f"    (–¥–∞—Ç–∞: {created_time})")
            comment_parts.append("")
            print(f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∑–∞–º–µ—Ç–∫–∏: {len(comments)} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
        else:
            print("‚ö†Ô∏è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ Notion –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
        if custom_properties and len(custom_properties) > 0:
            comment_parts.append("üîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞:")
            for key, value in custom_properties.items():
                if value:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                    if isinstance(value, (list, dict)):
                        value_str = str(value)
                    else:
                        value_str = str(value)
                    comment_parts.append(f"  ‚Ä¢ {key}: {value_str}")
            comment_parts.append("")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–ª–æ–∂–µ–Ω–∏—è—Ö
        if attachments and len(attachments) > 0:
            comment_parts.append("üìé –í–ª–æ–∂–µ–Ω–∏—è:")
            for attachment in attachments:
                name = attachment.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∞–π–ª')
                file_type = attachment.get('type', 'unknown')
                size = attachment.get('size', 0)
                if size > 0:
                    size_mb = size / (1024 * 1024)
                    comment_parts.append(f"  ‚Ä¢ {name} ({file_type}, {size_mb:.1f} MB)")
                else:
                    comment_parts.append(f"  ‚Ä¢ {name} ({file_type})")
            comment_parts.append("")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏
        current_time = datetime.now().strftime("%d.%m.%Y %H:%M")
        comment_parts.append(f"üïí –ó–∞–º–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {current_time}")
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏
        result = "\n".join(comment_parts)
        
        if result.strip():
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω—ã –ª–∏—á–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ –∏–∑ Notion ({len(result)} —Å–∏–º–≤–æ–ª–æ–≤)")
            print(f"  {result[:200]}...")
            return result
        else:
            print("‚ö†Ô∏è –õ–∏—á–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ –∏–∑ Notion –ø—É—Å—Ç—ã–µ")
            return ""
    
    def _make_request(self, method: str, endpoint: str, **kwargs) -> Optional[Dict[str, Any]]:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å –∫ Huntflow API —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–æ–≤
        
        Args:
            method: HTTP –º–µ—Ç–æ–¥ (GET, POST, etc.)
            endpoint: Endpoint API
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
            
        Returns:
            –û—Ç–≤–µ—Ç API –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            headers = self._get_headers()
            kwargs['headers'] = headers
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º URL
            base_url = self._get_base_url()
            if base_url.endswith('/v2'):
                url = f"{base_url}{endpoint}"
            else:
                url = f"{base_url}/v2{endpoint}"
                
            print(f"üîç API –∑–∞–ø—Ä–æ—Å: {method} {url}")
            if 'json' in kwargs:
                print(f"üì§ JSON –¥–∞–Ω–Ω—ã–µ: {kwargs['json']}")
            if 'data' in kwargs:
                print(f"üì§ Form –¥–∞–Ω–Ω—ã–µ: {kwargs['data']}")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            request_data = {}
            if 'json' in kwargs:
                request_data = kwargs['json']
            elif 'data' in kwargs:
                request_data = kwargs['data']
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            response = requests.request(
                method=method,
                url=url,
                timeout=30,
                **kwargs
            )
            
            # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ 401 –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É, –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω
            if response.status_code == 401 and self.user.huntflow_access_token:
                logger.warning("–ü–æ–ª—É—á–µ–Ω 401, –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω")
                
                if self.token_service.refresh_access_token():
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
                    headers = self._get_headers()
                    kwargs['headers'] = headers
                    
                    # –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å
                    response = requests.request(
                        method=method,
                        url=url,
                        timeout=30,
                        **kwargs
                    )
            
            print(f"üì• –û—Ç–≤–µ—Ç API: {response.status_code}")
            print(f"üì• –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {response.text[:500]}...")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            self._log_request(method, endpoint, response.status_code, request_data, response.text)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
            if response.status_code in [200, 201]:
                try:
                    return response.json()
                except ValueError as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                    print(f"üì• –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç: {response.text}")
                    return None
            else:
                logger.error(f"–û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}")
                return None
                
        except requests.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Huntflow: {e}")
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            self._log_request(method, endpoint, None, request_data, str(e), is_error=True)
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return None
    
    def get_accounts(self) -> Optional[List[Dict[str, Any]]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π
        
        Returns:
            –°–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –∏–ª–∏ None
        """
        return self._make_request('GET', '/accounts')
    
    def get_vacancies(self, account_id: int, **params) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π
        
        Args:
            account_id: ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
            **params: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (count, page, state, etc.)
            
        Returns:
            –°–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π –∏–ª–∏ None
        """
        query_params = '&'.join([f"{k}={v}" for k, v in params.items() if v is not None])
        endpoint = f"/accounts/{account_id}/vacancies"
        if query_params:
            endpoint += f"?{query_params}"
        
        return self._make_request('GET', endpoint)
    
    def get_vacancy(self, account_id: int, vacancy_id: int) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏
        
        Args:
            account_id: ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
            vacancy_id: ID –≤–∞–∫–∞–Ω—Å–∏–∏
            
        Returns:
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–ª–∏ None
        """
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        user_id = self.user.id
        cached_vacancy = HuntflowAPICache.get_vacancy(user_id, account_id, vacancy_id)
        
        if cached_vacancy is not None:
            print(f"üì¶ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–∑ –∫—ç—à–∞: {vacancy_id}")
            return cached_vacancy
        
        # –ï—Å–ª–∏ –≤ –∫—ç—à–µ –Ω–µ—Ç, –ø–æ–ª—É—á–∞–µ–º –∏–∑ API
        vacancy_data = self._make_request('GET', f"/accounts/{account_id}/vacancies/{vacancy_id}")
        
        if vacancy_data:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            HuntflowAPICache.set_vacancy(user_id, vacancy_data, account_id, vacancy_id)
            print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ –∫—ç—à: {vacancy_id}")
        
        return vacancy_data
    
    def get_vacancy_statuses(self, account_id: int) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç—É—Å–æ–≤ –≤–∞–∫–∞–Ω—Å–∏–π
        
        Args:
            account_id: ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç—É—Å–æ–≤ –∏–ª–∏ None
        """
        return self._make_request('GET', f"/accounts/{account_id}/vacancies/statuses")
    
    def get_vacancy_additional_fields(self, account_id: int) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ö–µ–º—É –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –≤–∞–∫–∞–Ω—Å–∏–π
        
        Args:
            account_id: ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
            
        Returns:
            –°—Ö–µ–º–∞ –ø–æ–ª–µ–π –∏–ª–∏ None
        """
        return self._make_request('GET', f"/accounts/{account_id}/vacancies/additional_fields")
    
    def update_vacancy(self, account_id: int, vacancy_id: int, data: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏
        
        Args:
            account_id: ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
            vacancy_id: ID –≤–∞–∫–∞–Ω—Å–∏–∏
            data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            
        Returns:
            –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–ª–∏ None
        """
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ API
        result = self._make_request('PATCH', f"/accounts/{account_id}/vacancies/{vacancy_id}", json=data)
        
        if result:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à –¥–ª—è —ç—Ç–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏
            user_id = self.user.id
            HuntflowAPICache.clear_vacancy(user_id, account_id, vacancy_id)
            print(f"üóëÔ∏è –°–±—Ä–æ—à–µ–Ω –∫—ç—à –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏: {vacancy_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            updated_data = self._make_request('GET', f"/accounts/{account_id}/vacancies/{vacancy_id}")
            if updated_data:
                HuntflowAPICache.set_vacancy(user_id, updated_data, account_id, vacancy_id)
                print(f"üíæ –û–±–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ –∫—ç—à–µ: {vacancy_id}")
                return updated_data
        
        return result
    
    def get_applicant_questionary_schema(self, account_id: int) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ö–µ–º—É –∞–Ω–∫–µ—Ç—ã –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        
        Args:
            account_id: ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
            
        Returns:
            –°—Ö–µ–º–∞ –∞–Ω–∫–µ—Ç—ã –∏–ª–∏ None
        """
        return self._make_request('GET', f"/accounts/{account_id}/applicants/questionary")
    
    def get_applicants(self, account_id: int, **params) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
        
        Args:
            account_id: ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
            **params: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (count, page, status, vacancy, etc.)
            
        Returns:
            –°–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∏–ª–∏ None
        """
        query_params = '&'.join([f"{k}={v}" for k, v in params.items() if v is not None])
        endpoint = f"/accounts/{account_id}/applicants"
        if query_params:
            endpoint += f"?{query_params}"
        
        return self._make_request('GET', endpoint)
    
    def get_applicant(self, account_id: int, applicant_id: int) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–µ
        
        Args:
            account_id: ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
            applicant_id: ID –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
            
        Returns:
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ –∏–ª–∏ None
        """
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        user_id = self.user.id
        cached_candidate = HuntflowAPICache.get_candidate(user_id, account_id, applicant_id)
        
        if cached_candidate is not None:
            print(f"üì¶ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∏–∑ –∫—ç—à–∞: {applicant_id}")
            return cached_candidate
        
        # –ï—Å–ª–∏ –≤ –∫—ç—à–µ –Ω–µ—Ç, –ø–æ–ª—É—á–∞–µ–º –∏–∑ API
        candidate_data = self._make_request('GET', f"/accounts/{account_id}/applicants/{applicant_id}")
        
        if candidate_data:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            HuntflowAPICache.set_candidate(user_id, candidate_data, account_id, applicant_id)
            print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤ –∫—ç—à: {applicant_id}")
        
        return candidate_data
    
    def get_applicant_questionary(self, account_id: int, applicant_id: int) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∞–Ω–∫–µ—Ç—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        
        Args:
            account_id: ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
            applicant_id: ID –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
            
        Returns:
            –ê–Ω–∫–µ—Ç–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∏–ª–∏ None
        """
        return self._make_request('GET', f"/accounts/{account_id}/applicants/{applicant_id}/questionary")
    
    def get_applicant_logs(self, account_id: int, applicant_id: int) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ª–æ–≥–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ (–≤–∫–ª—é—á–∞—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏)
        
        Args:
            account_id: ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
            applicant_id: ID –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
            
        Returns:
            –õ–æ–≥–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∏–ª–∏ None
        """
        return self._make_request('GET', f"/accounts/{account_id}/applicants/{applicant_id}/logs")
    
    def get_tags(self, account_id: int) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –º–µ—Ç–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
        
        Args:
            account_id: ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
            
        Returns:
            –°–ø–∏—Å–æ–∫ –º–µ—Ç–æ–∫ –∏–ª–∏ None
        """
        return self._make_request('GET', f"/accounts/{account_id}/tags")
    
    def update_applicant(self, account_id: int, applicant_id: int, data: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        
        Args:
            account_id: ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
            applicant_id: ID –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
            data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            
        Returns:
            –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∏–ª–∏ None
        """
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ API
        result = self._make_request('PATCH', f"/accounts/{account_id}/applicants/{applicant_id}", json=data)
        
        if result:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à –¥–ª—è —ç—Ç–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
            user_id = self.user.id
            HuntflowAPICache.clear_candidate(user_id, account_id, applicant_id)
            print(f"üóëÔ∏è –°–±—Ä–æ—à–µ–Ω –∫—ç—à –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: {applicant_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            updated_data = self._make_request('GET', f"/accounts/{account_id}/applicants/{applicant_id}")
            if updated_data:
                HuntflowAPICache.set_candidate(user_id, updated_data, account_id, applicant_id)
                print(f"üíæ –û–±–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤ –∫—ç—à–µ: {applicant_id}")
                return updated_data
        
        return result
    
    def update_applicant_status(self, account_id: int, applicant_id: int, status_id: int, comment: str = None, vacancy_id: int = None) -> Optional[Dict[str, Any]]:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —á–µ—Ä–µ–∑ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏ —Å—Ç–∞—Ç—É—Å—É
        
        Args:
            account_id: ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
            applicant_id: ID –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
            status_id: ID –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
            comment: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—é —Å—Ç–∞—Ç—É—Å–∞
            vacancy_id: ID –≤–∞–∫–∞–Ω—Å–∏–∏ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –ø–æ–ª—É—á–∞–µ–º –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–∞)
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–ª–∏ None
        """
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏
        applicant_data = self._make_request('GET', f"/accounts/{account_id}/applicants/{applicant_id}")
        if not applicant_data:
            print(f"DEBUG: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ {applicant_id}")
            return None
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∞–∫–∞–Ω—Å–∏—é
        if not vacancy_id and applicant_data.get('links'):
            vacancy_id = applicant_data['links'][0].get('vacancy')
        
        if not vacancy_id:
            print(f"DEBUG: –£ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ {applicant_id} –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏ ({vacancy_id})")
            return None
        
        print(f"DEBUG: –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ {applicant_id} –Ω–∞ —Å—Ç–∞—Ç—É—Å {status_id} –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏ {vacancy_id} —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º: {comment}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —á–∏—Å–ª–æ–º
        endpoint = f"/accounts/{account_id}/applicants/{applicant_id}/vacancy"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        data = {
            'vacancy': vacancy_id,
            'status': status_id
        }
        
        if comment:
            data['comment'] = comment
        
        print(f"DEBUG: –ü—Ä–æ–±—É–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç {endpoint} —Å –¥–∞–Ω–Ω—ã–º–∏ {data}")
        
        result = self._make_request('POST', endpoint, json=data)
        if result:
            print(f"DEBUG: –°—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ {endpoint}")
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à –¥–ª—è —ç—Ç–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
            user_id = self.user.id
            HuntflowAPICache.clear_candidate(user_id, account_id, applicant_id)
            print(f"üóëÔ∏è –°–±—Ä–æ—à–µ–Ω –∫—ç—à –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: {applicant_id}")
            
            return result
        
        print(f"DEBUG: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ {endpoint}")
        return None
    
    def update_applicant_tags(self, account_id: int, applicant_id: int, tag_ids: List[int]) -> Optional[Dict[str, Any]]:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –º–µ—Ç–∫–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        
        Args:
            account_id: ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
            applicant_id: ID –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
            tag_ids: –°–ø–∏—Å–æ–∫ ID –º–µ—Ç–æ–∫
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–ª–∏ None
        """
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –∏ —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è –º–µ—Ç–æ–∫
        endpoints = [
            f"/accounts/{account_id}/applicants/{applicant_id}/tags",  # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –º–µ—Ç–æ–∫
            f"/accounts/{account_id}/applicants/{applicant_id}",  # –û—Å–Ω–æ–≤–Ω–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
        ]
        
        data_variants = [
            {'tags': tag_ids},  # –ü—Ä–æ—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ ID
            {'tag_ids': tag_ids},  # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –ø–æ–ª–µ
            {'tags': [{'id': tag_id} for tag_id in tag_ids]},  # –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Å id
            {'tags': [{'tag': tag_id} for tag_id in tag_ids]},  # –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Å tag
            {'tags': [{'tag_id': tag_id} for tag_id in tag_ids]},  # –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Å tag_id
            tag_ids,  # –ü—Ä—è–º–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ –º–∞—Å—Å–∏–≤–∞
        ]
        
        for endpoint in endpoints:
            for data in data_variants:
                print(f"DEBUG: –ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å –º–µ—Ç–∫–∏ —á–µ—Ä–µ–∑ {endpoint} —Å –¥–∞–Ω–Ω—ã–º–∏ {data}")
                result = self._make_request('PATCH', endpoint, json=data)
                if result:
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à –¥–ª—è —ç—Ç–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
                    user_id = self.user.id
                    HuntflowAPICache.clear_candidate(user_id, account_id, applicant_id)
                    print(f"üóëÔ∏è –°–±—Ä–æ—à–µ–Ω –∫—ç—à –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: {applicant_id}")
                    return result
                    
                # –¢–∞–∫–∂–µ –ø—Ä–æ–±—É–µ–º POST –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
                if endpoint.endswith('/tags'):
                    result = self._make_request('POST', endpoint, json=data)
                    if result:
                        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à –¥–ª—è —ç—Ç–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
                        user_id = self.user.id
                        HuntflowAPICache.clear_candidate(user_id, account_id, applicant_id)
                        print(f"üóëÔ∏è –°–±—Ä–æ—à–µ–Ω –∫—ç—à –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: {applicant_id}")
                        return result
        
        return None
    
    def update_applicant_questionary(self, account_id: int, applicant_id: int, questionary_data: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –∞–Ω–∫–µ—Ç—É –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        
        Args:
            account_id: ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
            applicant_id: ID –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
            questionary_data: –î–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–ª–∏ None
        """
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –∏ —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è –∞–Ω–∫–µ—Ç—ã
        endpoints = [
            f"/accounts/{account_id}/applicants/{applicant_id}/questionary",  # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∞–Ω–∫–µ—Ç—ã
            f"/accounts/{account_id}/applicants/{applicant_id}",  # –û—Å–Ω–æ–≤–Ω–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
        ]
        
        data_variants = [
            questionary_data,  # –ü—Ä—è–º–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö
            {'questionary': questionary_data},  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            {'additional_fields': questionary_data},  # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –ø–æ–ª–µ
            {'questionary_fields': questionary_data},  # –î—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
        ]
        
        for endpoint in endpoints:
            for data in data_variants:
                print(f"DEBUG: –ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å –∞–Ω–∫–µ—Ç—É —á–µ—Ä–µ–∑ {endpoint} —Å –¥–∞–Ω–Ω—ã–º–∏ {data}")
                result = self._make_request('PATCH', endpoint, json=data)
                if result:
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à –¥–ª—è —ç—Ç–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
                    user_id = self.user.id
                    HuntflowAPICache.clear_candidate(user_id, account_id, applicant_id)
                    print(f"üóëÔ∏è –°–±—Ä–æ—à–µ–Ω –∫—ç—à –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: {applicant_id}")
                    return result
                    
                # –¢–∞–∫–∂–µ –ø—Ä–æ–±—É–µ–º POST –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
                if endpoint.endswith('/questionary'):
                    result = self._make_request('POST', endpoint, json=data)
                    if result:
                        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à –¥–ª—è —ç—Ç–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
                        user_id = self.user.id
                        HuntflowAPICache.clear_candidate(user_id, account_id, applicant_id)
                        print(f"üóëÔ∏è –°–±—Ä–æ—à–µ–Ω –∫—ç—à –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: {applicant_id}")
                        return result
        
        return None
    
    def update_applicant_scorecard_field(self, account_id: int, applicant_id: int, scorecard_url: str) -> Optional[Dict[str, Any]]:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª–µ "Scorecard" –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —Å—Å—ã–ª–∫–æ–π –Ω–∞ scorecard
        
        Args:
            account_id: ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
            applicant_id: ID –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
            scorecard_url: –°—Å—ã–ª–∫–∞ –Ω–∞ scorecard —Ñ–∞–π–ª
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–ª–∏ None
        """
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ö–µ–º—É –∞–Ω–∫–µ—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—è Scorecard
        questionary_schema = self.get_applicant_questionary_schema(account_id)
        if not questionary_schema:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ö–µ–º—É –∞–Ω–∫–µ—Ç—ã –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ {account_id}")
            return None
        
        # –ò—â–µ–º –ø–æ–ª–µ Scorecard –≤ —Å—Ö–µ–º–µ –∞–Ω–∫–µ—Ç—ã
        scorecard_field_id = None
        for field_id, field_info in questionary_schema.items():
            field_title = field_info.get('title', '').lower()
            field_type = field_info.get('type', '')
            
            # –ò—â–µ–º –ø–æ–ª–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º "scorecard" –∏–ª–∏ "scorecard" –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
            if 'scorecard' in field_title or (field_type == 'url' and 'scorecard' in field_title):
                scorecard_field_id = field_id
                print(f"üîç –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ Scorecard –≤ —Å—Ö–µ–º–µ: {field_id} = {field_info.get('title')} (—Ç–∏–ø: {field_type})")
                break
        
        if not scorecard_field_id:
            print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ Scorecard –≤ —Å—Ö–µ–º–µ –∞–Ω–∫–µ—Ç—ã –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ {account_id}")
            print(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è –≤ —Å—Ö–µ–º–µ: {[(k, v.get('title', '')) for k, v in questionary_schema.items()]}")
            return None
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ Scorecard —Å–æ —Å—Å—ã–ª–∫–æ–π
        questionary_data = {
            scorecard_field_id: scorecard_url
        }
        
        print(f"üìù –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ Scorecard {scorecard_field_id} —Å–æ —Å—Å—ã–ª–∫–æ–π: {scorecard_url}")
        result = self.update_applicant_questionary(account_id, applicant_id, questionary_data)
        
        if result:
            print(f"‚úÖ –ü–æ–ª–µ Scorecard –æ–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ scorecard")
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª–µ Scorecard —Å–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ scorecard")
        
        return result
    
    def create_applicant_comment(self, account_id: int, applicant_id: int, comment: str, vacancy_id: int = None, status_id: int = None) -> Optional[Dict[str, Any]]:
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏ —Å—Ç–∞—Ç—É—Å—É
        
        Args:
            account_id: ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
            applicant_id: ID –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
            comment: –¢–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            vacancy_id: ID –≤–∞–∫–∞–Ω—Å–∏–∏ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –ø–æ–ª—É—á–∞–µ–º –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–∞)
            status_id: ID —Å—Ç–∞—Ç—É—Å–∞ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –ø–æ–ª—É—á–∞–µ–º –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–∞)
            
        Returns:
            –°–æ–∑–¥–∞–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ None
        """
        # –û—á–∏—â–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
        clean_comment = comment.strip()
        if not clean_comment:
            return None
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏ –∏ —Å—Ç–∞—Ç—É—Å–∞
        applicant_data = self._make_request('GET', f"/accounts/{account_id}/applicants/{applicant_id}")
        if not applicant_data:
            print(f"DEBUG: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ {applicant_id} –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")
            return None
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∞–∫–∞–Ω—Å–∏—é –∏ —Å—Ç–∞—Ç—É—Å
        if not vacancy_id and applicant_data.get('links'):
            vacancy_id = applicant_data['links'][0].get('vacancy')
        
        if not status_id and applicant_data.get('links'):
            status_id = applicant_data['links'][0].get('status')
        
        if not vacancy_id or not status_id:
            print(f"DEBUG: –£ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ {applicant_id} –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏ ({vacancy_id}) –∏–ª–∏ —Å—Ç–∞—Ç—É—Å–∞ ({status_id}) –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")
            return None
        
        print(f"DEBUG: –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ {applicant_id}, –≤–∞–∫–∞–Ω—Å–∏—è {vacancy_id}, —Å—Ç–∞—Ç—É—Å {status_id}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º
        # –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
        data = {
            'vacancy': vacancy_id,
            'status': status_id,
            'comment': clean_comment
        }
        
        endpoint = f"/accounts/{account_id}/applicants/{applicant_id}/vacancy"
        print(f"DEBUG: –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —á–µ—Ä–µ–∑ {endpoint} —Å –¥–∞–Ω–Ω—ã–º–∏ {data}")
        
        result = self._make_request('POST', endpoint, json=data)
        if result:
            print(f"DEBUG: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞")
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à –¥–ª—è —ç—Ç–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
            user_id = self.user.id
            HuntflowAPICache.clear_candidate(user_id, account_id, applicant_id)
            print(f"üóëÔ∏è –°–±—Ä–æ—à–µ–Ω –∫—ç—à –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: {applicant_id}")
            
            return result
        
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —á–µ—Ä–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞, –ø—Ä–æ–±—É–µ–º –æ–±—ã—á–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
        print(f"DEBUG: –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")
        data_variants = [
            {'comment': clean_comment},  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            {'text': clean_comment},  # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –ø–æ–ª–µ
            {'message': clean_comment},  # –î—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
            {'body': clean_comment},  # –ï—â–µ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç
        ]
        
        endpoints = [
            f"/accounts/{account_id}/applicants/{applicant_id}/logs",  # –û—Å–Ω–æ–≤–Ω–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ª–æ–≥–æ–≤/–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
            f"/accounts/{account_id}/applicants/{applicant_id}/comments",  # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π
            f"/accounts/{account_id}/applicants/{applicant_id}/notes",  # –ï—â–µ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç
        ]
        
        for endpoint in endpoints:
            for data in data_variants:
                print(f"DEBUG: –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —á–µ—Ä–µ–∑ {endpoint} —Å –¥–∞–Ω–Ω—ã–º–∏ {data}")
                result = self._make_request('POST', endpoint, json=data)
                if result:
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à –¥–ª—è —ç—Ç–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
                    user_id = self.user.id
                    HuntflowAPICache.clear_candidate(user_id, account_id, applicant_id)
                    print(f"üóëÔ∏è –°–±—Ä–æ—à–µ–Ω –∫—ç—à –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: {applicant_id}")
                    return result
        
        return None
    
    def test_connection(self) -> bool:
        """
        –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Huntflow API
        
        Returns:
            True –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
        """
        try:
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            response = self._make_request('GET', '/me')
            if response:
                print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Huntflow —É—Å–ø–µ—à–Ω–æ!")
                print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {response.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                print(f"üìß Email: {response.get('email', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                return True
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Huntflow API")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    def _log_request(self, method: str, endpoint: str, status_code: int, request_data: dict, response_text: str, is_error: bool = False):
        """
        –õ–æ–≥–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ Huntflow API –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        """
        try:
            from .models import HuntflowLog
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ª–æ–≥–∞
            log_type = 'ERROR' if is_error else method
            
            # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç –µ—Å–ª–∏ —ç—Ç–æ JSON
            response_data = {}
            if response_text and not is_error:
                try:
                    import json
                    response_data = json.loads(response_text)
                except:
                    response_data = {'raw_response': response_text[:1000]}  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
            
            # –°–æ–∑–¥–∞–µ–º –ª–æ–≥
            HuntflowLog.objects.create(
                log_type=log_type,
                endpoint=endpoint,
                method=method,
                status_code=status_code,
                request_data=request_data,
                response_data=response_data,
                error_message=response_text if is_error else '',
                user=self.user
            )
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥: {e}")
    
    def upload_file(self, account_id: int, file_data: bytes, file_name: str, parse_file: bool = True) -> Optional[Dict[str, Any]]:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –≤ Huntflow –∏ –ø–∞—Ä—Å–∏—Ç –µ–≥–æ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        
        Args:
            account_id: ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
            file_data: –î–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞ —Ä–µ–∑—é–º–µ
            file_name: –ò–º—è —Ñ–∞–π–ª–∞ —Ä–µ–∑—é–º–µ
            parse_file: –ü–∞—Ä—Å–∏—Ç—å –ª–∏ —Ñ–∞–π–ª –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é True)
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Å —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–ª–∏ None
        """
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–π–ª
            files = {
                'file': (file_name, file_data, 'application/pdf')
            }
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            headers = {k: v for k, v in self.headers.items() if k.lower() != 'content-type'}
            if parse_file:
                headers['X-File-Parse'] = 'true'
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º URL
            base_url = self._get_base_url()
            if base_url.endswith('/v2'):
                url = f"{base_url}/accounts/{account_id}/upload"
            else:
                url = f"{base_url}/v2/accounts/{account_id}/upload"
            
            print(f"üîç API –∑–∞–ø—Ä–æ—Å: POST {url}")
            print(f"üì§ –§–∞–π–ª: {file_name} ({len(file_data)} –±–∞–π—Ç)")
            
            response = requests.post(
                url=url,
                headers=headers,
                files=files,
                timeout=60  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
            )
            
            print(f"üì• –û—Ç–≤–µ—Ç API: {response.status_code}")
            print(f"üì• –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {response.text[:500]}...")
            
            if response.status_code in [200, 201]:
                return response.json()
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {response.status_code} - {response.text}")
                return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")
            return None
    
    def create_applicant_from_parsed_data(self, account_id: int, parsed_data: Dict[str, Any], vacancy_id: int = None, task_name: str = None, task_description: str = None, task_comments: List[Dict[str, Any]] = None, assignees: List[Dict[str, Any]] = None, task_status: str = None, notion_data: Dict[str, Any] = None) -> Optional[Dict[str, Any]]:
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤ Huntflow –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            account_id: ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
            parsed_data: –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
            vacancy_id: ID –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            task_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ ClickUp –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            task_description: –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ ClickUp (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            task_comments: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –∑–∞–¥–∞—á–µ ClickUp (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            assignees: –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ –∑–∞–¥–∞—á–∏ ClickUp –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ç–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            task_status: –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ ClickUp (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            notion_data: –î–∞–Ω–Ω—ã–µ –∏–∑ Notion –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            –°–æ–∑–¥–∞–Ω–Ω—ã–π –∫–∞–Ω–¥–∏–¥–∞—Ç –∏–ª–∏ None
        """
        try:
            print(f"üîç –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö: {parsed_data}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ parsed_data - —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
            if isinstance(parsed_data, str):
                print(f"‚ùå parsed_data —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π, –∞ –Ω–µ —Å–ª–æ–≤–∞—Ä–µ–º: {parsed_data}")
                return None
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Huntflow API
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–º–µ–Ω–∏
            name_data = parsed_data.get('fields', {}).get('name') or {}
            
            # –ü–†–ò–û–†–ò–¢–ï–¢: –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–º—è –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ ClickUp
            first_name = ''
            last_name = ''
            middle_name = ''
            
            if task_name:
                print(f"üîç –ò–∑–≤–ª–µ–∫–∞–µ–º –§–ò–û –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: '{task_name}'")
                task_name_data = self._extract_name_from_task_title(task_name)
                first_name = task_name_data['first_name']
                last_name = task_name_data['last_name']
                middle_name = task_name_data['middle_name']
                print(f"‚úÖ –§–ò–û –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {last_name} {first_name} {middle_name}")
            
            # Fallback: –ï—Å–ª–∏ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –∏–∑–≤–ª–µ–∫–ª–∏, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑ —Ä–µ–∑—é–º–µ
            if not first_name and not last_name:
                print("üîç –§–ò–û –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–∑ —Ä–µ–∑—é–º–µ")
                
                # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–º—è –∏–∑ –ø–æ–ª–µ–π —Ä–µ–∑—é–º–µ
                name_data = parsed_data.get('fields', {}).get('name') or {}
                first_name = name_data.get('first', '')
                last_name = name_data.get('last', '')
                middle_name = name_data.get('middle', '')
                
                # –ï—Å–ª–∏ –∏–º—è –Ω–µ –∏–∑–≤–ª–µ—á–µ–Ω–æ –∏–∑ –ø–æ–ª–µ–π, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Ä–µ–∑—é–º–µ
                if not first_name and not last_name:
                    text = parsed_data.get('text', '')
                    if text:
                        lines = text.split('\n')
                        if lines:
                            first_line = lines[0].strip()
                            # –£–º–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –∏–º—è)
                            if first_line and len(first_line.split()) >= 2:
                                name_parts = first_line.split()
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª—É–∂–µ–±–Ω—ã—Ö —Å–ª–æ–≤
                                service_words = ['this', 'is', 'a', 'resume', 'cv', 'curriculum', 'vitae', 'the', 'document']
                                if not any(word.lower() in service_words for word in name_parts[:2]):
                                    first_name = name_parts[0]
                                    last_name = name_parts[1]
                                    if len(name_parts) >= 3:
                                        middle_name = name_parts[2]
                                    print(f"‚úÖ –§–ò–û –∏–∑ —Ä–µ–∑—é–º–µ: {last_name} {first_name} {middle_name}")
            
            # –ï—Å–ª–∏ –∏–º—è –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if not first_name:
                first_name = '–ò–∑ ClickUp'
            if not last_name:
                last_name = '–ö–∞–Ω–¥–∏–¥–∞—Ç'
            
            # –°–æ–∑–¥–∞–µ–º –ª–∏—á–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö ClickUp
            clickup_notes = self._create_clickup_comment(task_description, task_comments, task_status)
            
            # –°–æ–∑–¥–∞–µ–º –ª–∏—á–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö Notion, –µ—Å–ª–∏ –æ–Ω–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã
            notion_notes = ""
            if notion_data:
                notion_notes = self._create_notion_comment(
                    page_title=notion_data.get('title'),
                    page_content=notion_data.get('content'),
                    page_status=notion_data.get('status'),
                    page_priority=notion_data.get('priority'),
                    assignees=notion_data.get('assignees'),
                    tags=notion_data.get('tags'),
                    custom_properties=notion_data.get('custom_properties'),
                    attachments=notion_data.get('attachments'),
                    due_date=notion_data.get('due_date'),
                    comments=notion_data.get('comments')
                )
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∑–∞–º–µ—Ç–∫–∏ ClickUp –∏ Notion
            combined_notes = ""
            if clickup_notes and notion_notes:
                combined_notes = f"{clickup_notes}\n\n{notion_notes}"
            elif clickup_notes:
                combined_notes = clickup_notes
            elif notion_notes:
                combined_notes = notion_notes
            
            # –¢–µ–∫—Å—Ç —Ä–µ–∑—é–º–µ –æ—Å—Ç–∞–µ—Ç—Å—è –≤ externals
            resume_text = parsed_data.get('text', '')
            
            applicant_data = {
                'last_name': last_name,
                'first_name': first_name,
                'externals': [
                    {
                        'auth_type': 'NATIVE',
                        'data': {
                            'body': resume_text
                        }
                    }
                ]
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
            # (Huntflow API –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ 1 —ç–ª–µ–º–µ–Ω—Ç –≤ externals)
            print(f"üìù –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ ({len(combined_notes) if combined_notes else 0} —Å–∏–º–≤–æ–ª–æ–≤)")
            
            print(f"üîç –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: {applicant_data}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Huntflow API
            if middle_name:
                applicant_data['middle_name'] = middle_name
            
            if parsed_data.get('fields', {}).get('email'):
                applicant_data['email'] = parsed_data.get('fields', {}).get('email')
            
            if parsed_data.get('fields', {}).get('phones') and len(parsed_data.get('fields', {}).get('phones', [])) > 0:
                applicant_data['phone'] = parsed_data.get('fields', {}).get('phones')[0]
            
            if parsed_data.get('fields', {}).get('position'):
                applicant_data['position'] = parsed_data.get('fields', {}).get('position')
            
            if parsed_data.get('fields', {}).get('salary'):
                applicant_data['money'] = parsed_data.get('fields', {}).get('salary')
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD)
            birthdate = parsed_data.get('fields', {}).get('birthdate')
            if birthdate and birthdate.get('year') and birthdate.get('month') and birthdate.get('day'):
                try:
                    birthday = f"{birthdate['year']:04d}-{birthdate['month']:02d}-{birthdate['day']:02d}"
                    applicant_data['birthday'] = birthday
                except (ValueError, TypeError):
                    pass  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞—Ç—ã
            
            # Skype (deprecated, –Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –µ—Å–ª–∏ –µ—Å—Ç—å)
            if parsed_data.get('fields', {}).get('skype'):
                applicant_data['skype'] = parsed_data.get('fields', {}).get('skype')
            
            # Telegram —á–µ—Ä–µ–∑ social (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Å–ø–æ—Å–æ–±)
            if parsed_data.get('fields', {}).get('telegram'):
                if 'social' not in applicant_data:
                    applicant_data['social'] = []
                applicant_data['social'].append({
                    'social_type': 'TELEGRAM',
                    'value': parsed_data.get('fields', {}).get('telegram')
                })
            
            # –§–æ—Ç–æ (ID —Ñ–∞–π–ª–∞)
            if parsed_data.get('photo', {}).get('id'):
                applicant_data['photo'] = parsed_data.get('photo', {}).get('id')
            
            # –§–∞–π–ª—ã (—Å–ø–∏—Å–æ–∫ ID —Ñ–∞–π–ª–æ–≤)
            if parsed_data.get('id'):  # ID –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                if 'files' not in applicant_data:
                    applicant_data['files'] = []
                applicant_data['files'].append(parsed_data.get('id'))
            
            # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ –ø–æ–ª—è
            applicant_data = {k: v for k, v in applicant_data.items() if v is not None and v != ''}
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º vacancy_id –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–π –ø—Ä–∏–≤—è–∑–∫–∏ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
            target_vacancy_id = None
            if vacancy_id and vacancy_id != '' and str(vacancy_id).lower() != 'none':
                try:
                    target_vacancy_id = int(vacancy_id) if isinstance(vacancy_id, str) and vacancy_id.isdigit() else vacancy_id
                    print(f"üîç –°–æ—Ö—Ä–∞–Ω—è–µ–º vacancy_id –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–π –ø—Ä–∏–≤—è–∑–∫–∏: {target_vacancy_id}")
                except (ValueError, TypeError):
                    print(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç vacancy_id: {vacancy_id}")
                    target_vacancy_id = None
            else:
                print(f"‚ö†Ô∏è –í–∞–∫–∞–Ω—Å–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞: vacancy_id='{vacancy_id}'")
            
            # –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º vacancy –≤ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å
            # –ë—É–¥–µ–º –ø—Ä–∏–≤—è–∑—ã–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–≥–∞ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
            assignee_info = None
            if assignees and len(assignees) > 0:
                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
                assignee = assignees[0]
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
                if isinstance(assignee, dict):
                    assignee_name = assignee.get('username', assignee.get('email', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))
                elif isinstance(assignee, str):
                    assignee_name = assignee
                else:
                    assignee_name = str(assignee)
                
                assignee_info = assignee_name
                print(f"üè∑Ô∏è –°–æ—Ö—Ä–∞–Ω–∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–≥–∞: {assignee_name}")
            
            print(f"üì§ –§–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: {applicant_data}")
            print(f"üìù External –∏—Å—Ç–æ—á–Ω–∏–∫: {applicant_data.get('externals', [{}])[0].get('data', {}).get('body', '')[:100]}...")
            print(f"üîó –í–∞–∫–∞–Ω—Å–∏—è –≤ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {applicant_data.get('vacancy', '–ù–ï –£–ö–ê–ó–ê–ù–ê')}")
            
            # –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
            print(f"üîç –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏: {applicant_data}")
            result = self._make_request('POST', f"/accounts/{account_id}/applicants", json=applicant_data)
            print(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç _make_request: {result}")
            
            if result:
                print(f"‚úÖ –ö–∞–Ω–¥–∏–¥–∞—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {result}")
                applicant_id = result.get('id')
                
                # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∫ –≤–∞–∫–∞–Ω—Å–∏–∏, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
                if applicant_id and target_vacancy_id:
                    print(f"üîó –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ {applicant_id} –∫ –≤–∞–∫–∞–Ω—Å–∏–∏ {target_vacancy_id}")
                    binding_result = self._bind_applicant_to_vacancy(account_id, applicant_id, target_vacancy_id)
                    if binding_result:
                        print(f"‚úÖ –ö–∞–Ω–¥–∏–¥–∞—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –≤–∞–∫–∞–Ω—Å–∏–∏")
                    else:
                        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤—è–∑–∞—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∫ –≤–∞–∫–∞–Ω—Å–∏–∏")
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥–∏
                if applicant_id:
                    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É clickup-new
                    print(f"üè∑Ô∏è –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É clickup-new")
                    clickup_tag_added = self._add_tag_to_applicant(account_id, applicant_id, "clickup-new")
                    if clickup_tag_added:
                        print(f"‚úÖ –ú–µ—Ç–∫–∞ clickup-new –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫ –∫–∞–Ω–¥–∏–¥–∞—Ç—É")
                    else:
                        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–∫—É clickup-new –∫ –∫–∞–Ω–¥–∏–¥–∞—Ç—É")
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥ —Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º, –µ—Å–ª–∏ –µ—Å—Ç—å
                    if assignee_info:
                        print(f"üè∑Ô∏è –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è: {assignee_info}")
                        tag_added = self._add_tag_to_applicant(account_id, applicant_id, assignee_info)
                        if tag_added:
                            print(f"‚úÖ –¢–µ–≥ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–æ–±–∞–≤–ª–µ–Ω –∫ –∫–∞–Ω–¥–∏–¥–∞—Ç—É")
                        else:
                            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∫ –∫–∞–Ω–¥–∏–¥–∞—Ç—É")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
                if combined_notes and applicant_id:
                    print(f"üîç –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∫ –∫–∞–Ω–¥–∏–¥–∞—Ç—É {applicant_id}")
                    
                    comment_result = self.add_applicant_comment(
                        account_id=account_id,
                        applicant_id=applicant_id,
                        comment=combined_notes,
                        vacancy_id=vacancy_id
                    )
                    
                    if comment_result:
                        print(f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω")
                    else:
                        print(f"‚ö†Ô∏è –ö–∞–Ω–¥–∏–¥–∞—Ç —Å–æ–∑–¥–∞–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
                
                return result
            else:
                print(f"‚ùå _make_request –≤–µ—Ä–Ω—É–ª None –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞")
                return None
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: {e}")
            import traceback
            print(f"‚ùå Traceback: {traceback.format_exc()}")
            return None
    
    def add_applicant_comment(self, account_id: int, applicant_id: int, comment: str, vacancy_id: int = None) -> Optional[Dict[str, Any]]:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∫–∞–Ω–¥–∏–¥–∞—Ç—É –≤ Huntflow
        
        Args:
            account_id: ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
            applicant_id: ID –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
            comment: –¢–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            vacancy_id: ID –≤–∞–∫–∞–Ω—Å–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω - –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ –ª–∏—á–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏)
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏–ª–∏ None
        """
        try:
            print(f"üîç –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∫–∞–Ω–¥–∏–¥–∞—Ç—É {applicant_id}")
            
            comment_data = {
                'comment': comment
            }
            
            # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë
            if vacancy_id and vacancy_id != '':
                comment_data['vacancy'] = vacancy_id
                print(f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∫ –≤–∞–∫–∞–Ω—Å–∏–∏ {vacancy_id}")
            else:
                print(f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ª–∏—á–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏")
            
            print(f"üì§ –î–∞–Ω–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {comment_data}")
            
            result = self._make_request('POST', f"/accounts/{account_id}/applicants/{applicant_id}/logs", json=comment_data)
            
            if result:
                print(f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω: {result}")
                return result
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
                return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")
            return None
    
    def create_linkedin_profile_data(self, linkedin_url: str, task_name: str = None, task_description: str = None) -> Optional[Dict[str, Any]]:
        """
        –°–æ–∑–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ LinkedIn —Å—Å—ã–ª–∫–∏
        
        Args:
            linkedin_url: –°—Å—ã–ª–∫–∞ –Ω–∞ LinkedIn –ø—Ä–æ—Ñ–∏–ª—å
            task_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏–∑ ClickUp
            task_description: –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏–∑ ClickUp
            
        Returns:
            –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ Huntflow –∏–ª–∏ None
        """
        try:
            print(f"üîç –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ LinkedIn –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è: {linkedin_url}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
            name_data = self._extract_name_from_task_title(task_name) if task_name else {}
            
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ Huntflow
            profile_data = {
                'id': None,  # –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω Huntflow
                'url': linkedin_url,
                'content_type': 'text/html',
                'name': 'LinkedIn Profile',
                'text': f"LinkedIn –ø—Ä–æ—Ñ–∏–ª—å: {linkedin_url}",
                'fields': {
                    'name': {
                        'first': name_data.get('first_name', ''),
                        'last': name_data.get('last_name', ''),
                        'middle': name_data.get('middle_name', '')
                    },
                    'email': '',
                    'phones': [],
                    'position': '',
                    'experience': [],
                    'skills': [],
                    'education': []
                },
                'parsing_meta': {
                    'last_names_ignored': False,
                    'emails_ignored': False,
                    'phones_ignored': False
                }
            }
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            if task_description:
                # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è email –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                import re
                
                # –ò—â–µ–º email
                email_match = re.search(r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b', task_description)
                if email_match:
                    profile_data['fields']['email'] = email_match.group()
                
                # –ò—â–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω—ã
                phone_patterns = [
                    r'\+?[1-9]\d{1,14}',  # –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                    r'\+?7\s?\(?\d{3}\)?\s?\d{3}[- ]?\d{2}[- ]?\d{2}',  # –†–æ—Å—Å–∏–π—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç
                    r'\+?375\s?\(?\d{2}\)?\s?\d{3}[- ]?\d{2}[- ]?\d{2}',  # –ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç
                ]
                
                phones = []
                for pattern in phone_patterns:
                    matches = re.findall(pattern, task_description)
                    phones.extend(matches)
                
                if phones:
                    profile_data['fields']['phones'] = list(set(phones))  # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ LinkedIn –ø—Ä–æ—Ñ–∏–ª—è:")
            print(f"  - –ò–º—è: {profile_data['fields']['name']['first']} {profile_data['fields']['name']['last']}")
            print(f"  - Email: {profile_data['fields']['email']}")
            print(f"  - –¢–µ–ª–µ—Ñ–æ–Ω—ã: {profile_data['fields']['phones']}")
            
            return profile_data
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö LinkedIn –ø—Ä–æ—Ñ–∏–ª—è: {e}")
            return None
    
    def create_rabota_by_profile_data(self, rabota_url: str, task_name: str = None, task_description: str = None) -> Optional[Dict[str, Any]]:
        """
        –°–æ–∑–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ rabota.by —Å—Å—ã–ª–∫–∏
        
        Args:
            rabota_url: –°—Å—ã–ª–∫–∞ –Ω–∞ rabota.by –ø—Ä–æ—Ñ–∏–ª—å
            task_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏–∑ ClickUp
            task_description: –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏–∑ ClickUp
            
        Returns:
            –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ Huntflow –∏–ª–∏ None
        """
        try:
            print(f"üîç –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ rabota.by –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è: {rabota_url}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
            name_data = self._extract_name_from_task_title(task_name) if task_name else {}
            
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ Huntflow
            profile_data = {
                'id': None,  # –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω Huntflow
                'url': rabota_url,
                'content_type': 'text/html',
                'name': 'Rabota.by Profile',
                'text': f"Rabota.by –ø—Ä–æ—Ñ–∏–ª—å: {rabota_url}",
                'fields': {
                    'name': {
                        'first': name_data.get('first_name', ''),
                        'last': name_data.get('last_name', ''),
                        'middle': name_data.get('middle_name', '')
                    },
                    'email': '',
                    'phones': [],
                    'position': '',
                    'experience': [],
                    'skills': [],
                    'education': []
                },
                'parsing_meta': {
                    'last_names_ignored': False,
                    'emails_ignored': False,
                    'phones_ignored': False
                }
            }
            
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ rabota.by –ø—Ä–æ—Ñ–∏–ª—è:")
            print(f"  - –ò–º—è: {name_data.get('first_name', '')} {name_data.get('last_name', '')}")
            print(f"  - Email: {profile_data['fields']['email']}")
            print(f"  - –¢–µ–ª–µ—Ñ–æ–Ω—ã: {profile_data['fields']['phones']}")
            
            return profile_data
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö rabota.by –ø—Ä–æ—Ñ–∏–ª—è: {e}")
            return None
    
    def _get_or_create_tag(self, account_id: int, tag_name: str) -> Optional[int]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–µ–≥ –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π
        
        Args:
            account_id: ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
            tag_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–≥–∞
            
        Returns:
            ID —Ç–µ–≥–∞ –∏–ª–∏ None
        """
        try:
            print(f"üîç –ò—â–µ–º —Ç–µ–≥: {tag_name}")
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–µ–≥
            tags_response = self._make_request('GET', f"/accounts/{account_id}/tags")
            
            if tags_response and 'items' in tags_response:
                for tag in tags_response['items']:
                    if tag.get('name') == tag_name:
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–µ–≥: {tag_name} (ID: {tag['id']})")
                        return tag['id']
            
            # –ï—Å–ª–∏ —Ç–µ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
            print(f"üîç –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ–≥: {tag_name}")
            tag_data = {
                'name': tag_name,
                'color': '30b25b'  # –ó–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            }
            new_tag = self._make_request('POST', f"/accounts/{account_id}/tags", json=tag_data)
            
            if new_tag and 'id' in new_tag:
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ç–µ–≥: {tag_name} (ID: {new_tag['id']})")
                return new_tag['id']
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ–≥: {tag_name}")
                return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ç–µ–≥–∞–º–∏: {e}")
            return None
    
    def _find_tag_by_name(self, account_id: int, assignee_name: str) -> Optional[int]:
        """
        –ò—â–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–µ–≥ –ø–æ –∏–º–µ–Ω–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        
        Args:
            account_id: ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
            assignee_name: –ò–º—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏–∑ ClickUp
            
        Returns:
            ID –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–≥–∞ –∏–ª–∏ None
        """
        try:
            print(f"üîç –ò—â–µ–º —Ç–µ–≥ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è: {assignee_name}")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–µ–≥–∏ –∏–∑ Huntflow
            tags_response = self._make_request('GET', f"/accounts/{account_id}/tags")
            
            if tags_response and 'items' in tags_response:
                print(f"üìã –ù–∞–π–¥–µ–Ω–æ —Ç–µ–≥–æ–≤: {len(tags_response['items'])}")
                
                # –ò—â–µ–º —Ç–µ–≥ –ø–æ —Ç–æ—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é –∏–º–µ–Ω–∏
                for tag in tags_response['items']:
                    tag_name = tag.get('name', '')
                    print(f"  - –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–≥: '{tag_name}'")
                    
                    if tag_name == assignee_name:
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ç–æ—á–Ω—ã–π —Ç–µ–≥: {tag_name} (ID: {tag['id']})")
                        return tag['id']
                
                # –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ—Ç, –∏—â–µ–º –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
                print(f"üîç –¢–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ—Ç, –∏—â–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ...")
                for tag in tags_response['items']:
                    tag_name = tag.get('name', '')
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∏–º—è —Ç–µ–≥–∞ –∏–º—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
                    if assignee_name.lower() in tag_name.lower() or tag_name.lower() in assignee_name.lower():
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω —á–∞—Å—Ç–∏—á–Ω—ã–π —Ç–µ–≥: {tag_name} (ID: {tag['id']})")
                        return tag['id']
                
                # –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–≥ clickup-new, –ø—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ
                if assignee_name == "clickup-new":
                    print(f"üîç –¢–µ–≥ clickup-new –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ...")
                    return self._create_tag(account_id, "clickup-new", "#FF6B35")  # –û—Ä–∞–Ω–∂–µ–≤—ã–π —Ü–≤–µ—Ç –¥–ª—è ClickUp
                
                print(f"‚ùå –¢–µ–≥ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è '{assignee_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return None
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤")
                return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–µ–≥–∞: {e}")
            return None
    
    def _create_tag(self, account_id: int, tag_name: str, color: str = "#007BFF") -> Optional[int]:
        """
        –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Ç–µ–≥ –≤ Huntflow
        
        Args:
            account_id: ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
            tag_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–≥–∞
            color: –¶–≤–µ—Ç —Ç–µ–≥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HEX
            
        Returns:
            ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Ç–µ–≥–∞ –∏–ª–∏ None
        """
        try:
            print(f"üîç –°–æ–∑–¥–∞–µ–º —Ç–µ–≥: {tag_name} (—Ü–≤–µ—Ç: {color})")
            
            tag_data = {
                'name': tag_name,
                'color': color
            }
            
            result = self._make_request('POST', f"/accounts/{account_id}/tags", json=tag_data)
            
            if result and 'id' in result:
                print(f"‚úÖ –¢–µ–≥ {tag_name} —Å–æ–∑–¥–∞–Ω —Å ID: {result['id']}")
                return result['id']
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ–≥ {tag_name}")
                return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ–≥–∞ {tag_name}: {e}")
            return None
    
    def _bind_applicant_to_vacancy(self, account_id: int, applicant_id: int, vacancy_id: int) -> bool:
        """
        –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∫ –≤–∞–∫–∞–Ω—Å–∏–∏
        
        Args:
            account_id: ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
            applicant_id: ID –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
            vacancy_id: ID –≤–∞–∫–∞–Ω—Å–∏–∏
            
        Returns:
            True –µ—Å–ª–∏ –ø—Ä–∏–≤—è–∑–∫–∞ —É—Å–ø–µ—à–Ω–∞, False –∏–Ω–∞—á–µ
        """
        try:
            print(f"üîó –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ {applicant_id} –∫ –≤–∞–∫–∞–Ω—Å–∏–∏ {vacancy_id}")
            
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            vacancy_data = self.get_vacancy(account_id, vacancy_id)
            if not vacancy_data:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ {vacancy_id}")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã –≤–∞–∫–∞–Ω—Å–∏–∏
            statuses = self.get_vacancy_statuses(account_id)
            if not statuses or 'items' not in statuses:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å—ã –≤–∞–∫–∞–Ω—Å–∏–∏")
                return False
            
            # –ù–∞—Ö–æ–¥–∏–º —Å—Ç–∞—Ç—É—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–æ–±—ã—á–Ω–æ –ø–µ—Ä–≤—ã–π –≤ —Å–ø–∏—Å–∫–µ)
            default_status = None
            for status in statuses['items']:
                if status.get('order', 0) == 1 or status.get('name', '').lower() in ['–Ω–æ–≤–∞—è', 'new', '–æ—Ç–∫–ª–∏–∫', 'response']:
                    default_status = status['id']
                    break
            
            if not default_status and statuses['items']:
                default_status = statuses['items'][0]['id']  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Å—Ç–∞—Ç—É—Å
            
            if not default_status:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Ç–∞—Ç—É—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏")
                return False
            
            print(f"üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç—É—Å {default_status} –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –≤–∞–∫–∞–Ω—Å–∏–∏")
            
            # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∫ –≤–∞–∫–∞–Ω—Å–∏–∏ —Å —Å—Ç–∞—Ç—É—Å–æ–º
            endpoint = f"/accounts/{account_id}/applicants/{applicant_id}/vacancy"
            data = {
                'vacancy': vacancy_id,
                'status': default_status,
                'comment': '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω –∏–∑ ClickUp'
            }
            
            result = self._make_request('POST', endpoint, json=data)
            
            if result:
                print(f"‚úÖ –ö–∞–Ω–¥–∏–¥–∞—Ç {applicant_id} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –≤–∞–∫–∞–Ω—Å–∏–∏ {vacancy_id} —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º {default_status}")
                return True
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤—è–∑–∞—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∫ –≤–∞–∫–∞–Ω—Å–∏–∏")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∫ –≤–∞–∫–∞–Ω—Å–∏–∏: {e}")
            return False
    
    def _add_tag_to_applicant(self, account_id: int, applicant_id: int, assignee_name: str) -> bool:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ–≥ –∫ –∫–∞–Ω–¥–∏–¥–∞—Ç—É –ø–æ—Å–ª–µ –µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
        
        Args:
            account_id: ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
            applicant_id: ID –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
            assignee_name: –ò–º—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏–∑ ClickUp
            
        Returns:
            True –µ—Å–ª–∏ —Ç–µ–≥ –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
        """
        try:
            print(f"üîç –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥ –∫ –∫–∞–Ω–¥–∏–¥–∞—Ç—É {applicant_id} –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è: {assignee_name}")
            
            # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–µ–≥ –ø–æ –∏–º–µ–Ω–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
            tag_id = self._find_tag_by_name(account_id, assignee_name)
            
            if not tag_id:
                print(f"‚ùå –¢–µ–≥ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è '{assignee_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥ –∫ –∫–∞–Ω–¥–∏–¥–∞—Ç—É —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
            tag_data = {'tags': [tag_id]}
            result = self._make_request('POST', f"/accounts/{account_id}/applicants/{applicant_id}/tags", json=tag_data)
            
            if result:
                print(f"‚úÖ –¢–µ–≥ {tag_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∫ –∫–∞–Ω–¥–∏–¥–∞—Ç—É {applicant_id}")
                return True
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥ –∫ –∫–∞–Ω–¥–∏–¥–∞—Ç—É")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ–≥–∞ –∫ –∫–∞–Ω–¥–∏–¥–∞—Ç—É: {e}")
            return False
    
    def create_applicant_from_clickup_task(self, clickup_task) -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤ Huntflow –∏–∑ –∑–∞–¥–∞—á–∏ ClickUp
        –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ—á–Ω–æ —Ç–∞–∫ –∂–µ, –∫–∞–∫ transfer_to_huntflow –≤ views.py
        
        Args:
            clickup_task: –û–±—ä–µ–∫—Ç ClickUpTask
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        """
        try:
            print(f"üîÑ –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤ Huntflow –∏–∑ –∑–∞–¥–∞—á–∏ {clickup_task.task_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º account_id
            accounts = self.get_accounts()
            if not accounts or not accounts.get('items'):
                return {
                    'success': False,
                    'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π'
                }
            account_id = accounts['items'][0]['id']
            
            # –ü–æ–ª—É—á–∞–µ–º –≤–ª–æ–∂–µ–Ω–∏—è –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —á–µ—Ä–µ–∑ ClickUp API
            from apps.clickup_int.services import ClickUpService
            clickup_service = ClickUpService(clickup_task.user.clickup_api_key)
            attachments = clickup_service.get_task_attachments(clickup_task.task_id)
            comments = clickup_service.get_task_comments(clickup_task.task_id)
            
            print(f"üîç –î–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞:")
            print(f"  - –ù–∞–∑–≤–∞–Ω–∏–µ: {clickup_task.name}")
            print(f"  - –û–ø–∏—Å–∞–Ω–∏–µ: {clickup_task.description[:100] if clickup_task.description else '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}...")
            print(f"  - –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {len(comments) if comments else 0}")
            print(f"  - –í–ª–æ–∂–µ–Ω–∏—è: {len(attachments) if attachments else 0}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ PDF —Ñ–∞–π–ª—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
            pdf_attachments = [att for att in attachments if att.get('extension', '').lower() == 'pdf']
            linkedin_url = None
            rabota_url = None
            
            if not pdf_attachments:
                # –ï—Å–ª–∏ –Ω–µ—Ç PDF —Ñ–∞–π–ª–æ–≤, –∏—â–µ–º LinkedIn —Å—Å—ã–ª–∫—É –≤ custom fields
                custom_fields = clickup_task.get_custom_fields_display()
                for field in custom_fields:
                    field_name = field.get('name', '').lower()
                    field_value = field.get('value', '')
                    
                    # –ò—â–µ–º LinkedIn —Å—Å—ã–ª–∫–∏
                    if field_name in ['linkedin', 'linkedin profile', 'linkedin url']:
                        linkedin_url = field_value
                        break
                    
                    # –ò—â–µ–º rabota.by —Å—Å—ã–ª–∫–∏
                    if field_name in ['rabota', 'rabota.by', 'rabota url', 'resume', '—Ä–µ–∑—é–º–µ'] or 'rabota.by' in field_value.lower():
                        rabota_url = field_value
                        break
                
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –Ω–∏ LinkedIn, –Ω–∏ rabota.by
                if not linkedin_url and not rabota_url:
                    return {
                        'success': False,
                        'error': '–£ –∑–∞–¥–∞—á–∏ –Ω–µ—Ç PDF —Ñ–∞–π–ª–æ–≤, LinkedIn –∏–ª–∏ rabota.by —Å—Å—ã–ª–æ–∫ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞'
                    }
            
            parsed_data = None
            
            if pdf_attachments:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º PDF —Ñ–∞–π–ª—ã
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (—Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π –ø–µ—Ä–≤—ã–π)
                oldest_attachment = min(pdf_attachments, key=lambda x: x.get('date', 0))
                
                # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
                import requests
                file_response = requests.get(oldest_attachment['url'], timeout=30)
                if file_response.status_code != 200:
                    return {
                        'success': False,
                        'error': '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –∏–∑ ClickUp'
                    }
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ Huntflow —Å –ø–∞—Ä—Å–∏–Ω–≥–æ–º
                parsed_data = self.upload_file(
                    account_id=account_id,
                    file_data=file_response.content,
                    file_name=oldest_attachment.get('title', 'resume.pdf'),
                    parse_file=True
                )
                
                if not parsed_data:
                    return {
                        'success': False,
                        'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –≤ Huntflow'
                    }
            
            elif linkedin_url:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º LinkedIn —Å—Å—ã–ª–∫—É
                print(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º LinkedIn —Å—Å—ã–ª–∫—É: {linkedin_url}")
                
                # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è LinkedIn –ø—Ä–æ—Ñ–∏–ª—è
                parsed_data = self.create_linkedin_profile_data(
                    linkedin_url=linkedin_url,
                    task_name=clickup_task.name,
                    task_description=clickup_task.description
                )
                
                if not parsed_data:
                    return {
                        'success': False,
                        'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å LinkedIn –ø—Ä–æ—Ñ–∏–ª—å'
                    }
            
            elif rabota_url:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º rabota.by —Å—Å—ã–ª–∫—É
                print(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º rabota.by —Å—Å—ã–ª–∫—É: {rabota_url}")
                
                # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è rabota.by –ø—Ä–æ—Ñ–∏–ª—è
                parsed_data = self.create_rabota_by_profile_data(
                    rabota_url=rabota_url,
                    task_name=clickup_task.name,
                    task_description=clickup_task.description
                )
                
                if not parsed_data:
                    return {
                        'success': False,
                        'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å rabota.by –ø—Ä–æ—Ñ–∏–ª—å'
                    }
            
            # –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            print(f"üîç –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏: account_id={account_id}, task_name='{clickup_task.name}'")
            applicant = self.create_applicant_from_parsed_data(
                account_id=account_id,
                parsed_data=parsed_data,
                vacancy_id=None,  # –ë–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –≤–∞–∫–∞–Ω—Å–∏–∏
                task_name=clickup_task.name,
                task_description=clickup_task.description,
                task_comments=comments,
                assignees=clickup_task.assignees,
                task_status=clickup_task.status
            )
            print(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: {applicant}")
            
            if not applicant:
                return {
                    'success': False,
                    'error': '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤ Huntflow'
                }
            
            return {
                'success': True,
                'applicant_id': applicant.get('id'),
                'message': f'–ö–∞–Ω–¥–∏–¥–∞—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –≤ Huntflow (ID: {applicant.get("id")})'
            }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∏–∑ –∑–∞–¥–∞—á–∏ ClickUp: {e}")
            import traceback
            traceback.print_exc()
            return {
                'success': False,
                'error': str(e)
            }
    
    def update_candidate_field(self, candidate_id: str, field_data: Dict[str, Any]) -> bool:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤ Huntflow
        
        Args:
            candidate_id: ID –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤ Huntflow
            field_data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            
        Returns:
            bool: True –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º account_id
            accounts = self.get_accounts()
            if not accounts or 'items' not in accounts or not accounts['items']:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
                return False
            
            account_id = accounts['items'][0]['id']
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ –ø–æ–ª—è —è–≤–ª—è—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ (string_field_*, custom_field_*)
            additional_fields = {}
            main_fields = {}
            
            for field_name, field_value in field_data.items():
                if field_name.startswith('string_field_') or field_name.startswith('custom_field_'):
                    additional_fields[field_name] = field_value
                else:
                    main_fields[field_name] = field_value
            
            success = True
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
            if main_fields:
                url = f"{self._get_base_url()}/v2/accounts/{account_id}/applicants/{candidate_id}"
                print(f"üîç –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ {candidate_id}")
                print(f"üì§ –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {main_fields}")
                
                response = requests.patch(
                    url,
                    headers=self.headers,
                    json=main_fields,
                    timeout=30
                )
                
                print(f"üì• –û—Ç–≤–µ—Ç API: {response.status_code}")
                
                if response.status_code == 200:
                    print(f"‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ {candidate_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–ª–µ–π: {response.status_code}")
                    print(f"üì• –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {response.text}")
                    success = False
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            if additional_fields:
                url = f"{self._get_base_url()}/v2/accounts/{account_id}/applicants/{candidate_id}/questionary"
                print(f"üîç –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ {candidate_id}")
                print(f"üì§ –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {additional_fields}")
                
                response = requests.patch(
                    url,
                    headers=self.headers,
                    json=additional_fields,
                    timeout=30
                )
                
                print(f"üì• –û—Ç–≤–µ—Ç API: {response.status_code}")
                
                if response.status_code == 200:
                    print(f"‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ {candidate_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π: {response.status_code}")
                    print(f"üì• –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {response.text}")
                    success = False
            
            return success
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: {e}")
            return False
    