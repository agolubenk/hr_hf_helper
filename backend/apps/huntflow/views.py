# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –Ω–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π
from logic.integration.huntflow.huntflow_service import (
    huntflow_dashboard, vacancies_list, candidates_list,
    huntflow_settings, huntflow_sync, huntflow_test_connection,
    huntflow_clear_cache
)
from logic.base.response_handler import UnifiedResponseHandler

# –°—Ç–∞—Ä—ã–µ –∏–º–ø–æ—Ä—Ç—ã (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
from django.shortcuts import render, redirect
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.http import JsonResponse
from django.views.decorators.http import require_http_methods
from django.views.decorators.csrf import csrf_exempt
import json

from .services import HuntflowService


def get_correct_account_id(user, fallback_account_id=None):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π account_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Huntflow API
    
    –í–•–û–î–Ø–©–ò–ï –î–ê–ù–ù–´–ï:
    - user: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Django
    - fallback_account_id: —Ä–µ–∑–µ—Ä–≤–Ω—ã–π account_id –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑ API
    
    –ò–°–¢–û–ß–ù–ò–ö–ò –î–ê–ù–ù–´–•:
    - HuntflowService: —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Huntflow API
    - Huntflow API: –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    –û–ë–†–ê–ë–û–¢–ö–ê:
    - –°–æ–∑–¥–∞–Ω–∏–µ HuntflowService –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    - –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏–∑ API
    - –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ account_id
    - –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å fallback –∑–Ω–∞—á–µ–Ω–∏–µ–º
    
    –í–´–•–û–î–Ø–©–ò–ï –î–ê–ù–ù–´–ï:
    - account_id: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Huntflow API
    
    –°–í–Ø–ó–ò:
    - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç: HuntflowService, Huntflow API
    - –ü–µ—Ä–µ–¥–∞–µ—Ç: account_id –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö
    - –ú–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∏–∑: huntflow views, services
    """
    try:
        huntflow_service = HuntflowService(user)
        accounts = huntflow_service.get_accounts()
        
        if accounts and 'items' in accounts and accounts['items']:
            account_id = accounts['items'][0]['id']
            print(f"üîç –ü–æ–ª—É—á–µ–Ω account_id –∏–∑ API: {account_id}")
            return account_id
        else:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å account_id –∏–∑ API, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback: {fallback_account_id}")
            return fallback_account_id
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è account_id: {e}")
        return fallback_account_id


@login_required
def huntflow_dashboard(request):
    """
    –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Huntflow
    
    –í–•–û–î–Ø–©–ò–ï –î–ê–ù–ù–´–ï:
    - request.user: –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ Huntflow
    
    –ò–°–¢–û–ß–ù–ò–ö–ò –î–ê–ù–ù–´–ï:
    - request.user.huntflow_prod_url, request.user.huntflow_sandbox_url
    - HuntflowService –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ API
    
    –û–ë–†–ê–ë–û–¢–ö–ê:
    - –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Huntflow —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    - –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ Huntflow API
    - –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    
    –í–´–•–û–î–Ø–©–ò–ï –î–ê–ù–ù–´–ï:
    - context: —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ Huntflow –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    - render: HTML —Å—Ç—Ä–∞–Ω–∏—Ü–∞ 'huntflow/dashboard.html'
    
    –°–í–Ø–ó–ò:
    - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç: HuntflowService, messages
    - –ü–µ—Ä–µ–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤: huntflow/dashboard.html
    - –ú–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∏–∑: huntflow/ URL patterns
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ª–∏ Huntflow —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not request.user.huntflow_prod_url and not request.user.huntflow_sandbox_url:
            messages.warning(request, 'Huntflow –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.')
            return render(request, 'huntflow/dashboard.html', {
                'huntflow_configured': False
            })
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å Huntflow
        huntflow_service = HuntflowService(request.user)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        connection_test = huntflow_service.test_connection()
        
        if not connection_test:
            messages.error(request, '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Huntflow API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.')
            return render(request, 'huntflow/dashboard.html', {
                'huntflow_configured': True,
                'connection_test': False
            })
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π
        accounts = huntflow_service.get_accounts()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –∏–∑ –æ—Ç–≤–µ—Ç–∞ API
        accounts_list = accounts.get('items', []) if accounts else []
        
        context = {
            'huntflow_configured': True,
            'connection_test': True,
            'accounts': accounts_list,  # –î–ª—è dashboard.html
            'accounts_for_menu': {'items': accounts_list},  # –î–ª—è template tag
            'active_system': request.user.active_system,
            'base_url': huntflow_service.base_url
        }
        
        return render(request, 'huntflow/dashboard.html', context)
        
    except Exception as e:
        messages.error(request, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö Huntflow: {str(e)}')
        return render(request, 'huntflow/dashboard.html', {
            'huntflow_configured': True,
            'connection_test': False,
            'error': str(e)
        })


@login_required
def vacancies_list(request, account_id):
    """
    –°–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    
    –í–•–û–î–Ø–©–ò–ï –î–ê–ù–ù–´–ï:
    - account_id: ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    - request.GET: page, count, state (–ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏)
    - request.user: –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    
    –ò–°–¢–û–ß–ù–ò–ö–ò –î–ê–ù–ù–´–•:
    - HuntflowService: —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Huntflow API
    - Huntflow API: –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π –∏ —Å—Ç–∞—Ç—É—Å–æ–≤
    
    –û–ë–†–ê–ë–û–¢–ö–ê:
    - –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ account_id —á–µ—Ä–µ–∑ get_correct_account_id
    - –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ —Å—Ç–∞—Ç—É—Å—É
    - –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    - –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    
    –í–´–•–û–î–Ø–©–ò–ï –î–ê–ù–ù–´–ï:
    - context: —Å–ª–æ–≤–∞—Ä—å —Å –≤–∞–∫–∞–Ω—Å–∏—è–º–∏, —Å—Ç–∞—Ç—É—Å–∞–º–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    - render: HTML —Å—Ç—Ä–∞–Ω–∏—Ü–∞ 'huntflow/vacancies_list.html'
    
    –°–í–Ø–ó–ò:
    - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç: HuntflowService, get_correct_account_id
    - –ü–µ—Ä–µ–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤: huntflow/vacancies_list.html
    - –ú–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∏–∑: huntflow/ URL patterns
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π account_id
        correct_account_id = get_correct_account_id(request.user, account_id)
        
        huntflow_service = HuntflowService(request.user)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        page = request.GET.get('page', 1)
        count = request.GET.get('count', 30)
        state = request.GET.get('state', '')
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º account_id
        vacancies = huntflow_service.get_vacancies(
            account_id=correct_account_id,
            page=page,
            count=count,
            state=state if state else None
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        statuses = huntflow_service.get_vacancy_statuses(correct_account_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Ö–ª–µ–±–Ω—ã—Ö –∫—Ä–æ—à–µ–∫
        accounts = huntflow_service.get_accounts()
        account_name = f'–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è {account_id}'
        if accounts and 'items' in accounts:
            for account in accounts['items']:
                if account['id'] == account_id:
                    account_name = account.get('name', account_name)
                    break
        
        context = {
            'account_id': correct_account_id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π account_id
            'account_name': account_name,
            'accounts': accounts,  # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è sidebar menu
            'vacancies': vacancies,
            'statuses': statuses,
            'current_page': int(page),
            'current_count': int(count),
            'current_state': state
        }
        
        return render(request, 'huntflow/vacancies_list.html', context)
        
    except Exception as e:
        messages.error(request, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∞–∫–∞–Ω—Å–∏–π: {str(e)}')
        return redirect('huntflow:dashboard')


@login_required
def vacancy_detail(request, account_id, vacancy_id):
    """
    –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞–∫–∞–Ω—Å–∏–∏
    
    –í–•–û–î–Ø–©–ò–ï –î–ê–ù–ù–´–ï:
    - account_id: ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    - vacancy_id: ID –≤–∞–∫–∞–Ω—Å–∏–∏
    - request.user: –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    
    –ò–°–¢–û–ß–ù–ò–ö–ò –î–ê–ù–ù–´–•:
    - HuntflowService: —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Huntflow API
    - Huntflow API: –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    
    –û–ë–†–ê–ë–û–¢–ö–ê:
    - –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ account_id —á–µ—Ä–µ–∑ get_correct_account_id
    - –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞–∫–∞–Ω—Å–∏–∏
    - –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –≤–∞–∫–∞–Ω—Å–∏–∏
    - –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    
    –í–´–•–û–î–Ø–©–ò–ï –î–ê–ù–ù–´–ï:
    - context: —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
    - render: HTML —Å—Ç—Ä–∞–Ω–∏—Ü–∞ 'huntflow/vacancy_detail.html'
    
    –°–í–Ø–ó–ò:
    - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç: HuntflowService, get_correct_account_id
    - –ü–µ—Ä–µ–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤: huntflow/vacancy_detail.html
    - –ú–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∏–∑: huntflow/ URL patterns
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π account_id
        correct_account_id = get_correct_account_id(request.user, account_id)
        
        huntflow_service = HuntflowService(request.user)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞–∫–∞–Ω—Å–∏–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º account_id
        vacancy = huntflow_service.get_vacancy(correct_account_id, vacancy_id)
        
        if not vacancy:
            messages.error(request, '–í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
            return redirect('huntflow:vacancies_list', account_id=correct_account_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        additional_fields = huntflow_service.get_vacancy_additional_fields(correct_account_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Ö–ª–µ–±–Ω—ã—Ö –∫—Ä–æ—à–µ–∫
        accounts = huntflow_service.get_accounts()
        account_name = f'–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è {account_id}'
        if accounts and 'items' in accounts:
            for account in accounts['items']:
                if account['id'] == account_id:
                    account_name = account.get('name', account_name)
                    break
        
        context = {
            'account_id': correct_account_id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π account_id
            'account_name': account_name,
            'accounts': accounts,  # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è sidebar menu
            'vacancy': vacancy,
            'vacancy_name': vacancy.get('position', f'–í–∞–∫–∞–Ω—Å–∏—è {vacancy_id}') if vacancy else f'–í–∞–∫–∞–Ω—Å–∏—è {vacancy_id}',
            'additional_fields': additional_fields
        }
        
        return render(request, 'huntflow/vacancy_detail.html', context)
        
    except Exception as e:
        messages.error(request, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∞–∫–∞–Ω—Å–∏–∏: {str(e)}')
        return redirect('huntflow:vacancies_list', account_id=account_id)


@login_required
def applicants_list(request, account_id):
    """
    –°–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    
    –í–•–û–î–Ø–©–ò–ï –î–ê–ù–ù–´–ï:
    - account_id: ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    - request.GET: page, count, status, vacancy (–ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏)
    - request.user: –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    
    –ò–°–¢–û–ß–ù–ò–ö–ò –î–ê–ù–ù–´–•:
    - HuntflowService: —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Huntflow API
    - Huntflow API: –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤, —Å—Ç–∞—Ç—É—Å–æ–≤ –∏ –≤–∞–∫–∞–Ω—Å–∏–π
    
    –û–ë–†–ê–ë–û–¢–ö–ê:
    - –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ account_id —á–µ—Ä–µ–∑ get_correct_account_id
    - –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å—É –∏ –≤–∞–∫–∞–Ω—Å–∏–∏
    - –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –∏ –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    - –û–±–æ–≥–∞—â–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–∞—Ç—É—Å–∞—Ö –∏ –≤–∞–∫–∞–Ω—Å–∏—è—Ö
    
    –í–´–•–û–î–Ø–©–ò–ï –î–ê–ù–ù–´–ï:
    - context: —Å–ª–æ–≤–∞—Ä—å —Å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º–∏, —Å—Ç–∞—Ç—É—Å–∞–º–∏ –∏ –≤–∞–∫–∞–Ω—Å–∏—è–º–∏
    - render: HTML —Å—Ç—Ä–∞–Ω–∏—Ü–∞ 'huntflow/applicants_list.html'
    
    –°–í–Ø–ó–ò:
    - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç: HuntflowService, get_correct_account_id
    - –ü–µ—Ä–µ–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤: huntflow/applicants_list.html
    - –ú–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∏–∑: huntflow/ URL patterns
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π account_id
        correct_account_id = get_correct_account_id(request.user, account_id)
        
        huntflow_service = HuntflowService(request.user)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        page = request.GET.get('page', 1)
        count = request.GET.get('count', 30)
        status = request.GET.get('status', '')
        vacancy = request.GET.get('vacancy', '')
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º account_id
        applicants = huntflow_service.get_applicants(
            account_id=correct_account_id,
            page=page,
            count=count,
            status=status if status else None,
            vacancy=vacancy if vacancy else None
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        statuses = huntflow_service.get_vacancy_statuses(correct_account_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        vacancies = huntflow_service.get_vacancies(correct_account_id, count=100)
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        statuses_dict = {}
        if statuses and 'items' in statuses:
            for status_item in statuses['items']:
                statuses_dict[status_item['id']] = status_item
        
        vacancies_dict = {}
        if vacancies and 'items' in vacancies:
            for vacancy_item in vacancies['items']:
                vacancies_dict[vacancy_item['id']] = vacancy_item
        
        # –û–±–æ–≥–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
        if applicants and 'items' in applicants:
            for applicant in applicants['items']:
                if applicant.get('links') and len(applicant['links']) > 0:
                    link = applicant['links'][0]
                    if 'status' in link and link['status'] in statuses_dict:
                        applicant['status_info'] = statuses_dict[link['status']]
                    if 'vacancy' in link and link['vacancy'] in vacancies_dict:
                        applicant['vacancy_info'] = vacancies_dict[link['vacancy']]
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Ö–ª–µ–±–Ω—ã—Ö –∫—Ä–æ—à–µ–∫
        accounts = huntflow_service.get_accounts()
        account_name = f'–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è {account_id}'
        if accounts and 'items' in accounts:
            for account in accounts['items']:
                if account['id'] == account_id:
                    account_name = account.get('name', account_name)
                    break
        
        context = {
            'account_id': correct_account_id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π account_id
            'account_name': account_name,
            'accounts': accounts,  # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è sidebar menu
            'applicants': applicants,
            'statuses': statuses,
            'vacancies': vacancies,
            'current_page': int(page),
            'current_count': int(count),
            'current_status': status,
            'current_vacancy': vacancy
        }
        
        return render(request, 'huntflow/applicants_list.html', context)
        
    except Exception as e:
        messages.error(request, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {str(e)}')
        return redirect('huntflow:dashboard')


@login_required
def applicant_detail(request, account_id, applicant_id):
    """
    –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ
    
    –í–•–û–î–Ø–©–ò–ï –î–ê–ù–ù–´–ï:
    - account_id: ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    - applicant_id: ID –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
    - request.user: –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    
    –ò–°–¢–û–ß–ù–ò–ö–ò –î–ê–ù–ù–´–•:
    - HuntflowService: —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Huntflow API
    - Huntflow API: –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ, –∞–Ω–∫–µ—Ç–µ, –ª–æ–≥–∞—Ö, —Å—Ç–∞—Ç—É—Å–∞—Ö, –≤–∞–∫–∞–Ω—Å–∏—è—Ö –∏ –º–µ—Ç–∫–∞—Ö
    
    –û–ë–†–ê–ë–û–¢–ö–ê:
    - –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ account_id —á–µ—Ä–µ–∑ get_correct_account_id
    - –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ –∏ –µ–≥–æ –∞–Ω–∫–µ—Ç–µ
    - –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ö–µ–º—ã –∞–Ω–∫–µ—Ç—ã
    - –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    - –û–±–æ–≥–∞—â–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–∞—Ç—É—Å–∞—Ö, –≤–∞–∫–∞–Ω—Å–∏—è—Ö –∏ –º–µ—Ç–∫–∞—Ö
    - –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–≥–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    
    –í–´–•–û–î–Ø–©–ò–ï –î–ê–ù–ù–´–ï:
    - context: —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞, –∞–Ω–∫–µ—Ç–æ–π, –ª–æ–≥–∞–º–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
    - render: HTML —Å—Ç—Ä–∞–Ω–∏—Ü–∞ 'huntflow/applicant_detail.html'
    
    –°–í–Ø–ó–ò:
    - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç: HuntflowService, get_correct_account_id
    - –ü–µ—Ä–µ–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤: huntflow/applicant_detail.html
    - –ú–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∏–∑: huntflow/ URL patterns
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π account_id
        correct_account_id = get_correct_account_id(request.user, account_id)
        
        huntflow_service = HuntflowService(request.user)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º account_id
        applicant = huntflow_service.get_applicant(correct_account_id, applicant_id)
        
        if not applicant:
            messages.error(request, '–ö–∞–Ω–¥–∏–¥–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω')
            return redirect('huntflow:applicants_list', account_id=correct_account_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∫–µ—Ç—É –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        questionary = huntflow_service.get_applicant_questionary(correct_account_id, applicant_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ö–µ–º—É –∞–Ω–∫–µ—Ç—ã
        questionary_schema = huntflow_service.get_applicant_questionary_schema(correct_account_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        applicant_logs = huntflow_service.get_applicant_logs(correct_account_id, applicant_id)
        # print(f"DEBUG: –ü–æ–ª—É—á–µ–Ω—ã –ª–æ–≥–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ {applicant_id}: {applicant_logs}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã, –≤–∞–∫–∞–Ω—Å–∏–∏ –∏ –º–µ—Ç–∫–∏ –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        statuses = huntflow_service.get_vacancy_statuses(correct_account_id)
        vacancies = huntflow_service.get_vacancies(correct_account_id, count=100)
        tags = huntflow_service.get_tags(correct_account_id)
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        statuses_dict = {}
        if statuses and 'items' in statuses:
            for status_item in statuses['items']:
                statuses_dict[status_item['id']] = status_item
        
        vacancies_dict = {}
        if vacancies and 'items' in vacancies:
            for vacancy_item in vacancies['items']:
                vacancies_dict[vacancy_item['id']] = vacancy_item
        
        tags_dict = {}
        if tags and 'items' in tags:
            for tag_item in tags['items']:
                tags_dict[tag_item['id']] = tag_item
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ª–æ–≥–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ (–≤—Å–µ —Ç–∏–ø—ã)
        applicant_logs_processed = []
        if applicant_logs and 'items' in applicant_logs:
            for log in applicant_logs['items']:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
                status_info = None
                if log.get('status') and log['status'] in statuses_dict:
                    status_info = statuses_dict[log['status']]
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞–∫–∞–Ω—Å–∏–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
                vacancy_info = None
                if log.get('vacancy') and log['vacancy'] in vacancies_dict:
                    vacancy_info = vacancies_dict[log['vacancy']]
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ª–æ–≥–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                log_type_display = {
                    'ADD': '–°–æ–∑–¥–∞–Ω',
                    'UPDATE': '–û–±–Ω–æ–≤–ª–µ–Ω',
                    'VACANCY-ADD': '–î–æ–±–∞–≤–ª–µ–Ω –∫ –≤–∞–∫–∞–Ω—Å–∏–∏',
                    'STATUS': '–ò–∑–º–µ–Ω–µ–Ω —Å—Ç–∞—Ç—É—Å',
                    'COMMENT': '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π',
                    'DOUBLE': '–î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ',
                    'AGREEMENT': '–°–æ–≥–ª–∞—Å–∏–µ',
                    'MAIL': '–ü–∏—Å—å–º–æ',
                    'RESPONSE': '–û—Ç–≤–µ—Ç'
                }.get(log.get('type'), log.get('type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π - —É–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞:"
                comment_text = log.get('comment', '')
                if comment_text and comment_text.startswith('–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞:'):
                    comment_text = comment_text.replace('–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞:', '').strip()
                
                # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ª–æ–≥–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                log_item = {
                    'type': log.get('type'),
                    'type_display': log_type_display,
                    'created': log.get('created'),
                    'author': log.get('account_info', {}).get('name') or log.get('account_info', {}).get('email', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                    'status': status_info,
                    'vacancy': vacancy_info,
                    'vacancy_id': log.get('vacancy'),
                    'comment': comment_text,
                    'files': log.get('files', []),
                    'email': log.get('email'),
                    'im': log.get('im'),
                    'sms': log.get('sms')
                }
                
                # –ï—Å–ª–∏ —ç—Ç–æ –ª–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞, –Ω–æ –Ω–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ –∏–∑ —Å—Ç–∞—Ç—É—Å–∞
                if log.get('type') == 'STATUS' and not log.get('comment') and status_info:
                    log_item['comment'] = f"–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {status_info['name']}"
                
                applicant_logs_processed.append(log_item)
        
        # –û—Ç–¥–µ–ª—å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        comments = [log for log in applicant_logs_processed if log['comment']]
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
        comments_count = len(comments)
        
        # –û–±–æ–≥–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        if applicant.get('links') and len(applicant['links']) > 0:
            link = applicant['links'][0]
            if 'status' in link and link['status'] in statuses_dict:
                applicant['status_info'] = statuses_dict[link['status']]
            if 'vacancy' in link and link['vacancy'] in vacancies_dict:
                applicant['vacancy_info'] = vacancies_dict[link['vacancy']]
        
        # –û–±–æ–≥–∞—â–∞–µ–º –º–µ—Ç–∫–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        if applicant.get('tags'):
            enriched_tags = []
            for tag in applicant['tags']:
                if isinstance(tag, dict) and 'tag' in tag:
                    tag_id = tag['tag']
                    if tag_id in tags_dict:
                        enriched_tags.append(tags_dict[tag_id])
                    else:
                        # –ï—Å–ª–∏ –º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ª–æ–≤–∞—Ä–µ, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                        enriched_tags.append({
                            'id': tag_id,
                            'name': f'–ú–µ—Ç–∫–∞ {tag_id}',
                            'color': '#6c757d'
                        })
                else:
                    # –ï—Å–ª–∏ –º–µ—Ç–∫–∞ —É–∂–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                    enriched_tags.append(tag)
            applicant['enriched_tags'] = enriched_tags
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã —Å–æ —Å—Ö–µ–º–æ–π
        enriched_questionary = {}
        if questionary and questionary_schema:
            for field_key, field_value in questionary.items():
                if field_key in questionary_schema:
                    enriched_questionary[field_key] = {
                        'title': questionary_schema[field_key].get('title', field_key),
                        'value': field_value,
                        'type': questionary_schema[field_key].get('type', 'unknown'),
                        'required': questionary_schema[field_key].get('required', False),
                        'options': questionary_schema[field_key].get('options', questionary_schema[field_key].get('choices', questionary_schema[field_key].get('values', []))),  # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–∏ –¥–ª—è select –ø–æ–ª–µ–π
                        'schema': questionary_schema[field_key]  # –ü–µ—Ä–µ–¥–∞–µ–º –ø–æ–ª–Ω—É—é —Å—Ö–µ–º—É –ø–æ–ª—è
                    }
                else:
                    enriched_questionary[field_key] = {
                        'title': field_key,
                        'value': field_value,
                        'type': 'unknown',
                        'required': False,
                        'options': [],
                        'schema': {}
                    }
        elif questionary:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Å—Ö–µ–º—ã, —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            for field_key, field_value in questionary.items():
                enriched_questionary[field_key] = {
                    'title': field_key,
                    'value': field_value,
                    'type': 'unknown',
                    'required': False
                }
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Ö–ª–µ–±–Ω—ã—Ö –∫—Ä–æ—à–µ–∫
        accounts = huntflow_service.get_accounts()
        account_name = f'–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è {account_id}'
        if accounts and 'items' in accounts:
            for account in accounts['items']:
                if account['id'] == account_id:
                    account_name = account.get('name', account_name)
                    break
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –¥–ª—è —Ö–ª–µ–±–Ω—ã—Ö –∫—Ä–æ—à–µ–∫
        applicant_name = f'–ö–∞–Ω–¥–∏–¥–∞—Ç {applicant_id}'
        if applicant.get('first_name') or applicant.get('last_name'):
            applicant_name = f"{applicant.get('first_name', '')} {applicant.get('last_name', '')}".strip()
        
        context = {
            'account_id': correct_account_id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π account_id
            'account_name': account_name,
            'accounts': accounts,  # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è sidebar menu
            'applicant': applicant,
            'applicant_name': applicant_name,
            'questionary': enriched_questionary,
            'questionary_schema': questionary_schema,
            'applicant_logs': applicant_logs_processed,
            'comments': comments,
            'comments_count': comments_count
        }
        
        
        # print(f"DEBUG: –§–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: {applicant}")
        # print(f"DEBUG: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–≥–æ–≤: {len(applicant_logs_processed)}")
        # print(f"DEBUG: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {comments_count}")
        
        return render(request, 'huntflow/applicant_detail.html', context)
        
    except Exception as e:
        messages.error(request, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: {str(e)}')
        return redirect('huntflow:applicants_list', account_id=account_id)


@login_required
def applicant_edit(request, account_id, applicant_id):
    """
    –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
    
    –í–•–û–î–Ø–©–ò–ï –î–ê–ù–ù–´–ï:
    - account_id: ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    - applicant_id: ID –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
    - request.user: –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    - request.POST: –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ (first_name, last_name, email, phone, tags, status_id, status_comment, questionary_*)
    
    –ò–°–¢–û–ß–ù–ò–ö–ò –î–ê–ù–ù–´–•:
    - HuntflowService: —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Huntflow API
    - Huntflow API: –ø–æ–ª—É—á–µ–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ
    
    –û–ë–†–ê–ë–û–¢–ö–ê:
    - –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ account_id —á–µ—Ä–µ–∑ get_correct_account_id
    - –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
    - –û–±—Ä–∞–±–æ—Ç–∫–∞ POST –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–ª–µ–π –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
    - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
    - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
    - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º
    
    –í–´–•–û–î–Ø–©–ò–ï –î–ê–ù–ù–´–ï:
    - context: —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    - render: HTML —Å—Ç—Ä–∞–Ω–∏—Ü–∞ 'huntflow/applicant_edit.html'
    - redirect: –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    
    –°–í–Ø–ó–ò:
    - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç: HuntflowService, get_correct_account_id
    - –ü–µ—Ä–µ–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤: huntflow/applicant_edit.html
    - –ú–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∏–∑: huntflow/ URL patterns
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π account_id
        correct_account_id = get_correct_account_id(request.user, account_id)
        
        huntflow_service = HuntflowService(request.user)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º account_id
        applicant = huntflow_service.get_applicant(correct_account_id, applicant_id)
        
        if not applicant:
            messages.error(request, '–ö–∞–Ω–¥–∏–¥–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω')
            return redirect('huntflow:applicants_list', account_id=correct_account_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∫–µ—Ç—É –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        questionary = huntflow_service.get_applicant_questionary(correct_account_id, applicant_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ö–µ–º—É –∞–Ω–∫–µ—Ç—ã
        questionary_schema = huntflow_service.get_applicant_questionary_schema(correct_account_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã, –≤–∞–∫–∞–Ω—Å–∏–∏ –∏ –º–µ—Ç–∫–∏ –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        statuses = huntflow_service.get_vacancy_statuses(correct_account_id)
        vacancies = huntflow_service.get_vacancies(correct_account_id, count=100)
        tags = huntflow_service.get_tags(correct_account_id)
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        statuses_dict = {}
        if statuses and 'items' in statuses:
            for status_item in statuses['items']:
                statuses_dict[status_item['id']] = status_item
        
        vacancies_dict = {}
        if vacancies and 'items' in vacancies:
            for vacancy_item in vacancies['items']:
                vacancies_dict[vacancy_item['id']] = vacancy_item
        
        tags_dict = {}
        if tags and 'items' in tags:
            for tag_item in tags['items']:
                tags_dict[tag_item['id']] = tag_item
        
        # –û–±–æ–≥–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        if applicant.get('links') and len(applicant['links']) > 0:
            link = applicant['links'][0]
            if 'status' in link and link['status'] in statuses_dict:
                applicant['status_info'] = statuses_dict[link['status']]
            if 'vacancy' in link and link['vacancy'] in vacancies_dict:
                applicant['vacancy_info'] = vacancies_dict[link['vacancy']]
        
        # –û–±–æ–≥–∞—â–∞–µ–º –º–µ—Ç–∫–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        if applicant.get('tags'):
            enriched_tags = []
            for tag in applicant['tags']:
                if isinstance(tag, dict) and 'tag' in tag:
                    tag_id = tag['tag']
                    if tag_id in tags_dict:
                        enriched_tags.append(tags_dict[tag_id])
                    else:
                        # –ï—Å–ª–∏ –º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ª–æ–≤–∞—Ä–µ, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                        enriched_tags.append({
                            'id': tag_id,
                            'name': f'–ú–µ—Ç–∫–∞ {tag_id}',
                            'color': '#6c757d'
                        })
                else:
                    # –ï—Å–ª–∏ –º–µ—Ç–∫–∞ —É–∂–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                    enriched_tags.append(tag)
            applicant['enriched_tags'] = enriched_tags
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã —Å–æ —Å—Ö–µ–º–æ–π
        enriched_questionary = {}
        if questionary and questionary_schema:
            for field_key, field_value in questionary.items():
                if field_key in questionary_schema:
                    enriched_questionary[field_key] = {
                        'title': questionary_schema[field_key].get('title', field_key),
                        'value': field_value,
                        'type': questionary_schema[field_key].get('type', 'unknown'),
                        'required': questionary_schema[field_key].get('required', False),
                        'options': questionary_schema[field_key].get('options', questionary_schema[field_key].get('choices', questionary_schema[field_key].get('values', []))),  # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–∏ –¥–ª—è select –ø–æ–ª–µ–π
                        'schema': questionary_schema[field_key]  # –ü–µ—Ä–µ–¥–∞–µ–º –ø–æ–ª–Ω—É—é —Å—Ö–µ–º—É –ø–æ–ª—è
                    }
                else:
                    enriched_questionary[field_key] = {
                        'title': field_key,
                        'value': field_value,
                        'type': 'unknown',
                        'required': False,
                        'options': [],
                        'schema': {}
                    }
        elif questionary:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Å—Ö–µ–º—ã, —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            for field_key, field_value in questionary.items():
                enriched_questionary[field_key] = {
                    'title': field_key,
                    'value': field_value,
                    'type': 'unknown',
                    'required': False
                }
        elif questionary_schema:
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Ö–µ–º–∞, –Ω–æ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç—ã, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—ã–µ –ø–æ–ª—è
            for field_key, field_info in questionary_schema.items():
                enriched_questionary[field_key] = {
                    'title': field_info.get('title', field_key),
                    'value': None,
                    'type': field_info.get('type', 'unknown'),
                    'required': field_info.get('required', False),
                    'options': field_info.get('options', field_info.get('choices', field_info.get('values', []))),
                    'schema': field_info
                }
        
        if request.method == 'POST':
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            try:
                print(f"DEBUG: POST –¥–∞–Ω–Ω—ã–µ: {dict(request.POST)}")
                success_messages = []
                error_messages = []
                
                # 1. –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å
                update_data = {}
                
                # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è - –≤—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º, –¥–∞–∂–µ –µ—Å–ª–∏ –ø—É—Å—Ç—ã–µ
                if 'first_name' in request.POST:
                    update_data['first_name'] = request.POST['first_name'].strip() or None
                if 'last_name' in request.POST:
                    update_data['last_name'] = request.POST['last_name'].strip() or None
                if 'middle_name' in request.POST:
                    update_data['middle_name'] = request.POST['middle_name'].strip() or None
                if 'email' in request.POST:
                    update_data['email'] = request.POST['email'].strip() or None
                if 'phone' in request.POST:
                    update_data['phone'] = request.POST['phone'].strip() or None
                if 'money' in request.POST:
                    update_data['money'] = request.POST['money'].strip() or None
                if 'telegram' in request.POST:
                    # –û–±–Ω–æ–≤–ª—è–µ–º Telegram –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö
                    telegram_value = request.POST['telegram'].strip()
                    if telegram_value:
                        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏, –æ–±–Ω–æ–≤–ª—è–µ–º Telegram
                        if 'social' not in update_data:
                            update_data['social'] = applicant.get('social', [])
                        
                        # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π Telegram
                        telegram_found = False
                        for social in update_data['social']:
                            if social.get('social_type') == 'TELEGRAM':
                                social['value'] = telegram_value
                                telegram_found = True
                                break
                        
                        # –ï—Å–ª–∏ Telegram –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π
                        if not telegram_found:
                            update_data['social'].append({
                                'social_type': 'TELEGRAM',
                                'value': telegram_value
                            })
                    else:
                        # –ï—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ, —É–¥–∞–ª—è–µ–º Telegram
                        if 'social' not in update_data:
                            update_data['social'] = applicant.get('social', [])
                        update_data['social'] = [s for s in update_data['social'] if s.get('social_type') != 'TELEGRAM']
                
                # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫–∏ –≤ –æ–±—â–∏–π –∑–∞–ø—Ä–æ—Å (–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã)
                if 'tags' in request.POST:
                    tag_ids = [int(tag_id) for tag_id in request.POST.getlist('tags') if tag_id]
                    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è –º–µ—Ç–æ–∫
                    # –§–æ—Ä–º–∞—Ç 1: [{"tag": id}] - –ø—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç
                    # –§–æ—Ä–º–∞—Ç 2: [{"tag": id, "id": internal_id}] - —Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º ID
                    # –§–æ—Ä–º–∞—Ç 3: –ø—Ä–æ—Å—Ç–æ –º–∞—Å—Å–∏–≤ ID
                    update_data['tags'] = [{'tag': tag_id} for tag_id in tag_ids]
                    # –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
                    update_data['tag_ids'] = tag_ids
                    update_data['tags_simple'] = tag_ids
                    print(f"DEBUG: –î–æ–±–∞–≤–ª–µ–Ω—ã –º–µ—Ç–∫–∏ –≤ –æ–±—â–∏–π –∑–∞–ø—Ä–æ—Å - –§–æ—Ä–º–∞—Ç –æ–±—ä–µ–∫—Ç–æ–≤: {update_data['tags']}")
                    print(f"DEBUG: –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –º–µ—Ç–æ–∫: tag_ids={tag_ids}, tags_simple={tag_ids}")
                
                # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                questionary_data = {}
                for key, value in request.POST.items():
                    if key.startswith('questionary_'):
                        field_key = key.replace('questionary_', '')
                        if value.strip():  # –¢–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                            questionary_data[field_key] = value.strip()
                
                if questionary_data:
                    print(f"DEBUG: –î–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {questionary_data}")
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—â–∏–π –∑–∞–ø—Ä–æ—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                if update_data:
                    print(f"DEBUG: –û–±—â–∏–π –∑–∞–ø—Ä–æ—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è - –î–∞–Ω–Ω—ã–µ: {update_data}")
                    print(f"DEBUG: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {len(update_data)}")
                    for key, value in update_data.items():
                        print(f"DEBUG: –ü–æ–ª–µ '{key}': '{value}'")
                    
                    updated_applicant = huntflow_service.update_applicant(correct_account_id, applicant_id, update_data)
                    print(f"DEBUG: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {updated_applicant}")
                    
                    if updated_applicant:
                        success_messages.append('–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã')
                    else:
                        error_messages.append('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö')
                else:
                    print("DEBUG: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ")
                
                # 2. –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∫–∏ –æ—Ç–¥–µ–ª—å–Ω–æ
                if 'tags' in request.POST:
                    tag_ids = [int(tag_id) for tag_id in request.POST.getlist('tags') if tag_id]
                    tags_result = huntflow_service.update_applicant_tags(
                        correct_account_id, applicant_id, tag_ids
                    )
                    if tags_result:
                        success_messages.append('–ú–µ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã')
                    else:
                        error_messages.append('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ—Ç–æ–∫')
                
                # 3. –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∫–µ—Ç—É –æ—Ç–¥–µ–ª—å–Ω–æ
                if questionary_data:
                    questionary_result = huntflow_service.update_applicant_questionary(
                        correct_account_id, applicant_id, questionary_data
                    )
                    if questionary_result:
                        success_messages.append('–ê–Ω–∫–µ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞')
                    else:
                        error_messages.append('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã')
                
                # 4. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –≤–∞–∫–∞–Ω—Å–∏–∏
                if 'status_id' in request.POST and request.POST['status_id']:
                    status_id = int(request.POST['status_id'])
                    status_comment = request.POST.get('status_comment', '')
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–∞–∫–∞–Ω—Å–∏—é –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
                    vacancy_id = None
                    if applicant.get('links'):
                        vacancy_id = applicant['links'][0].get('vacancy')
                    
                    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                    print(f"DEBUG: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ - ID: {status_id}, –í–∞–∫–∞–Ω—Å–∏—è: {vacancy_id}, –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {status_comment}")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º –∏ –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –≤–∞–∫–∞–Ω—Å–∏–∏
                    status_result = huntflow_service.update_applicant_status(
                        account_id, applicant_id, status_id, 
                        status_comment.strip() if status_comment.strip() else None,
                        vacancy_id
                    )
                    print(f"DEBUG: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {status_result}")
                    
                    if status_result:
                        success_messages.append('–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω')
                    else:
                        error_messages.append('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞')
                
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                if success_messages:
                    for msg in success_messages:
                        messages.success(request, msg)
                if error_messages:
                    for msg in error_messages:
                        messages.error(request, msg)
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å —É—Å–ø–µ—à–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º
                if success_messages:
                    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                    print(f"DEBUG: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ {applicant_id}")
                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Huntflow
                    import time
                    time.sleep(1)
                    return redirect('huntflow:applicant_detail', account_id=correct_account_id, applicant_id=applicant_id)
                    
            except Exception as e:
                messages.error(request, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {str(e)}')
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Ö–ª–µ–±–Ω—ã—Ö –∫—Ä–æ—à–µ–∫
        accounts = huntflow_service.get_accounts()
        account_name = f'–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è {correct_account_id}'
        if accounts and 'items' in accounts:
            for account in accounts['items']:
                if account['id'] == correct_account_id:
                    account_name = account.get('name', account_name)
                    break
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –¥–ª—è —Ö–ª–µ–±–Ω—ã—Ö –∫—Ä–æ—à–µ–∫
        applicant_name = f'–ö–∞–Ω–¥–∏–¥–∞—Ç {applicant_id}'
        if applicant.get('first_name') or applicant.get('last_name'):
            applicant_name = f"{applicant.get('first_name', '')} {applicant.get('last_name', '')}".strip()
        
        context = {
            'account_id': correct_account_id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π account_id
            'account_name': account_name,
            'accounts': accounts,  # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è sidebar menu
            'applicant': applicant,
            'applicant_name': applicant_name,
            'questionary': enriched_questionary,
            'questionary_schema': questionary_schema,
            'statuses': statuses,
            'vacancies': vacancies,
            'tags': tags
        }
        
        return render(request, 'huntflow/applicant_edit.html', context)
        
    except Exception as e:
        messages.error(request, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: {str(e)}')
        return redirect('huntflow:applicants_list', account_id=correct_account_id)


@login_required
@require_http_methods(["POST"])
@csrf_exempt
def test_connection_ajax(request):
    """
    AJAX endpoint –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Huntflow
    
    –í–•–û–î–Ø–©–ò–ï –î–ê–ù–ù–´–ï:
    - request.user: –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    
    –ò–°–¢–û–ß–ù–ò–ö–ò –î–ê–ù–ù–´–•:
    - HuntflowService: —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Huntflow API
    
    –û–ë–†–ê–ë–û–¢–ö–ê:
    - –°–æ–∑–¥–∞–Ω–∏–µ HuntflowService –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Huntflow API
    
    –í–´–•–û–î–Ø–©–ò–ï –î–ê–ù–ù–´–ï:
    - JsonResponse —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    
    –°–í–Ø–ó–ò:
    - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç: HuntflowService
    - –ü–µ—Ä–µ–¥–∞–µ—Ç: JsonResponse
    - –ú–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∏–∑: AJAX –∑–∞–ø—Ä–æ—Å—ã
    """
    try:
        huntflow_service = HuntflowService(request.user)
        connection_success = huntflow_service.test_connection()
        
        return JsonResponse({
            'success': connection_success,
            'message': '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ' if connection_success else '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è'
        })
        
    except Exception as e:
        return JsonResponse({
            'success': False,
            'message': f'–û—à–∏–±–∫–∞: {str(e)}'
        })


@login_required
@require_http_methods(["POST"])
def create_comment_ajax(request, account_id, applicant_id):
    """
    AJAX endpoint –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –∫–∞–Ω–¥–∏–¥–∞—Ç—É
    
    –í–•–û–î–Ø–©–ò–ï –î–ê–ù–ù–´–ï:
    - account_id: ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    - applicant_id: ID –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
    - request.POST: comment (—Ç–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è)
    - request.user: –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    
    –ò–°–¢–û–ß–ù–ò–ö–ò –î–ê–ù–ù–´–ï:
    - HuntflowService: —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Huntflow API
    - Huntflow API: –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    
    –û–ë–†–ê–ë–û–¢–ö–ê:
    - –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    - –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ
    - –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –≤–∞–∫–∞–Ω—Å–∏–∏ –∏ —Å—Ç–∞—Ç—É—Å–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
    - –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏ —Å—Ç–∞—Ç—É—Å—É
    
    –í–´–•–û–î–Ø–©–ò–ï –î–ê–ù–ù–´–ï:
    - JsonResponse —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    
    –°–í–Ø–ó–ò:
    - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç: HuntflowService
    - –ü–µ—Ä–µ–¥–∞–µ—Ç: JsonResponse
    - –ú–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∏–∑: AJAX –∑–∞–ø—Ä–æ—Å—ã
    """
    try:
        huntflow_service = HuntflowService(request.user)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        comment_text = request.POST.get('comment', '').strip()
        
        if not comment_text:
            return JsonResponse({
                'success': False,
                'message': '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'
            })
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏ –∏ —Å—Ç–∞—Ç—É—Å–∞
        applicant = huntflow_service.get_applicant(account_id, applicant_id)
        if not applicant:
            return JsonResponse({
                'success': False,
                'message': '–ö–∞–Ω–¥–∏–¥–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
            })
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–∞–∫–∞–Ω—Å–∏—é –∏ —Å—Ç–∞—Ç—É—Å –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        vacancy_id = None
        status_id = None
        if applicant.get('links'):
            vacancy_id = applicant['links'][0].get('vacancy')
            status_id = applicant['links'][0].get('status')
        
        if not vacancy_id or not status_id:
            return JsonResponse({
                'success': False,
                'message': '–£ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–ª–∏ —Å—Ç–∞—Ç—É—Å–∞'
            })
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏ —Å—Ç–∞—Ç—É—Å—É
        result = huntflow_service.create_applicant_comment(
            account_id, applicant_id, comment_text, vacancy_id, status_id
        )
        
        if result:
            return JsonResponse({
                'success': True,
                'message': '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω',
                'comment_id': result.get('id'),
                'created': result.get('created')
            })
        else:
            return JsonResponse({
                'success': False,
                'message': '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'
            })
        
    except Exception as e:
        return JsonResponse({
            'success': False,
            'message': f'–û—à–∏–±–∫–∞: {str(e)}'
        })


@login_required
@require_http_methods(["GET"])
def get_vacancies_ajax(request, account_id):
    """
    AJAX endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–π
    
    –í–•–û–î–Ø–©–ò–ï –î–ê–ù–ù–´–ï:
    - account_id: ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    - request.GET: page, count, state (–ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏)
    - request.user: –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    
    –ò–°–¢–û–ß–ù–ò–ö–ò –î–ê–ù–ù–´–•:
    - HuntflowService: —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Huntflow API
    - Huntflow API: –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π
    
    –û–ë–†–ê–ë–û–¢–ö–ê:
    - –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏–∑ GET –∑–∞–ø—Ä–æ—Å–∞
    - –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π —á–µ—Ä–µ–∑ HuntflowService
    
    –í–´–•–û–î–Ø–©–ò–ï –î–ê–ù–ù–´–ï:
    - JsonResponse —Å –¥–∞–Ω–Ω—ã–º–∏ –≤–∞–∫–∞–Ω—Å–∏–π
    
    –°–í–Ø–ó–ò:
    - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç: HuntflowService
    - –ü–µ—Ä–µ–¥–∞–µ—Ç: JsonResponse
    - –ú–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∏–∑: AJAX –∑–∞–ø—Ä–æ—Å—ã
    """
    try:
        huntflow_service = HuntflowService(request.user)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        page = request.GET.get('page', 1)
        count = request.GET.get('count', 30)
        state = request.GET.get('state', '')
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏
        vacancies = huntflow_service.get_vacancies(
            account_id=account_id,
            page=page,
            count=count,
            state=state if state else None
        )
        
        return JsonResponse({
            'success': True,
            'data': vacancies
        })
        
    except Exception as e:
        return JsonResponse({
            'success': False,
            'message': f'–û—à–∏–±–∫–∞: {str(e)}'
        })


@login_required
@require_http_methods(["GET"])
def get_applicants_ajax(request, account_id):
    """
    AJAX endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    
    –í–•–û–î–Ø–©–ò–ï –î–ê–ù–ù–´–ï:
    - account_id: ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    - request.GET: page, count, status, vacancy (–ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏)
    - request.user: –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    
    –ò–°–¢–û–ß–ù–ò–ö–ò –î–ê–ù–ù–´–•:
    - HuntflowService: —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Huntflow API
    - Huntflow API: –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    
    –û–ë–†–ê–ë–û–¢–ö–ê:
    - –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏–∑ GET –∑–∞–ø—Ä–æ—Å–∞
    - –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ —á–µ—Ä–µ–∑ HuntflowService
    
    –í–´–•–û–î–Ø–©–ò–ï –î–ê–ù–ù–´–ï:
    - JsonResponse —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    
    –°–í–Ø–ó–ò:
    - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç: HuntflowService
    - –ü–µ—Ä–µ–¥–∞–µ—Ç: JsonResponse
    - –ú–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∏–∑: AJAX –∑–∞–ø—Ä–æ—Å—ã
    """
    try:
        huntflow_service = HuntflowService(request.user)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        page = request.GET.get('page', 1)
        count = request.GET.get('count', 30)
        status = request.GET.get('status', '')
        vacancy = request.GET.get('vacancy', '')
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
        applicants = huntflow_service.get_applicants(
            account_id=account_id,
            page=page,
            count=count,
            status=status if status else None,
            vacancy=vacancy if vacancy else None
        )
        
        return JsonResponse({
            'success': True,
            'data': applicants
        })
        
    except Exception as e:
        return JsonResponse({
            'success': False,
            'message': f'–û—à–∏–±–∫–∞: {str(e)}'
        })
