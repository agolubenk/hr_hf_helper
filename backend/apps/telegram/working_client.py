"""
–†–ê–ë–û–ß–ò–ô Telegram –∫–ª–∏–µ–Ω—Ç - –ë–ï–ó –¥–µ–º–æ-—Ä–µ–∂–∏–º–∞!
"""
import asyncio
import qrcode
import logging
from io import BytesIO
from typing import Optional, Tuple, Dict, Any
from datetime import datetime

from telethon import TelegramClient
from telethon.errors import (
    SessionPasswordNeededError, 
    TimeoutError as TelethonTimeoutError,
    FloodWaitError,
    PhoneCodeInvalidError,
    PasswordHashInvalidError
)
from telethon.sessions import StringSession
from django.conf import settings
from asgiref.sync import sync_to_async

from .models import TelegramUser

logger = logging.getLogger('apps.telegram')


def run_telegram_auth_sync(telegram_user_id: int, action: str, **kwargs):
    """–†–ê–ë–û–ß–ê–Ø —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram"""
    
    logger.info(f"üéØ –†–ê–ë–û–ß–ò–ô –ö–õ–ò–ï–ù–¢: –í—ã–∑–æ–≤ {action} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_user_id}")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        telegram_user = TelegramUser.objects.get(id=telegram_user_id)
        
        if action == "generate_qr":
            logger.info(f"üéØ –†–ê–ë–û–ß–ò–ô –ö–õ–ò–ï–ù–¢: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –†–ï–ê–õ–¨–ù–´–ô QR-–∫–æ–¥ –¥–ª—è {telegram_user.user.username}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á–∏
            if not settings.TELEGRAM_API_ID or not settings.TELEGRAM_API_HASH:
                return None, None, "error"
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—ã–∑–æ–≤–∞
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            
            try:
                result = loop.run_until_complete(_generate_qr_async(telegram_user))
                return result
            finally:
                loop.close()
                
        elif action == "wait_auth":
            logger.info(f"üéØ –†–ê–ë–û–ß–ò–ô –ö–õ–ò–ï–ù–¢: –ñ–¥–µ–º –†–ï–ê–õ–¨–ù–û–ô –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è {telegram_user.user.username}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
            if telegram_user.is_authorized:
                user_data = {
                    'id': telegram_user.telegram_id,
                    'username': telegram_user.username,
                    'first_name': telegram_user.first_name,
                    'last_name': telegram_user.last_name,
                    'phone': telegram_user.phone,
                }
                return "success", user_data, None
            
            # –í —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ–º waiting
            return "waiting", None, "–û–∂–∏–¥–∞–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è QR-–∫–æ–¥–∞"
            
        elif action == "handle_2fa":
            password = kwargs.get('password')
            if not password:
                return "error", None, "–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"
            
            logger.info(f"üéØ –†–ê–ë–û–ß–ò–ô –ö–õ–ò–ï–ù–¢: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –†–ï–ê–õ–¨–ù–£–Æ 2FA –¥–ª—è {telegram_user.user.username}")
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—ã–∑–æ–≤–∞
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            
            try:
                result = loop.run_until_complete(_handle_2fa_async(telegram_user, password))
                return result
            finally:
                loop.close()
                
        elif action == "get_chats":
            logger.info(f"üéØ –†–ê–ë–û–ß–ò–ô –ö–õ–ò–ï–ù–¢: –ü–æ–ª—É—á–∞–µ–º –†–ï–ê–õ–¨–ù–´–ï —á–∞—Ç—ã –¥–ª—è {telegram_user.user.username}")
            
            if not telegram_user.is_authorized:
                return "error", None, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"
            
            # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ - –¥–æ–±–∞–≤–∏–º —Ä–µ–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –ø–æ–∑–∂–µ
            return "success", [], None
            
        else:
            return "error", None, f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}"
            
    except TelegramUser.DoesNotExist:
        return "error", None, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram –Ω–µ –Ω–∞–π–¥–µ–Ω"
    except Exception as e:
        logger.error(f"üéØ –†–ê–ë–û–ß–ò–ô –ö–õ–ò–ï–ù–¢: –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è {action}: {e}")
        return "error", None, str(e)


async def _generate_qr_async(telegram_user: TelegramUser):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞"""
    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
        session = StringSession()
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        client = TelegramClient(
            session,
            settings.TELEGRAM_API_ID,
            settings.TELEGRAM_API_HASH
        )
        
        await client.connect()
        logger.info(f"üéØ –†–ê–ë–û–ß–ò–ô –ö–õ–ò–ï–ù–¢: –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è {telegram_user.user.username}")
        
        # –°–æ–∑–¥–∞–µ–º QR –ª–æ–≥–∏–Ω
        qr_login = await client.qr_login()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥
        qr = qrcode.QRCode(version=1, box_size=10, border=5)
        qr.add_data(qr_login.url)
        qr.make(fit=True)
        
        img = qr.make_image(fill_color="black", back_color="white")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ bytes
        buffer = BytesIO()
        img.save(buffer, format='PNG')
        qr_data = buffer.getvalue()
        
        logger.info(f"üéØ –†–ê–ë–û–ß–ò–ô –ö–õ–ò–ï–ù–¢: –†–ï–ê–õ–¨–ù–´–ô QR-–∫–æ–¥ —Å–æ–∑–¥–∞–Ω –¥–ª—è {telegram_user.user.username}")
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        await client.disconnect()
        
        return qr_data, qr_login.url, "success"
        
    except Exception as e:
        logger.error(f"üéØ –†–ê–ë–û–ß–ò–ô –ö–õ–ò–ï–ù–¢: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –†–ï–ê–õ–¨–ù–û–ì–û QR-–∫–æ–¥–∞: {e}")
        return None, None, "error"


async def _handle_2fa_async(telegram_user: TelegramUser, password: str):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ 2FA"""
    try:
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ 2FA
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ –º—ã –¥–æ—à–ª–∏ –¥–æ —ç—Ç–æ–≥–æ –º–µ—Å—Ç–∞
        logger.info(f"üéØ –†–ê–ë–û–ß–ò–ô –ö–õ–ò–ï–ù–¢: –†–ï–ê–õ–¨–ù–ê–Ø 2FA –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è {telegram_user.user.username}")
        return "error", None, "2FA –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
        
    except Exception as e:
        logger.error(f"üéØ –†–ê–ë–û–ß–ò–ô –ö–õ–ò–ï–ù–¢: –û—à–∏–±–∫–∞ 2FA: {e}")
        return "error", None, str(e)


