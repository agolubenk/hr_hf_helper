# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –Ω–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π
from logic.integration.telegram.telegram_service import (
    TelegramAuthView, telegram_dashboard, telegram_auth_sync,
    telegram_logout, telegram_settings, telegram_auth_attempts,
    telegram_webhook, telegram_test_connection
)
from logic.base.response_handler import UnifiedResponseHandler

# –°—Ç–∞—Ä—ã–µ –∏–º–ø–æ—Ä—Ç—ã (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
import json
import base64
import logging
from typing import Dict, Any

from django.shortcuts import render, redirect
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from django.contrib.auth.decorators import login_required
from django.contrib.auth import get_user_model
from django.contrib import messages
from django.utils.decorators import method_decorator
from django.views import View
from django.core.exceptions import ValidationError

from .models import TelegramUser, AuthAttempt
from .demo_telegram_client import run_telegram_auth_sync

logger = logging.getLogger('apps.telegram')
User = get_user_model()


class TelegramAuthView(View):
    """
    –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram
    
    –í–•–û–î–Ø–©–ò–ï –î–ê–ù–ù–´–ï:
    - request.user: –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    
    –ò–°–¢–û–ß–ù–ò–ö–ò –î–ê–ù–ù–´–•:
    - TelegramUser.objects: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ Telegram
    - AuthAttempt.objects: –ø–æ–ø—ã—Ç–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    
    –û–ë–†–ê–ë–û–¢–ö–ê:
    - –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ TelegramUser
    - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    - –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    
    –í–´–•–û–î–Ø–©–ò–ï –î–ê–ù–ù–´–ï:
    - context: —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    - render: HTML —Å—Ç—Ä–∞–Ω–∏—Ü–∞ 'telegram/auth.html'
    
    –°–í–Ø–ó–ò:
    - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç: TelegramUser, AuthAttempt –º–æ–¥–µ–ª–∏
    - –ü–µ—Ä–µ–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤: telegram/auth.html
    - –ú–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∏–∑: telegram/ URL patterns
    """
    
    @method_decorator(login_required)
    def get(self, request):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º TelegramUser
            telegram_user, created = TelegramUser.objects.get_or_create(
                user=request.user,
                defaults={'session_name': f"user_{request.user.id}"}
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            is_authorized = False
            user_info = None
            
            if telegram_user.is_authorized:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                is_authorized = True
                user_info = {
                    'id': telegram_user.telegram_id,
                    'username': telegram_user.username,
                    'first_name': telegram_user.first_name,
                    'last_name': telegram_user.last_name,
                    'phone': telegram_user.phone,
                }
            
            context = {
                'telegram_user': telegram_user,
                'is_authorized': is_authorized,
                'user_info': user_info,
                'auth_attempts': telegram_user.auth_attempts.all()[:10]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–æ–ø—ã—Ç–æ–∫
            }
            
            return render(request, 'telegram/auth.html', context)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ TelegramAuthView.get: {e}")
            messages.error(request, f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
            return render(request, 'telegram/auth.html', {'error': str(e)})


class GenerateQRView(View):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    
    @method_decorator(csrf_exempt)
    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super().dispatch(*args, **kwargs)
    
    def post(self, request):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º TelegramUser
            telegram_user = TelegramUser.objects.get(user=request.user)
            
            logger.info(f"üéØ VIEWS: –ó–∞–ø—Ä–æ—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {request.user.username}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥
            logger.info(f"üéØ VIEWS: –í—ã–∑—ã–≤–∞–µ–º run_telegram_auth_sync –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_user.id}")
            qr_data, qr_url, status = run_telegram_auth_sync(telegram_user.id, "generate_qr")
            logger.info(f"üéØ VIEWS: –ü–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç: status={status}")
            
            if status == "success":
                # –ö–æ–¥–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64
                qr_base64 = base64.b64encode(qr_data).decode()
                
                return JsonResponse({
                    'success': True,
                    'qr_image': f"data:image/png;base64,{qr_base64}",
                    'qr_url': qr_url,
                    'session_name': telegram_user.session_name
                })
                
            elif status == "already_authorized":
                return JsonResponse({
                    'success': False,
                    'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω',
                    'redirect': True
                })
                
            else:
                return JsonResponse({
                    'success': False,
                    'error': f'–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞: {status}'
                })
                
        except TelegramUser.DoesNotExist:
            return JsonResponse({
                'success': False,
                'error': 'Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
            })
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR: {e}")
            return JsonResponse({
                'success': False,
                'error': f'–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: {str(e)}'
            })


class CheckAuthStatusView(View):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    
    @method_decorator(csrf_exempt)
    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super().dispatch(*args, **kwargs)
    
    def post(self, request):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        try:
            telegram_user = TelegramUser.objects.get(user=request.user)
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–º–µ–Ω—å—à–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–æ 3 —Å–µ–∫—É–Ω–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            status, user_data, error_message = run_telegram_auth_sync(
                telegram_user.id, 
                "wait_auth", 
                timeout=3  # –ò–ó–ú–ï–ù–ï–ù–û –° 30 –ù–ê 3!
            )
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            telegram_user.refresh_from_db()
            
            if status == "success":
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –µ—â–µ –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω
                if not telegram_user.is_authorized and user_data:
                    telegram_user.is_authorized = True
                    telegram_user.telegram_id = user_data.get('id')
                    telegram_user.username = user_data.get('username')
                    telegram_user.first_name = user_data.get('first_name')
                    telegram_user.last_name = user_data.get('last_name')
                    telegram_user.phone = user_data.get('phone')
                    telegram_user.save()
                
                return JsonResponse({
                    'status': 'success',
                    'user': user_data
                })
                
            elif status == "2fa_required":
                return JsonResponse({
                    'status': '2fa_required',
                    'message': '–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è'
                })
                
            elif status == "timeout" or status == "waiting":
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ –±–∞–∑–µ
                if telegram_user.is_authorized:
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
                    user_info = {
                        'id': telegram_user.telegram_id,
                        'username': telegram_user.username,
                        'first_name': telegram_user.first_name,
                        'last_name': telegram_user.last_name,
                        'phone': telegram_user.phone,
                    }
                    return JsonResponse({
                        'status': 'success',
                        'user': user_info
                    })
                
                return JsonResponse({
                    'status': 'waiting',
                    'message': '–û–∂–∏–¥–∞–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è QR-–∫–æ–¥–∞'
                })
                
            else:
                return JsonResponse({
                    'status': 'error',
                    'error': error_message or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
                })
                
        except TelegramUser.DoesNotExist:
            return JsonResponse({
                'status': 'error',
                'error': 'Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
            })
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return JsonResponse({
                'status': 'error',
                'error': str(e)
            })


class Handle2FAView(View):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    
    @method_decorator(csrf_exempt)
    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super().dispatch(*args, **kwargs)
    
    def post(self, request):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ 2FA –ø–∞—Ä–æ–ª—è"""
        try:
            data = json.loads(request.body)
            password = data.get('password', '').strip()
            
            if not password:
                return JsonResponse({
                    'success': False,
                    'error': '–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
                })
            
            telegram_user = TelegramUser.objects.get(user=request.user)
            
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ 2FA –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {request.user.username}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º 2FA
            status, user_data, error_message = run_telegram_auth_sync(
                telegram_user.id, 
                "handle_2fa", 
                password=password
            )
            
            if status == "success":
                return JsonResponse({
                    'success': True,
                    'user': user_data
                })
            else:
                return JsonResponse({
                    'success': False,
                    'error': error_message or '–û—à–∏–±–∫–∞ 2FA'
                })
                
        except json.JSONDecodeError:
            return JsonResponse({
                'success': False,
                'error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON'
            })
            
        except TelegramUser.DoesNotExist:
            return JsonResponse({
                'success': False,
                'error': 'Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
            })
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ 2FA: {e}")
            return JsonResponse({
                'success': False,
                'error': str(e)
            })


class RecreateQRView(View):
    """–ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ QR-–∫–æ–¥–∞"""
    
    @method_decorator(csrf_exempt)
    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super().dispatch(*args, **kwargs)
    
    def post(self, request):
        """–ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ QR-–∫–æ–¥–∞"""
        try:
            telegram_user = TelegramUser.objects.get(user=request.user)
            
            logger.info(f"–ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ QR –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {request.user.username}")
            
            # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º QR-–∫–æ–¥
            qr_data, qr_url, status = run_telegram_auth_sync(telegram_user.id, "generate_qr")
            
            if status == "success":
                qr_base64 = base64.b64encode(qr_data).decode()
                
                return JsonResponse({
                    'success': True,
                    'qr_image': f"data:image/png;base64,{qr_base64}",
                    'qr_url': qr_url
                })
            else:
                return JsonResponse({
                    'success': False,
                    'error': f'–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è QR: {status}'
                })
                
        except TelegramUser.DoesNotExist:
            return JsonResponse({
                'success': False,
                'error': 'Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
            })
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è QR: {e}")
            return JsonResponse({
                'success': False,
                'error': str(e)
            })


class TelegramDashboardView(View):
    """–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    @method_decorator(login_required)
    def get(self, request):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        try:
            telegram_user = TelegramUser.objects.get(user=request.user)
            
            if not telegram_user.is_authorized:
                return redirect('telegram:auth')
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            user_info = {
                'id': telegram_user.telegram_id,
                'username': telegram_user.username,
                'first_name': telegram_user.first_name,
                'last_name': telegram_user.last_name,
                'phone': telegram_user.phone,
            }
            
            context = {
                'telegram_user': telegram_user,
                'user_info': user_info,
                'recent_attempts': telegram_user.auth_attempts.all()[:10]
            }
            
            return render(request, 'telegram/dashboard.html', context)
            
        except TelegramUser.DoesNotExist:
            messages.error(request, 'Telegram –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω')
            return redirect('telegram:auth')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ TelegramDashboardView: {e}")
            messages.error(request, f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞–Ω–µ–ª–∏: {e}")
            return redirect('telegram:auth')


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ API views –¥–ª—è AJAX –∑–∞–ø—Ä–æ—Å–æ–≤
@csrf_exempt
@login_required
def get_auth_attempts(request):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ø—ã—Ç–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    if request.method == 'GET':
        try:
            telegram_user = TelegramUser.objects.get(user=request.user)
            attempts = AuthAttempt.objects.filter(telegram_user=telegram_user)[:20]
            
            attempts_data = [{
                'id': attempt.id,
                'attempt_type': attempt.get_attempt_type_display(),
                'status': attempt.get_status_display(),
                'error_message': attempt.error_message,
                'created_at': attempt.created_at.isoformat()
            } for attempt in attempts]
            
            return JsonResponse({
                'success': True,
                'attempts': attempts_data
            })
            
        except TelegramUser.DoesNotExist:
            return JsonResponse({
                'success': False,
                'error': 'Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
            })
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ø—ã—Ç–æ–∫: {e}")
            return JsonResponse({
                'success': False,
                'error': str(e)
            })
    
    return JsonResponse({'success': False, 'error': '–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è'})


@csrf_exempt
@login_required  
def reset_telegram_auth(request):
    """–°–±—Ä–æ—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram"""
    if request.method == 'POST':
        try:
            telegram_user = TelegramUser.objects.get(user=request.user)
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            telegram_user.telegram_id = None
            telegram_user.username = None
            telegram_user.first_name = None
            telegram_user.last_name = None
            telegram_user.phone = None
            telegram_user.is_authorized = False
            telegram_user.auth_date = None
            telegram_user.save()
            
            logger.info(f"–°–±—Ä–æ—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {request.user.username}")
            
            return JsonResponse({
                'success': True,
                'message': '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å–±—Ä–æ—à–µ–Ω–∞'
            })
            
        except TelegramUser.DoesNotExist:
            return JsonResponse({
                'success': False,
                'error': 'Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
            })
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return JsonResponse({
                'success': False,
                'error': str(e)
            })
    
    return JsonResponse({'success': False, 'error': '–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è'})


class TelegramDashboardView(View):
    """
    –î–∞—à–±–æ—Ä–¥ Telegram
    
    –í–•–û–î–Ø–©–ò–ï –î–ê–ù–ù–´–ï:
    - request.user: –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    
    –ò–°–¢–û–ß–ù–ò–ö–ò –î–ê–ù–ù–´–•:
    - TelegramUser.objects: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ Telegram
    - AuthAttempt.objects: –ø–æ–ø—ã—Ç–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    
    –û–ë–†–ê–ë–û–¢–ö–ê:
    - –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    - –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞
    
    –í–´–•–û–î–Ø–©–ò–ï –î–ê–ù–ù–´–ï:
    - context: —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–∞—à–±–æ—Ä–¥–∞
    - render: HTML —Å—Ç—Ä–∞–Ω–∏—Ü–∞ 'telegram/dashboard.html'
    
    –°–í–Ø–ó–ò:
    - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç: TelegramUser, AuthAttempt –º–æ–¥–µ–ª–∏
    - –ü–µ—Ä–µ–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤: telegram/dashboard.html
    - –ú–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∏–∑: telegram/ URL patterns
    """
    
    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super().dispatch(*args, **kwargs)
    
    def get(self, request):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞"""
        try:
            telegram_user = TelegramUser.objects.get(user=request.user)
            
            context = {
                'telegram_user': telegram_user,
                'user_info': {
                    'id': telegram_user.telegram_id,
                    'username': telegram_user.username,
                    'first_name': telegram_user.first_name,
                    'last_name': telegram_user.last_name,
                    'phone': telegram_user.phone,
                } if telegram_user.is_authorized else None
            }
            
            return render(request, 'telegram/dashboard.html', context)
            
        except TelegramUser.DoesNotExist:
            return redirect('telegram:auth')


class ChatsListView(View):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤"""
    
    @method_decorator(csrf_exempt)
    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super().dispatch(*args, **kwargs)
    
    def get(self, request):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤"""
        try:
            telegram_user = TelegramUser.objects.get(user=request.user)
            
            if not telegram_user.is_authorized:
                return JsonResponse({
                    'success': False,
                    'error': 'Telegram –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'
                })
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —á–∞—Ç—ã —á–µ—Ä–µ–∑ Telegram –∫–ª–∏–µ–Ω—Ç
            status, chats, error_message = run_telegram_auth_sync(telegram_user.id, "get_chats")
            
            if status == "success":
                return JsonResponse({
                    'success': True,
                    'chats': chats or []
                })
            else:
                return JsonResponse({
                    'success': False,
                    'error': error_message or '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–æ–≤'
                })
                
        except TelegramUser.DoesNotExist:
            return JsonResponse({
                'success': False,
                'error': 'Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
            })
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–æ–≤: {e}")
            return JsonResponse({
                'success': False,
                'error': str(e)
            })


class MessagesListView(View):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞"""
    
    @method_decorator(csrf_exempt)
    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super().dispatch(*args, **kwargs)
    
    def get(self, request, chat_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞"""
        try:
            telegram_user = TelegramUser.objects.get(user=request.user)
            
            if not telegram_user.is_authorized:
                return JsonResponse({
                    'success': False,
                    'error': 'Telegram –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'
                })
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram –∫–ª–∏–µ–Ω—Ç
            status, messages, error_message = run_telegram_auth_sync(
                telegram_user.id, 
                "get_messages", 
                chat_id=chat_id
            )
            
            if status == "success":
                return JsonResponse({
                    'success': True,
                    'messages': messages or [],
                    'chat_title': '–¢–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç'
                })
            else:
                return JsonResponse({
                    'success': False,
                    'error': error_message or '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π'
                })
                
        except TelegramUser.DoesNotExist:
            return JsonResponse({
                'success': False,
                'error': 'Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
            })
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            return JsonResponse({
                'success': False,
                'error': str(e)
            })