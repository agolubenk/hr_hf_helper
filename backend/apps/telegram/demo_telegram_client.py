"""
–î–µ–º–æ Telegram –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã
"""
import qrcode
import logging
import base64
from io import BytesIO
from typing import Optional, Tuple, Dict, Any
from datetime import datetime
from django.utils import timezone

from django.conf import settings
from django.contrib.auth import get_user_model

from .models import TelegramUser, AuthAttempt

logger = logging.getLogger('apps.telegram')
User = get_user_model()


def run_telegram_auth_sync(telegram_user_id: int, action: str, **kwargs):
    """–î–µ–º–æ-–≤–µ—Ä—Å–∏—è –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã"""
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        telegram_user = TelegramUser.objects.get(id=telegram_user_id)
        
        if action == "generate_qr":
            return _generate_demo_qr(telegram_user)
        elif action == "wait_auth":
            timeout = kwargs.get('timeout', 3)
            return _wait_demo_auth(telegram_user, timeout)
        elif action == "handle_2fa":
            password = kwargs.get('password')
            if not password:
                return "error", None, "–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"
            return _handle_demo_2fa(telegram_user, password)
        elif action == "get_chats":
            return _get_demo_chats(telegram_user)
        elif action == "get_messages":
            chat_id = kwargs.get('chat_id')
            if not chat_id:
                return "error", None, "ID —á–∞—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"
            return _get_demo_messages(telegram_user, chat_id)
        else:
            return "error", None, f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}"
            
    except TelegramUser.DoesNotExist:
        return "error", None, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram –Ω–µ –Ω–∞–π–¥–µ–Ω"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è {action}: {e}")
        return "error", None, str(e)


def _generate_demo_qr(telegram_user: TelegramUser):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ–º–æ QR-–∫–æ–¥–∞"""
    try:
        logger.info(f"üéØ –î–ï–ú–û: –°–æ–∑–¥–∞–Ω–∏–µ QR-–∫–æ–¥–∞ –¥–ª—è {telegram_user.user.username}")
        
        # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ URL
        demo_url = f"https://t.me/demo_auth?user={telegram_user.user.username}&session={telegram_user.session_name}"
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥
        qr = qrcode.QRCode(version=1, box_size=10, border=5)
        qr.add_data(demo_url)
        qr.make(fit=True)
        
        img = qr.make_image(fill_color="black", back_color="white")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ bytes
        buffer = BytesIO()
        img.save(buffer, format='PNG')
        qr_data = buffer.getvalue()
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64 –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ JSON
        qr_base64 = base64.b64encode(qr_data).decode('utf-8')
        qr_data_url = f"data:image/png;base64,{qr_base64}"
        
        logger.info(f"üéØ –î–ï–ú–û: QR-–∫–æ–¥ —Å–æ–∑–¥–∞–Ω –¥–ª—è {telegram_user.user.username}")
        return qr_data_url, demo_url, "success"
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–º–æ QR: {e}")
        return None, None, str(e)


def _wait_demo_auth(telegram_user: TelegramUser, timeout: int = 3):
    """–î–µ–º–æ –æ–∂–∏–¥–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        telegram_user.refresh_from_db()
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ –±–∞–∑–µ, —Å—Ä–∞–∑—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö
        if telegram_user.is_authorized:
            logger.info(f"üéØ –î–ï–ú–û: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_user.user.username} —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
            user_data = {
                'id': telegram_user.telegram_id,
                'username': telegram_user.username,
                'first_name': telegram_user.first_name,
                'last_name': telegram_user.last_name,
                'phone': telegram_user.phone,
            }
            return "success", user_data, None
        
        # –í –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º waiting
        logger.info(f"üéØ –î–ï–ú–û: –û–∂–∏–¥–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è {telegram_user.user.username}")
        return "waiting", None, "–û–∂–∏–¥–∞–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è QR-–∫–æ–¥–∞"
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–º–æ –æ–∂–∏–¥–∞–Ω–∏—è: {e}")
        return "error", None, str(e)


def _handle_demo_2fa(telegram_user: TelegramUser, password: str):
    """–î–µ–º–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ 2FA"""
    try:
        logger.info(f"üéØ –î–ï–ú–û: 2FA –∑–∞–ø—Ä–æ—Å –¥–ª—è {telegram_user.user.username}")
        
        # –í –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ –ø—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π –ø–∞—Ä–æ–ª—å
        if password == "demo123":
            # –ò–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º ID
            user_data = {
                'id': 1000000000 + telegram_user.id,  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                'username': f'demo_user_{telegram_user.id}',
                'first_name': 'Demo',
                'last_name': 'User',
                'phone': f'+123456789{telegram_user.id}'
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            telegram_user.is_authorized = True
            telegram_user.telegram_id = user_data['id']
            telegram_user.username = user_data['username']
            telegram_user.first_name = user_data['first_name']
            telegram_user.last_name = user_data['last_name']
            telegram_user.phone = user_data['phone']
            telegram_user.auth_date = timezone.now()
            telegram_user.last_activity = timezone.now()
            telegram_user.save()
            
            logger.info(f"üéØ –î–ï–ú–û: 2FA —É—Å–ø–µ—à–Ω–æ –¥–ª—è {telegram_user.user.username}")
            return "success", user_data, None
        else:
            return "error", None, "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'demo123' –¥–ª—è –¥–µ–º–æ-—Ä–µ–∂–∏–º–∞"
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–º–æ 2FA: {e}")
        return "error", None, str(e)


def _get_demo_chats(telegram_user: TelegramUser):
    """–î–µ–º–æ –ø–æ–ª—É—á–µ–Ω–∏–µ —á–∞—Ç–æ–≤"""
    try:
        if not telegram_user.is_authorized:
            return "error", None, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"
        
        logger.info(f"üéØ –î–ï–ú–û: –ó–∞–ø—Ä–æ—Å —á–∞—Ç–æ–≤ –¥–ª—è {telegram_user.user.username}")
        
        # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ —á–∞—Ç—ã
        demo_chats = [
            {
                'id': '123456789',
                'title': 'Demo Chat 1',
                'type': 'private',
                'last_message': '–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –¥–µ–º–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.',
                'last_message_date': datetime.now().isoformat(),
                'unread_count': 2,
            },
            {
                'id': '987654321',
                'title': 'Demo Group',
                'type': 'group',
                'last_message': '–î–µ–º–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ',
                'last_message_date': datetime.now().isoformat(),
                'unread_count': 0,
            },
            {
                'id': '555666777',
                'title': 'Demo Channel',
                'type': 'channel',
                'last_message': '–ù–æ–≤–æ—Å—Ç–∏ –∏–∑ –¥–µ–º–æ –∫–∞–Ω–∞–ª–∞',
                'last_message_date': datetime.now().isoformat(),
                'unread_count': 5,
            }
        ]
        
        logger.info(f"üéØ –î–ï–ú–û: –í–æ–∑–≤—Ä–∞—â–∞–µ–º {len(demo_chats)} –¥–µ–º–æ —á–∞—Ç–æ–≤")
        return "success", demo_chats, None
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ–º–æ —á–∞—Ç–æ–≤: {e}")
        return "error", None, str(e)


def _get_demo_messages(telegram_user: TelegramUser, chat_id: str):
    """–î–µ–º–æ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        if not telegram_user.is_authorized:
            return "error", None, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"
        
        logger.info(f"üéØ –î–ï–ú–û: –ó–∞–ø—Ä–æ—Å —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞ {chat_id} –æ—Ç {telegram_user.user.username}")
        
        # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        demo_messages = [
            {
                'id': 1,
                'text': '–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –ø–µ—Ä–≤–æ–µ –¥–µ–º–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.',
                'date': datetime.now().isoformat(),
                'is_outgoing': False,
                'sender_id': 123456789,
                'reply_to': None,
            },
            {
                'id': 2,
                'text': '–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ –¥–µ–º–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.',
                'date': datetime.now().isoformat(),
                'is_outgoing': True,
                'sender_id': telegram_user.telegram_id,
                'reply_to': 1,
            },
            {
                'id': 3,
                'text': '–ö–∞–∫ –¥–µ–ª–∞? –í—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!',
                'date': datetime.now().isoformat(),
                'is_outgoing': False,
                'sender_id': 123456789,
                'reply_to': None,
            }
        ]
        
        result = {
            'messages': demo_messages,
            'chat_title': f'Demo Chat {chat_id}',
            'chat_id': chat_id
        }
        
        logger.info(f"üéØ –î–ï–ú–û: –í–æ–∑–≤—Ä–∞—â–∞–µ–º {len(demo_messages)} –¥–µ–º–æ —Å–æ–æ–±—â–µ–Ω–∏–π")
        return "success", result, None
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ–º–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        return "error", None, str(e)
