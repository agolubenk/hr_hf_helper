"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–∞–ª—é—Ç–∞–º–∏ –∏ –∫—É—Ä—Å–∞–º–∏
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –ª–æ–≥–∏–∫—É –∏–∑ services.py –∏ CurrencyRateService
"""
from decimal import Decimal
from typing import Dict, Any, Optional
from datetime import datetime, timedelta
import requests


class CurrencyService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–∞–ª—é—Ç–∞–º–∏ –∏ –∫—É—Ä—Å–∞–º–∏"""
    
    # –û—Å–Ω–æ–≤–Ω–æ–π API –ù–ë–†–ë
    NBRB_BASE_URL = "https://api.nbrb.by/exrates/rates/{currency}?parammode=2"
    
    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ API (—Ç–æ–ª—å–∫–æ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏)
    EXCHANGERATE_API = "https://api.exchangerate-api.com/v4/latest/BYN"
    OPEN_ER_API = "https://open.er-api.com/v6/latest/BYN"
    
    @staticmethod
    def get_latest_rates() -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç.
        –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: —Ç–æ–ª—å–∫–æ –ù–ë–†–ë (–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã)
        –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
        """
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –∏–∑ –ù–ë–†–ë
        nbrb_rates = CurrencyService._get_nbrb_rates()
        
        # –ï—Å–ª–∏ –ù–ë–†–ë –¥–∞–ª –∫—É—Ä—Å—ã - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ö
        if nbrb_rates and any(rate and rate.get("rate") for rate in nbrb_rates.values() if rate and rate.get("rate") != 1.0):
            return nbrb_rates
        
        # –ï—Å–ª–∏ –ù–ë–†–ë –Ω–µ –¥–∞–ª –∫—É—Ä—Å–æ–≤ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º fallback —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–∞—Ç—É—Å–µ
        print("‚ö†Ô∏è  –ù–ë–†–ë –Ω–µ –¥–∞–ª –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è")
        print("üí° –ö—É—Ä—Å—ã –±—É–¥—É—Ç –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ–≥–¥–∞ –ù–ë–†–ë –∏—Ö –æ–ø—É–±–ª–∏–∫—É–µ—Ç")
        
        return CurrencyService._get_fallback_rates_with_info()
    
    @staticmethod
    def _get_nbrb_rates() -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –∏–∑ API –ù–ë–†–ë.
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∫—É—Ä—Å–∞–º–∏ –≤–∞–ª—é—Ç –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã –¥–ª—è USD –∏ PLN
            usd_rate = CurrencyService._fetch_nbrb_rate("USD")
            pln_rate = CurrencyService._fetch_nbrb_rate("PLN")
            
            if usd_rate and pln_rate:
                return {
                    "USD": usd_rate,
                    "PLN": pln_rate,
                    "BYN": {"rate": 1.0, "scale": 1, "source": "base_currency"}
                }
            
            return None
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –ù–ë–†–ë: {e}")
            return None
    
    @staticmethod
    def _fetch_nbrb_rate(currency: str) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∫—É—Ä—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–∞–ª—é—Ç—ã –∏–∑ –ù–ë–†–ë.
        
        Args:
            currency: –ö–æ–¥ –≤–∞–ª—é—Ç—ã (USD, PLN)
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∫—É—Ä—Å–∞ –∏–ª–∏ None
        """
        try:
            url = CurrencyService.NBRB_BASE_URL.format(currency=currency)
            response = requests.get(url, timeout=10)
            response.raise_for_status()
            
            data = response.json()
            
            return {
                "rate": Decimal(str(data.get("Cur_OfficialRate", 0))),
                "scale": data.get("Cur_Scale", 1),
                "source": "nbrb",
                "fetched_at": datetime.now().isoformat()
            }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ {currency}: {e}")
            return None
    
    @staticmethod
    def _get_fallback_rates_with_info() -> Dict[str, Any]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç fallback –∫—É—Ä—Å—ã –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ù–ë–†–ë.
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å fallback –∫—É—Ä—Å–∞–º–∏
        """
        return {
            "USD": {
                "rate": Decimal("3.25"),  # –ü—Ä–∏–º–µ—Ä–Ω—ã–π –∫—É—Ä—Å
                "scale": 1,
                "source": "fallback",
                "status": "nbrb_not_available",
                "fetched_at": datetime.now().isoformat()
            },
            "PLN": {
                "rate": Decimal("0.85"),  # –ü—Ä–∏–º–µ—Ä–Ω—ã–π –∫—É—Ä—Å
                "scale": 1,
                "source": "fallback",
                "status": "nbrb_not_available",
                "fetched_at": datetime.now().isoformat()
            },
            "BYN": {
                "rate": Decimal("1.0"),
                "scale": 1,
                "source": "base_currency",
                "fetched_at": datetime.now().isoformat()
            }
        }
    
    @staticmethod
    def convert_amount(amount: Decimal, from_currency: str, to_currency: str) -> Dict[str, Any]:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å—É–º–º—É –∏–∑ –æ–¥–Ω–æ–π –≤–∞–ª—é—Ç—ã –≤ –¥—Ä—É–≥—É—é.
        
        Args:
            amount: –°—É–º–º–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
            from_currency: –ò—Å—Ö–æ–¥–Ω–∞—è –≤–∞–ª—é—Ç–∞
            to_currency: –¶–µ–ª–µ–≤–∞—è –≤–∞–ª—é—Ç–∞
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        """
        if from_currency == to_currency:
            return {
                "original_amount": amount,
                "converted_amount": amount,
                "from_currency": from_currency,
                "to_currency": to_currency,
                "rate": Decimal("1.0"),
                "conversion_type": "same_currency"
            }
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã
        rates = CurrencyService.get_latest_rates()
        
        if not rates:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ BYN –∫–∞–∫ –±–∞–∑–æ–≤—É—é –≤–∞–ª—é—Ç—É
        if from_currency == "BYN":
            # BYN -> –¥—Ä—É–≥–∞—è –≤–∞–ª—é—Ç–∞
            target_rate = rates.get(to_currency, {}).get("rate", Decimal("1.0"))
            converted_amount = amount / target_rate
            rate = Decimal("1.0") / target_rate
        elif to_currency == "BYN":
            # –¥—Ä—É–≥–∞—è –≤–∞–ª—é—Ç–∞ -> BYN
            source_rate = rates.get(from_currency, {}).get("rate", Decimal("1.0"))
            converted_amount = amount * source_rate
            rate = source_rate
        else:
            # –¥—Ä—É–≥–∞—è –≤–∞–ª—é—Ç–∞ -> –¥—Ä—É–≥–∞—è –≤–∞–ª—é—Ç–∞ (—á–µ—Ä–µ–∑ BYN)
            source_rate = rates.get(from_currency, {}).get("rate", Decimal("1.0"))
            target_rate = rates.get(to_currency, {}).get("rate", Decimal("1.0"))
            
            # –°–Ω–∞—á–∞–ª–∞ –≤ BYN, –ø–æ—Ç–æ–º –≤ —Ü–µ–ª–µ–≤—É—é –≤–∞–ª—é—Ç—É
            byn_amount = amount * source_rate
            converted_amount = byn_amount / target_rate
            rate = source_rate / target_rate
        
        return {
            "original_amount": amount,
            "converted_amount": converted_amount.quantize(Decimal('0.01')),
            "from_currency": from_currency,
            "to_currency": to_currency,
            "rate": rate.quantize(Decimal('0.000001')),
            "conversion_type": "currency_conversion",
            "rates_used": {
                "source_rate": rates.get(from_currency, {}).get("rate"),
                "target_rate": rates.get(to_currency, {}).get("rate")
            }
        }
    
    @staticmethod
    def get_currency_info() -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞–ª—é—Ç–∞—Ö –∏ –∏—Ö —Å—Ç–∞—Ç—É—Å–µ.
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤–∞–ª—é—Ç–∞—Ö
        """
        rates = CurrencyService.get_latest_rates()
        
        info = {
            "currencies": {},
            "last_update": datetime.now().isoformat(),
            "status": "success"
        }
        
        for currency, rate_data in rates.items():
            info["currencies"][currency] = {
                "rate": float(rate_data.get("rate", 0)),
                "scale": rate_data.get("scale", 1),
                "source": rate_data.get("source", "unknown"),
                "status": rate_data.get("status", "active"),
                "fetched_at": rate_data.get("fetched_at")
            }
        
        return info
    
    @staticmethod
    def update_currency_rates() -> Dict[str, Any]:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
        
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        """
        from ..models import CurrencyRate
        
        try:
            rates = CurrencyService.get_latest_rates()
            
            if not rates:
                return {
                    "success": False,
                    "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç",
                    "updated_count": 0
                }
            
            updated_count = 0
            
            for currency, rate_data in rates.items():
                if currency == "BYN":
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–∞–∑–æ–≤—É—é –≤–∞–ª—é—Ç—É
                
                rate_obj, created = CurrencyRate.objects.get_or_create(
                    code=currency,
                    defaults={
                        "rate": rate_data.get("rate", Decimal("0")),
                        "scale": rate_data.get("scale", 1),
                        "fetched_at": datetime.now()
                    }
                )
                
                if not created:
                    rate_obj.rate = rate_data.get("rate", Decimal("0"))
                    rate_obj.scale = rate_data.get("scale", 1)
                    rate_obj.fetched_at = datetime.now()
                    rate_obj.save()
                
                updated_count += 1
            
            return {
                "success": True,
                "message": f"–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã",
                "updated_count": updated_count,
                "rates": rates
            }
            
        except Exception as e:
            return {
                "success": False,
                "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤: {str(e)}",
                "updated_count": 0
            }
