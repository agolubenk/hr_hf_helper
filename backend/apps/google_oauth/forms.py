from django import forms
from django.utils.translation import gettext_lazy as _
from django.utils import timezone
from .models import SyncSettings, Invite, HRScreening


class SyncSettingsForm(forms.ModelForm):
    """–§–æ—Ä–º–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    
    class Meta:
        model = SyncSettings
        fields = ['auto_sync_calendar', 'auto_sync_drive', 'sync_interval', 'max_events', 'max_files']
        widgets = {
            'auto_sync_calendar': forms.CheckboxInput(attrs={
                'class': 'form-check-input'
            }),
            'auto_sync_drive': forms.CheckboxInput(attrs={
                'class': 'form-check-input'
            }),
            'sync_interval': forms.Select(attrs={
                'class': 'form-select'
            }),
            'max_events': forms.NumberInput(attrs={
                'class': 'form-control'
            }),
            'max_files': forms.NumberInput(attrs={
                'class': 'form-control'
            }),
        }
        labels = {
            'auto_sync_calendar': '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è',
            'auto_sync_drive': '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Drive',
            'sync_interval': '–ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏',
            'max_events': '–ú–∞–∫—Å–∏–º—É–º —Å–æ–±—ã—Ç–∏–π',
            'max_files': '–ú–∞–∫—Å–∏–º—É–º —Ñ–∞–π–ª–æ–≤',
        }
        help_texts = {
            'auto_sync_calendar': '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è',
            'auto_sync_drive': '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã Drive',
            'sync_interval': '–ö–∞–∫ —á–∞—Å—Ç–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ',
            'max_events': '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏',
            'max_files': '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏',
        }
    
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        # –ò–∑–º–µ–Ω—è–µ–º –ø–æ–ª–µ sync_interval –Ω–∞ ChoiceField –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
        self.fields['sync_interval'] = forms.ChoiceField(
            choices=[
                (15, '15 –º–∏–Ω—É—Ç'),
                (30, '30 –º–∏–Ω—É—Ç'),
                (60, '1 —á–∞—Å'),
                (180, '3 —á–∞—Å–∞'),
                (360, '6 —á–∞—Å–æ–≤'),
                (720, '12 —á–∞—Å–æ–≤'),
                (1440, '24 —á–∞—Å–∞'),
            ],
            widget=forms.Select(attrs={
                'class': 'form-select'
            }),
            label='–ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏',
            help_text='–ö–∞–∫ —á–∞—Å—Ç–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ'
        )


class InviteForm(forms.ModelForm):
    """–§–æ—Ä–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–∞–π—Ç–∞"""
    
    class Meta:
        model = Invite
        fields = ['candidate_url', 'interview_datetime']
        widgets = {
            'candidate_url': forms.URLInput(attrs={
                'class': 'form-control',
                'placeholder': 'https://huntflow.ru/my/org#/vacancy/123/filter/456/id/789',
                'required': True
            }),
            'interview_datetime': forms.DateTimeInput(attrs={
                'class': 'form-control',
                'type': 'datetime-local',
                'required': True
            })
        }
        labels = {
            'candidate_url': _('–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞'),
            'interview_datetime': _('–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∏–Ω—Ç–µ—Ä–≤—å—é')
        }
        help_texts = {
            'candidate_url': _('–í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∏–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Huntflow. –§–æ—Ä–º–∞—Ç: https://huntflow.ru/my/org#/vacancy/[id]/filter/[status]/id/[candidate_id]'),
            'interview_datetime': _('–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤—å—é')
        }
    
    def __init__(self, *args, **kwargs):
        self.user = kwargs.pop('user', None)
        super().__init__(*args, **kwargs)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–∞—Ç—É –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        now = timezone.now()
        self.fields['interview_datetime'].widget.attrs['min'] = now.strftime('%Y-%m-%dT%H:%M')
    
    def clean_candidate_url(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è URL –∫–∞–Ω–¥–∏–¥–∞—Ç–∞"""
        candidate_url = self.cleaned_data.get('candidate_url')
        
        if not candidate_url:
            raise forms.ValidationError(_('–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞'))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL —Å–æ–¥–µ—Ä–∂–∏—Ç /vacancy/
        if '/vacancy/' not in candidate_url:
            raise forms.ValidationError(
                _('URL –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å /vacancy/ –∏ –±—ã—Ç—å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∏–∑ Huntflow')
            )
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è ID –∞–∫–∫–∞—É–Ω—Ç–∞ —É–±—Ä–∞–Ω–∞ - —Å–∏—Å—Ç–µ–º–∞ —Å–∞–º–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ API
        
        return candidate_url
    
    def clean_interview_datetime(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –∏–Ω—Ç–µ—Ä–≤—å—é"""
        interview_datetime = self.cleaned_data.get('interview_datetime')
        
        if not interview_datetime:
            raise forms.ValidationError(_('–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∏–Ω—Ç–µ—Ä–≤—å—é –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'))
        
        # –ï—Å–ª–∏ –≤—Ä–µ–º—è –±–µ–∑ timezone (—á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å datetime-local input),
        # —Å—á–∏—Ç–∞–µ–º –µ–≥–æ –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ Minsk
        if interview_datetime.tzinfo is None:
            import pytz
            minsk_tz = pytz.timezone('Europe/Minsk')
            interview_datetime = minsk_tz.localize(interview_datetime)
            print(f"üîç FORM: –í—Ä–µ–º—è –±–µ–∑ timezone, –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ Minsk: {interview_datetime}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
        now = timezone.now()
        if interview_datetime < now:
            raise forms.ValidationError(_('–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∏–Ω—Ç–µ—Ä–≤—å—é –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º'))
        
        return interview_datetime
    
    def save(self, commit=True):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω–≤–∞–π—Ç —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
        print(f"üîç FORM_SAVE: –ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω–≤–∞–π—Ç–∞...")
        invite = super().save(commit=False)
        invite.user = self.user
        print(f"üîç FORM_SAVE: –ò–Ω–≤–∞–π—Ç —Å–æ–∑–¥–∞–Ω, user: {invite.user}")
        
        if commit:
            try:
                # –ü–∞—Ä—Å–∏–º URL –∏ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                print(f"üîç FORM_SAVE: –ü–∞—Ä—Å–∏–º URL...")
                success, message = invite.parse_candidate_url()
                if not success:
                    print(f"‚ùå FORM_SAVE: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ URL: {message}")
                    raise forms.ValidationError(f'–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ URL: {message}')
                print(f"‚úÖ FORM_SAVE: URL —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ –∏ –≤–∞–∫–∞–Ω—Å–∏–∏
                print(f"üîç FORM_SAVE: –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ...")
                success, message = invite.get_candidate_info()
                if not success:
                    print(f"‚ùå FORM_SAVE: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ: {message}")
                    raise forms.ValidationError(f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ: {message}')
                print(f"‚úÖ FORM_SAVE: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ –ø–æ–ª—É—á–µ–Ω–∞")
                
                print(f"üîç FORM_SAVE: –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞–∫–∞–Ω—Å–∏–∏...")
                success, message = invite.get_vacancy_info()
                if not success:
                    print(f"‚ùå FORM_SAVE: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞–∫–∞–Ω—Å–∏–∏: {message}")
                    raise forms.ValidationError(f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞–∫–∞–Ω—Å–∏–∏: {message}')
                print(f"‚úÖ FORM_SAVE: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ–ª—É—á–µ–Ω–∞")
                
                # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤ Google Drive
                print(f"üîç FORM_SAVE: –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É Google Drive...")
                success, message = invite.create_google_drive_structure()
                if not success:
                    print(f"‚ùå FORM_SAVE: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Google Drive: {message}")
                    raise forms.ValidationError(f'–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Google Drive: {message}')
                print(f"‚úÖ FORM_SAVE: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ Google Drive —Å–æ–∑–¥–∞–Ω–∞")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º scorecard
                print(f"üîç FORM_SAVE: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º scorecard...")
                success, message = invite.process_scorecard()
                if not success:
                    print(f"‚ùå FORM_SAVE: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ scorecard: {message}")
                    raise forms.ValidationError(f'–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ scorecard: {message}')
                print(f"‚úÖ FORM_SAVE: Scorecard –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
                
                invite.status = 'sent'
                invite.save()
                print(f"‚úÖ FORM_SAVE: –ò–Ω–≤–∞–π—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Å ID: {invite.id}")
                
            except Exception as e:
                print(f"‚ùå FORM_SAVE: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ save(): {e}")
                import traceback
                traceback.print_exc()
                raise
        
        return invite


class InviteCombinedForm(forms.ModelForm):
    """–§–æ—Ä–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–∞–π—Ç–∞ —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–º –ø–æ–ª–µ–º –¥–ª—è —Å—Å—ã–ª–∫–∏ –∏ –¥–∞—Ç—ã-–≤—Ä–µ–º–µ–Ω–∏"""
    
    combined_data = forms.CharField(
        widget=forms.Textarea(attrs={
            'class': 'form-control',
            'rows': 5,
            'placeholder': '–í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∏ –¥–∞—Ç—É-–≤—Ä–µ–º—è –≤ –æ–¥–Ω–æ–º –ø–æ–ª–µ...\n\n–ü—Ä–∏–º–µ—Ä:\nhttps://huntflow.ru/my/org#/vacancy/123/filter/456/id/789\n2025-09-15 14:00',
            'required': True
        }),
        label=_('–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∏ –¥–∞—Ç–∞-–≤—Ä–µ–º—è –∏–Ω—Ç–µ—Ä–≤—å—é'),
        help_text=_('–í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∏ –¥–∞—Ç—É-–≤—Ä–µ–º—è –∏–Ω—Ç–µ—Ä–≤—å—é –≤ –æ–¥–Ω–æ–º –ø–æ–ª–µ. –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ—á–µ—Ç —Å—Å—ã–ª–∫—É –∏ –¥–∞—Ç—É.')
    )
    
    class Meta:
        model = Invite
        fields = ['candidate_url', 'interview_datetime']
        widgets = {
            'candidate_url': forms.HiddenInput(attrs={'required': False}),
            'interview_datetime': forms.HiddenInput(attrs={'required': False})
        }
    
    def __init__(self, *args, **kwargs):
        self.user = kwargs.pop('user', None)
        super().__init__(*args, **kwargs)
        
        # –î–µ–ª–∞–µ–º —Å–∫—Ä—ã—Ç—ã–µ –ø–æ–ª—è –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏
        self.fields['candidate_url'].required = False
        self.fields['interview_datetime'].required = False
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–∞—Ç—É –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        now = timezone.now()
        if 'interview_datetime' in self.fields:
            self.fields['interview_datetime'].widget.attrs['min'] = now.strftime('%Y-%m-%dT%H:%M')
    
    def clean_combined_data(self):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Å—ã–ª–∫—É –∏ –¥–∞—Ç—É-–≤—Ä–µ–º—è –∏–∑ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—è"""
        import re
        import pytz
        
        combined_data = self.cleaned_data.get('combined_data', '').strip()
        
        print(f"üîç CLEAN_COMBINED_DATA: combined_data = '{combined_data}'")
        
        if not combined_data:
            raise forms.ValidationError(_('–ü–æ–ª–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'))
        
        # –ò—â–µ–º URL –≤ —Ç–µ–∫—Å—Ç–µ
        url_pattern = r'https?://[^\s]+'
        urls = re.findall(url_pattern, combined_data)
        
        print(f"üîç CLEAN_COMBINED_DATA: –ù–∞–π–¥–µ–Ω–æ URLs: {urls}")
        
        if not urls:
            raise forms.ValidationError(_('–ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤ —Ç–µ–∫—Å—Ç–µ'))
        
        candidate_url = urls[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è URL
        if '/vacancy/' not in candidate_url:
            raise forms.ValidationError(
                _('URL –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å /vacancy/ –∏ –±—ã—Ç—å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∏–∑ Huntflow')
            )
        
        print(f"‚úÖ CLEAN_COMBINED_DATA: URL –∏–∑–≤–ª–µ—á–µ–Ω: {candidate_url}")
        print(f"‚úÖ CLEAN_COMBINED_DATA: –í–µ—Å—å —Ç–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è Gemini: '{combined_data}'")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ URL –≤ —Å–∫—Ä—ã—Ç–æ–µ –ø–æ–ª–µ, –≤–µ—Å—å —Ç–µ–∫—Å—Ç –æ—Å—Ç–∞–µ—Ç—Å—è –¥–ª—è Gemini
        self.cleaned_data['candidate_url'] = candidate_url

        return combined_data
    
    def clean(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã - —Ç–æ–ª—å–∫–æ –∏–∑–≤–ª–µ–∫–∞–µ–º URL, –¥–∞—Ç—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç Gemini"""
        cleaned_data = super().clean()
        
        print(f"üîç COMBINED_FORM_CLEAN: –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É —Ñ–æ—Ä–º—ã")
        print(f"üîç COMBINED_FORM_CLEAN: cleaned_data keys: {list(cleaned_data.keys())}")
        print(f"üîç COMBINED_FORM_CLEAN: combined_data: {cleaned_data.get('combined_data', '–ù–ï–¢')}")
        
        # URL —É–∂–µ –∏–∑–≤–ª–µ—á–µ–Ω –≤ clean_combined_data, –¥–∞—Ç—É –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç Gemini
        print(f"üîç COMBINED_FORM_CLEAN: URL –∏–∑–≤–ª–µ—á–µ–Ω, –¥–∞—Ç—É –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç Gemini AI")
        print(f"üîç COMBINED_FORM_CLEAN: –§–∏–Ω–∞–ª—å–Ω—ã–µ cleaned_data: {cleaned_data}")
        return cleaned_data
    
    def save(self, commit=True):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω–≤–∞–π—Ç —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
        print(f"üîç COMBINED_FORM_SAVE: –ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω–≤–∞–π—Ç–∞...")
        invite = super().save(commit=False)
        invite.user = self.user
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
        if 'combined_data' in self.cleaned_data:
            invite.original_form_data = self.cleaned_data['combined_data']
            print(f"üîç COMBINED_FORM_SAVE: –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {invite.original_form_data[:100]}...")
        
        print(f"üîç COMBINED_FORM_SAVE: –ò–Ω–≤–∞–π—Ç —Å–æ–∑–¥–∞–Ω, user: {invite.user}")
        
        if commit:
            try:
                # –ü–∞—Ä—Å–∏–º URL –∏ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                print(f"üîç COMBINED_FORM_SAVE: –ü–∞—Ä—Å–∏–º URL...")
                success, message = invite.parse_candidate_url()
                if not success:
                    print(f"‚ùå COMBINED_FORM_SAVE: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ URL: {message}")
                    raise forms.ValidationError(f'–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ URL: {message}')
                print(f"‚úÖ COMBINED_FORM_SAVE: URL —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ –∏ –≤–∞–∫–∞–Ω—Å–∏–∏
                print(f"üîç COMBINED_FORM_SAVE: –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ...")
                success, message = invite.get_candidate_info()
                if not success:
                    print(f"‚ùå COMBINED_FORM_SAVE: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ: {message}")
                    raise forms.ValidationError(f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ: {message}')
                print(f"‚úÖ COMBINED_FORM_SAVE: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ –ø–æ–ª—É—á–µ–Ω–∞")
                
                print(f"üîç COMBINED_FORM_SAVE: –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞–∫–∞–Ω—Å–∏–∏...")
                success, message = invite.get_vacancy_info()
                if not success:
                    print(f"‚ùå COMBINED_FORM_SAVE: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞–∫–∞–Ω—Å–∏–∏: {message}")
                    raise forms.ValidationError(f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞–∫–∞–Ω—Å–∏–∏: {message}')
                print(f"‚úÖ COMBINED_FORM_SAVE: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ–ª—É—á–µ–Ω–∞")
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å –ø–æ–º–æ—â—å—é Gemini AI (—ç—Ç–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –¥–∞—Ç—É –∏–Ω—Ç–µ—Ä–≤—å—é)
                print(f"ü§ñ COMBINED_FORM_SAVE: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å –ø–æ–º–æ—â—å—é Gemini AI...")
                success, message = invite.analyze_time_with_gemini()
                if not success:
                    print(f"‚ùå COMBINED_FORM_SAVE: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –≤—Ä–µ–º–µ–Ω–∏ —Å Gemini: {message}")
                    raise forms.ValidationError(f'–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å Gemini: {message}')
                else:
                    print(f"‚úÖ COMBINED_FORM_SAVE: –í—Ä–µ–º—è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é Gemini AI")
                    # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏–∑ –æ—Ç–≤–µ—Ç–∞ Gemini
                    if invite.gemini_suggested_datetime:
                        try:
                            from datetime import datetime
                            import pytz
                            minsk_tz = pytz.timezone('Europe/Minsk')
                            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY HH:MM
                            parsed_datetime = datetime.strptime(invite.gemini_suggested_datetime, '%d.%m.%Y %H:%M')
                            invite.interview_datetime = minsk_tz.localize(parsed_datetime)
                            print(f"‚úÖ COMBINED_FORM_SAVE: –î–∞—Ç–∞ –∏–Ω—Ç–µ—Ä–≤—å—é —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ Gemini: {invite.interview_datetime}")
                        except Exception as e:
                            print(f"‚ùå COMBINED_FORM_SAVE: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã –æ—Ç Gemini: {e}")
                            raise forms.ValidationError(f'–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã –æ—Ç Gemini: {e}')
                    else:
                        print(f"‚ùå COMBINED_FORM_SAVE: Gemini –Ω–µ –≤–µ—Ä–Ω—É–ª –≤—Ä–µ–º—è")
                        raise forms.ValidationError('Gemini –Ω–µ –≤–µ—Ä–Ω—É–ª –≤—Ä–µ–º—è –¥–ª—è –∏–Ω—Ç–µ—Ä–≤—å—é')
                
                # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤ Google Drive
                print(f"üîç COMBINED_FORM_SAVE: –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É Google Drive...")
                success, message = invite.create_google_drive_structure()
                if not success:
                    print(f"‚ùå COMBINED_FORM_SAVE: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Google Drive: {message}")
                    raise forms.ValidationError(f'–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Google Drive: {message}')
                print(f"‚úÖ COMBINED_FORM_SAVE: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ Google Drive —Å–æ–∑–¥–∞–Ω–∞")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º scorecard
                print(f"üîç COMBINED_FORM_SAVE: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º scorecard...")
                success, message = invite.process_scorecard()
                if not success:
                    print(f"‚ùå COMBINED_FORM_SAVE: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ scorecard: {message}")
                    raise forms.ValidationError(f'–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ scorecard: {message}')
                print(f"‚úÖ COMBINED_FORM_SAVE: Scorecard –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
                
                invite.status = 'sent'
                invite.save()
                print(f"‚úÖ COMBINED_FORM_SAVE: –ò–Ω–≤–∞–π—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Å ID: {invite.id}")
                
            except Exception as e:
                print(f"‚ùå COMBINED_FORM_SAVE: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ save(): {e}")
                import traceback
                traceback.print_exc()
                raise
        
        return invite


class InviteUpdateForm(forms.ModelForm):
    """–§–æ—Ä–º–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω–≤–∞–π—Ç–∞"""
    
    class Meta:
        model = Invite
        fields = ['status', 'interview_datetime']
        widgets = {
            'status': forms.Select(attrs={
                'class': 'form-select'
            }),
            'interview_datetime': forms.DateTimeInput(attrs={
                'class': 'form-control',
                'type': 'datetime-local'
            })
        }
        labels = {
            'status': _('–°—Ç–∞—Ç—É—Å'),
            'interview_datetime': _('–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∏–Ω—Ç–µ—Ä–≤—å—é')
        }
    
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–∞—Ç—É –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        now = timezone.now()
        self.fields['interview_datetime'].widget.attrs['min'] = now.strftime('%Y-%m-%dT%H:%M')
    
    def clean_interview_datetime(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –∏–Ω—Ç–µ—Ä–≤—å—é"""
        interview_datetime = self.cleaned_data.get('interview_datetime')
        
        if not interview_datetime:
            raise forms.ValidationError(_('–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∏–Ω—Ç–µ—Ä–≤—å—é –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'))
        
        # –ï—Å–ª–∏ –≤—Ä–µ–º—è –±–µ–∑ timezone (—á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å datetime-local input),
        # —Å—á–∏—Ç–∞–µ–º –µ–≥–æ –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ Minsk
        if interview_datetime.tzinfo is None:
            import pytz
            minsk_tz = pytz.timezone('Europe/Minsk')
            interview_datetime = minsk_tz.localize(interview_datetime)
            print(f"üîç FORM_UPDATE: –í—Ä–µ–º—è –±–µ–∑ timezone, –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ Minsk: {interview_datetime}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
        now = timezone.now()
        if interview_datetime < now:
            raise forms.ValidationError(_('–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∏–Ω—Ç–µ—Ä–≤—å—é –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º'))
        
        return interview_datetime


class CalendarEventSearchForm(forms.Form):
    """–§–æ—Ä–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
    
    search = forms.CharField(
        max_length=100,
        required=False,
        widget=forms.TextInput(attrs={
            'class': 'form-control',
            'placeholder': '–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏—é...'
        }),
        label='–ü–æ–∏—Å–∫'
    )
    
    date_from = forms.DateField(
        required=False,
        widget=forms.DateInput(attrs={
            'class': 'form-control',
            'type': 'date'
        }),
        label='–î–∞—Ç–∞ –æ—Ç'
    )
    
    date_to = forms.DateField(
        required=False,
        widget=forms.DateInput(attrs={
            'class': 'form-control',
            'type': 'date'
        }),
        label='–î–∞—Ç–∞ –¥–æ'
    )
    
    


class DriveFileSearchForm(forms.Form):
    """–§–æ—Ä–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ Google Drive"""
    
    search = forms.CharField(
        max_length=100,
        required=False,
        widget=forms.TextInput(attrs={
            'class': 'form-control',
            'placeholder': '–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ñ–∞–π–ª–∞...'
        }),
        label='–ü–æ–∏—Å–∫'
    )
    
    
    
    is_shared = forms.ChoiceField(
        choices=[
            ('', '–í—Å–µ'),
            ('true', '–° –æ–±—â–∏–º –¥–æ—Å—Ç—É–ø–æ–º'),
            ('false', '–ë–µ–∑ –æ–±—â–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞'),
        ],
        required=False,
        widget=forms.Select(attrs={
            'class': 'form-select'
        }),
        label='–û–±—â–∏–π –¥–æ—Å—Ç—É–ø'
    )
    
    shared_with_me = forms.ChoiceField(
        choices=[
            ('', '–í—Å–µ'),
            ('true', '–ü–æ–¥–µ–ª–∏–ª–∏—Å—å —Å–æ –º–Ω–æ–π'),
            ('false', '–ú–æ–∏ —Ñ–∞–π–ª—ã'),
        ],
        required=False,
        widget=forms.Select(attrs={
            'class': 'form-select'
        }),
        label='–í–ª–∞–¥–µ–ª–µ—Ü'
    )


class HRScreeningForm(forms.ModelForm):
    """–§–æ—Ä–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è HR-—Å–∫—Ä–∏–Ω–∏–Ω–≥–∞"""
    
    class Meta:
        model = HRScreening
        fields = ['input_data']
        widgets = {
            'input_data': forms.Textarea(attrs={
                'class': 'form-control',
                'rows': 10,
                'placeholder': '–í—Å—Ç–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è HR-—Å–∫—Ä–∏–Ω–∏–Ω–≥–∞...\n\n–ü—Ä–∏–º–µ—Ä:\nhttps://sandbox.huntflow.dev/my/org[–≤–∞—à_org_id]#/vacancy/3/filter/workon/id/17\n\n–ö–∞–Ω–¥–∏–¥–∞—Ç: –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤\n–û–∂–∏–¥–∞–Ω–∏—è –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–µ: 150,000 - 200,000 —Ä—É–±\n–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: 3 –≥–æ–¥–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: Python, Django, PostgreSQL\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ...',
                'required': True
            })
        }
        labels = {
            'input_data': _('–î–∞–Ω–Ω—ã–µ –¥–ª—è HR-—Å–∫—Ä–∏–Ω–∏–Ω–≥–∞')
        }
        help_texts = {
            'input_data': _('–í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∏ –ª—é–±—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ—á–µ—Ç —Å—Å—ã–ª–∫—É –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é AI.')
        }
    
    def __init__(self, *args, **kwargs):
        self.user = kwargs.pop('user', None)
        super().__init__(*args, **kwargs)
    
    def clean_input_data(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        input_data = self.cleaned_data.get('input_data', '').strip()
        
        if not input_data:
            raise forms.ValidationError(_('–ü–æ–ª–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ —Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞ –Ω–∞ Huntflow
        if 'huntflow' not in input_data.lower() and '/vacancy/' not in input_data:
            raise forms.ValidationError(
                _('–í —Ç–µ–∫—Å—Ç–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤ Huntflow (—Å–æ–¥–µ—Ä–∂–∞—â–∞—è /vacancy/)')
            )
        
        return input_data
    
    def save(self, commit=True):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç HR-—Å–∫—Ä–∏–Ω–∏–Ω–≥ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
        print(f"üîç HR_SCREENING_FORM_SAVE: –ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ HR-—Å–∫—Ä–∏–Ω–∏–Ω–≥–∞...")
        hr_screening = super().save(commit=False)
        hr_screening.user = self.user
        print(f"üîç HR_SCREENING_FORM_SAVE: HR-—Å–∫—Ä–∏–Ω–∏–Ω–≥ —Å–æ–∑–¥–∞–Ω, user: {hr_screening.user}")
        
        if commit:
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º URL –∏–∑ —Ç–µ–∫—Å—Ç–∞
                print(f"üîç HR_SCREENING_FORM_SAVE: –ò–∑–≤–ª–µ–∫–∞–µ–º URL...")
                success, message = hr_screening._extract_url_from_text()
                if not success:
                    print(f"‚ùå HR_SCREENING_FORM_SAVE: –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è URL: {message}")
                    raise forms.ValidationError(f'–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è URL: {message}')
                print(f"‚úÖ HR_SCREENING_FORM_SAVE: URL –∏–∑–≤–ª–µ—á–µ–Ω: {hr_screening.candidate_url}")
                
                # –ü–∞—Ä—Å–∏–º URL –∏ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                print(f"üîç HR_SCREENING_FORM_SAVE: –ü–∞—Ä—Å–∏–º URL...")
                success, message = hr_screening.parse_candidate_url()
                if not success:
                    print(f"‚ùå HR_SCREENING_FORM_SAVE: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ URL: {message}")
                    raise forms.ValidationError(f'–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ URL: {message}')
                print(f"‚úÖ HR_SCREENING_FORM_SAVE: URL —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ –∏ –≤–∞–∫–∞–Ω—Å–∏–∏
                print(f"üîç HR_SCREENING_FORM_SAVE: –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ...")
                success, message = hr_screening.get_candidate_info()
                if not success:
                    print(f"‚ùå HR_SCREENING_FORM_SAVE: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ: {message}")
                    raise forms.ValidationError(f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ: {message}')
                print(f"‚úÖ HR_SCREENING_FORM_SAVE: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ –ø–æ–ª—É—á–µ–Ω–∞")
                hr_screening.save()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                
                print(f"üîç HR_SCREENING_FORM_SAVE: –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞–∫–∞–Ω—Å–∏–∏...")
                success, message = hr_screening.get_vacancy_info()
                if not success:
                    print(f"‚ùå HR_SCREENING_FORM_SAVE: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞–∫–∞–Ω—Å–∏–∏: {message}")
                    raise forms.ValidationError(f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞–∫–∞–Ω—Å–∏–∏: {message}')
                print(f"‚úÖ HR_SCREENING_FORM_SAVE: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ–ª—É—á–µ–Ω–∞")
                hr_screening.save()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é Gemini AI
                print(f"ü§ñ HR_SCREENING_FORM_SAVE: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é Gemini AI...")
                
                success, message = hr_screening.analyze_with_gemini()
                if not success:
                    print(f"‚ùå HR_SCREENING_FORM_SAVE: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å Gemini: {message}")
                    raise forms.ValidationError(f'–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å Gemini: {message}')
                else:
                    print(f"‚úÖ HR_SCREENING_FORM_SAVE: –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —Å –ø–æ–º–æ—â—å—é Gemini AI")
                
                hr_screening.save()
                print(f"‚úÖ HR_SCREENING_FORM_SAVE: HR-—Å–∫—Ä–∏–Ω–∏–Ω–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Å ID: {hr_screening.id}")
                print(f"üîç HR_SCREENING_FORM_SAVE: –î–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: {hr_screening.candidate_name}")
                print(f"üîç HR_SCREENING_FORM_SAVE: –î–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏: {hr_screening.vacancy_title}")
                print(f"üîç HR_SCREENING_FORM_SAVE: –ê–Ω–∞–ª–∏–∑ Gemini: {hr_screening.gemini_analysis[:100] if hr_screening.gemini_analysis else '–ù–µ—Ç –∞–Ω–∞–ª–∏–∑–∞'}...")
                
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤ Huntflow
                print(f"üîÑ HR_SCREENING_FORM_SAVE: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤ Huntflow...")
                success, message = hr_screening.update_candidate_in_huntflow()
                if success:
                    print(f"‚úÖ HR_SCREENING_FORM_SAVE: –ö–∞–Ω–¥–∏–¥–∞—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ Huntflow: {message}")
                else:
                    print(f"‚ö†Ô∏è HR_SCREENING_FORM_SAVE: –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: {message}")
                    # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, —Ç–∞–∫ –∫–∞–∫ HR-—Å–∫—Ä–∏–Ω–∏–Ω–≥ —É–∂–µ —Å–æ–∑–¥–∞–Ω –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
                
            except Exception as e:
                print(f"‚ùå HR_SCREENING_FORM_SAVE: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ save(): {e}")
                import traceback
                traceback.print_exc()
                raise
        
        return hr_screening


class CombinedForm(forms.Form):
    """
    –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –¥–µ–π—Å—Ç–≤–∏—è
    """
    
    combined_data = forms.CharField(
        widget=forms.Textarea(attrs={
            'class': 'form-control',
            'rows': 8,
            'placeholder': '–í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∏ –ª—é–±—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...\n\n–ü—Ä–∏–º–µ—Ä—ã:\n\n–î–ª—è HR-—Å–∫—Ä–∏–Ω–∏–Ω–≥–∞ (–º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞):\nhttps://sandbox.huntflow.dev/my/org[–≤–∞—à_org_id]#/vacancy/3/filter/workon/id/17\n\n–ö–∞–Ω–¥–∏–¥–∞—Ç: –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤\n–û–∂–∏–¥–∞–Ω–∏—è –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–µ: 150,000 - 200,000 —Ä—É–±\n–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: 3 –≥–æ–¥–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: Python, Django, PostgreSQL\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ...\n\n–î–ª—è –∏–Ω–≤–∞–π—Ç–∞ (–¥–∞—Ç–∞ + –≤—Ä–µ–º—è):\nhttps://sandbox.huntflow.dev/my/org[–≤–∞—à_org_id]#/vacancy/3/filter/workon/id/17\n2025-09-15 14:00',
            'required': True
        }),
        label=_('–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∏ –¥–∞–Ω–Ω—ã–µ'),
        help_text=_('–í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∏ –ª—é–±—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è: –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞—Ç–∞/–≤—Ä–µ–º—è - —Å–æ–∑–¥–∞—Å—Ç –∏–Ω–≤–∞–π—Ç, –µ—Å–ª–∏ –º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ - –ø—Ä–æ–≤–µ–¥–µ—Ç HR-—Å–∫—Ä–∏–Ω–∏–Ω–≥.')
    )
    
    def __init__(self, *args, **kwargs):
        self.user = kwargs.pop('user', None)
        super().__init__(*args, **kwargs)
    
    def clean_combined_data(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        combined_data = self.cleaned_data.get('combined_data', '').strip()
        
        if not combined_data:
            raise forms.ValidationError(_('–ü–æ–ª–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ —Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞ –Ω–∞ Huntflow
        if 'huntflow' not in combined_data.lower() and '/vacancy/' not in combined_data:
            raise forms.ValidationError(
                _('–í —Ç–µ–∫—Å—Ç–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤ Huntflow (—Å–æ–¥–µ—Ä–∂–∞—â–∞—è /vacancy/)')
            )
        
        return combined_data
    
    def determine_action_type(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ"""
        combined_data = self.cleaned_data.get('combined_data', '')
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–∞—Ç, –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –∏ –≤—Ä–µ–º–µ–Ω–∏
        import re
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–∞—Ç
        date_patterns = [
            r'\d{4}-\d{2}-\d{2}',  # 2025-09-15
            r'\d{2}\.\d{2}\.\d{4}',  # 15.09.2025
            r'\d{2}/\d{2}/\d{4}',   # 15/09/2025
        ]
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –≤—Ä–µ–º–µ–Ω–∏
        time_patterns = [
            r'\d{1,2}:\d{2}',  # 14:00, 9:30
            r'\d{1,2}:\d{2}:\d{2}',  # 14:00:00
        ]
        
        # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
        weekdays = ['–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞', '—Å—É–±–±–æ—Ç–∞', '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ',
                   'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday',
                   '–ø–Ω', '–≤—Ç', '—Å—Ä', '—á—Ç', '–ø—Ç', '—Å–±', '–≤—Å', 
                   'mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun', 
                   '–ø–Ω–¥', '–≤—Ç—Ä', '—Å—Ä–¥', '—á—Ç–≤', '–ø—Ç–Ω', '—Å–±—Ç', '–≤—Å–Ω',
                   'MN', 'TU', 'WE', 'TH', 'FR', 'SA', 'SU']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞—Ç
        has_date = any(re.search(pattern, combined_data, re.IGNORECASE) for pattern in date_patterns)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Ä–µ–º–µ–Ω–∏
        has_time = any(re.search(pattern, combined_data) for pattern in time_patterns)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
        has_weekday = any(day in combined_data.lower() for day in weekdays)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–∫—Å—Ç–∞ (–∏—Å–∫–ª—é—á–∞—è —Å—Å—ã–ª–∫—É)
        lines = combined_data.split('\n')
        non_url_lines = [line.strip() for line in lines if line.strip() and 'huntflow' not in line.lower() and '/vacancy/' not in line]
        text_length = sum(len(line) for line in non_url_lines)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        print(f"üîç DETERMINE_ACTION_TYPE: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ:")
        print(f"üîç DETERMINE_ACTION_TYPE: has_date = {has_date}")
        print(f"üîç DETERMINE_ACTION_TYPE: has_time = {has_time}")
        print(f"üîç DETERMINE_ACTION_TYPE: has_weekday = {has_weekday}")
        print(f"üîç DETERMINE_ACTION_TYPE: text_length = {text_length}")
        print(f"üîç DETERMINE_ACTION_TYPE: non_url_lines = {non_url_lines}")
        
        # –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:
        # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞—Ç–∞/–≤—Ä–µ–º—è/–¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –ò –º–∞–ª–æ —Ç–µ–∫—Å—Ç–∞ - —ç—Ç–æ –∏–Ω–≤–∞–π—Ç
        # –ï—Å–ª–∏ –º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ - —ç—Ç–æ HR-—Å–∫—Ä–∏–Ω–∏–Ω–≥
        if (has_date or has_time or has_weekday) and text_length < 200:
            print(f"üîç DETERMINE_ACTION_TYPE: –û–ø—Ä–µ–¥–µ–ª–µ–Ω —Ç–∏–ø: invite")
            return 'invite'
        elif text_length > 100:
            print(f"üîç DETERMINE_ACTION_TYPE: –û–ø—Ä–µ–¥–µ–ª–µ–Ω —Ç–∏–ø: hr_screening")
            return 'hr_screening'
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é HR-—Å–∫—Ä–∏–Ω–∏–Ω–≥
            print(f"üîç DETERMINE_ACTION_TYPE: –û–ø—Ä–µ–¥–µ–ª–µ–Ω —Ç–∏–ø –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: hr_screening")
            return 'hr_screening'
