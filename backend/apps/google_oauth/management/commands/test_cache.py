from django.core.management.base import BaseCommand
from django.contrib.auth import get_user_model
from apps.google_oauth.cache_service import GoogleAPICache, HuntflowAPICache, CacheService

User = get_user_model()


class Command(BaseCommand):
    help = '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É –∫—ç—à–∞ API –¥–∞–Ω–Ω—ã—Ö'

    def handle(self, *args, **options):
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        try:
            user = User.objects.first()
            if not user:
                self.stdout.write(
                    self.style.ERROR('‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ')
                )
                return
            
            user_id = user.id
            self.stdout.write(
                self.style.SUCCESS(f'üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫—ç—à –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.username} (ID: {user_id})')
            )
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º Google API –∫—ç—à
            self.stdout.write('\nüìÖ –¢–µ—Å—Ç–∏—Ä—É–µ–º Google Calendar –∫—ç—à:')
            calendar_events = GoogleAPICache.get_calendar_events(user_id, 'primary', 100)
            if calendar_events is not None:
                self.stdout.write(f'  ‚úÖ –°–æ–±—ã—Ç–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –≤ –∫—ç—à–µ: {len(calendar_events)} —Å–æ–±—ã—Ç–∏–π')
            else:
                self.stdout.write('  ‚ö†Ô∏è –°–æ–±—ã—Ç–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫—ç—à–µ')
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º Google Drive –∫—ç—à
            self.stdout.write('\nüìÅ –¢–µ—Å—Ç–∏—Ä—É–µ–º Google Drive –∫—ç—à:')
            drive_files = GoogleAPICache.get_drive_files(user_id, 100)
            if drive_files is not None:
                self.stdout.write(f'  ‚úÖ –§–∞–π–ª—ã Drive –≤ –∫—ç—à–µ: {len(drive_files)} —Ñ–∞–π–ª–æ–≤')
            else:
                self.stdout.write('  ‚ö†Ô∏è –§–∞–π–ª—ã Drive –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫—ç—à–µ')
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º Google Sheets –∫—ç—à
            self.stdout.write('\nüìä –¢–µ—Å—Ç–∏—Ä—É–µ–º Google Sheets –∫—ç—à:')
            sheets = GoogleAPICache.get_sheets(user_id, 100)
            if sheets is not None:
                self.stdout.write(f'  ‚úÖ –¢–∞–±–ª–∏—Ü—ã –≤ –∫—ç—à–µ: {len(sheets)} —Ç–∞–±–ª–∏—Ü')
            else:
                self.stdout.write('  ‚ö†Ô∏è –¢–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫—ç—à–µ')
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º Huntflow API –∫—ç—à
            self.stdout.write('\nüë• –¢–µ—Å—Ç–∏—Ä—É–µ–º Huntflow –∫—ç—à:')
            candidate = HuntflowAPICache.get_candidate(user_id, 694, 1)
            if candidate is not None:
                self.stdout.write(f'  ‚úÖ –ö–∞–Ω–¥–∏–¥–∞—Ç –≤ –∫—ç—à–µ: {candidate.get("first_name", "Unknown")}')
            else:
                self.stdout.write('  ‚ö†Ô∏è –ö–∞–Ω–¥–∏–¥–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ')
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.stdout.write('\nüìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞:')
            stats = CacheService.get_cache_stats()
            self.stdout.write(f'  –í—Å–µ–≥–æ –∫–ª—é—á–µ–π: {stats["total_keys"]}')
            
            if stats['services']:
                for service, count in stats['services'].items():
                    self.stdout.write(f'  {service}: {count} –∫–ª—é—á–µ–π')
            
            self.stdout.write(
                self.style.SUCCESS('\n‚úÖ –¢–µ—Å—Ç –∫—ç—à–∞ –∑–∞–≤–µ—Ä—à–µ–Ω')
            )
            
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫—ç—à–∞: {e}')
            )
