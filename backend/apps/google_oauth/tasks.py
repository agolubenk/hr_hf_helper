"""
–ó–∞–¥–∞—á–∏ Celery –¥–ª—è Google OAuth
"""
from celery import shared_task
from django.utils import timezone
from django.db import models
from datetime import timedelta
import logging

from .models import GoogleOAuthAccount
from .services import GoogleOAuthService

logger = logging.getLogger(__name__)


@shared_task
def refresh_google_oauth_tokens():
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–µ–∫—à–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤ Google OAuth
    
    –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤,
    –∫–æ—Ç–æ—Ä—ã–µ –∏—Å—Ç–µ–∫–∞—é—Ç –≤ –±–ª–∏–∂–∞–π—à–∏–µ 10 –º–∏–Ω—É—Ç
    """
    try:
        # –ù–∞—Ö–æ–¥–∏–º —Ç–æ–∫–µ–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å—Ç–µ–∫–∞—é—Ç –≤ –±–ª–∏–∂–∞–π—à–∏–µ 10 –º–∏–Ω—É—Ç
        expiry_threshold = timezone.now() + timedelta(minutes=10)
        
        accounts_to_refresh = GoogleOAuthAccount.objects.filter(
            token_expires_at__lte=expiry_threshold,
            refresh_token__isnull=False
        ).exclude(refresh_token='')
        
        refreshed_count = 0
        failed_count = 0
        
        for account in accounts_to_refresh:
            try:
                oauth_service = GoogleOAuthService(account.user)
                
                # –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω
                if oauth_service.refresh_token():
                    refreshed_count += 1
                    logger.info(f"‚úÖ –¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {account.user.username}")
                else:
                    failed_count += 1
                    logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {account.user.username}")
                    
            except Exception as e:
                failed_count += 1
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è {account.user.username}: {e}")
        
        logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –û–±–Ω–æ–≤–ª–µ–Ω–æ: {refreshed_count}, –û—à–∏–±–æ–∫: {failed_count}")
        
        return {
            'success': True,
            'refreshed_count': refreshed_count,
            'failed_count': failed_count,
            'total_checked': len(accounts_to_refresh)
        }
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤: {e}")
        return {
            'success': False,
            'error': str(e)
        }


@shared_task
def cleanup_expired_oauth_accounts():
    """
    –û–¢–ö–õ–Æ–ß–ï–ù–û: –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö OAuth –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞, —Ç–∞–∫ –∫–∞–∫ —É–¥–∞–ª–µ–Ω–∏–µ OAuth –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏
    –∫ –ø–æ—Ç–µ—Ä–µ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ—Å–ª–µ –æ—Ç–ø—É—Å–∫–æ–≤ –∏–ª–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è.
    –¢–æ–∫–µ–Ω—ã –¥–æ–ª–∂–Ω—ã –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –∞ –Ω–µ —É–¥–∞–ª—è—Ç—å—Å—è.
    """
    logger.info("‚ö†Ô∏è –û—á–∏—Å—Ç–∫–∞ OAuth –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    
    return {
        'success': True,
        'message': '–û—á–∏—Å—Ç–∫–∞ OAuth –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏',
        'deleted_count': 0
    }


@shared_task
def validate_oauth_tokens():
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö OAuth —Ç–æ–∫–µ–Ω–æ–≤
    
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    """
    try:
        total_accounts = GoogleOAuthAccount.objects.count()
        valid_tokens = 0
        expired_tokens = 0
        needs_refresh = 0
        
        for account in GoogleOAuthAccount.objects.all():
            if account.is_token_valid():
                valid_tokens += 1
            else:
                expired_tokens += 1
                if account.needs_refresh():
                    needs_refresh += 1
        
        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ OAuth —Ç–æ–∫–µ–Ω–æ–≤: –í—Å–µ–≥–æ: {total_accounts}, –í–∞–ª–∏–¥–Ω—ã—Ö: {valid_tokens}, –ò—Å—Ç–µ–∫—à–∏—Ö: {expired_tokens}, –¢—Ä–µ–±—É—é—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {needs_refresh}")
        
        return {
            'success': True,
            'total_accounts': total_accounts,
            'valid_tokens': valid_tokens,
            'expired_tokens': expired_tokens,
            'needs_refresh': needs_refresh
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤: {e}")
        return {
            'success': False,
            'error': str(e)
        }
