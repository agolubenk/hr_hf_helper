"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–Ω–∏–º–∫–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤ Redis
"""
import json
import redis
from django.conf import settings
from typing import Dict, Any, Optional
import logging

logger = logging.getLogger(__name__)


class StateSnapshotService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–Ω–∏–º–∫–∞–º–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞"""
    
    def __init__(self):
        self.redis_client = redis.Redis(
            host=getattr(settings, 'REDIS_HOST', 'localhost'),
            port=getattr(settings, 'REDIS_PORT', 6379),
            db=getattr(settings, 'REDIS_DB', 0),
            decode_responses=True
        )
        self.snapshot_ttl = 86400  # 24 —á–∞—Å–∞
    
    def _get_snapshot_key(self, user_id: int, candidate_id: str, action_type: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª—é—á –¥–ª—è —Å–Ω–∏–º–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        return f"snapshot:{user_id}:{candidate_id}:{action_type}"
    
    def save_candidate_snapshot(self, user_id: int, candidate_id: str, action_type: str, 
                              candidate_data: Dict[str, Any]) -> bool:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–Ω–∏–º–æ–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –¥–µ–π—Å—Ç–≤–∏—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            candidate_id: ID –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
            action_type: –¢–∏–ø –¥–µ–π—Å—Ç–≤–∏—è (hrscreening, invite, etc.)
            candidate_data: –î–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        
        Returns:
            bool: True –µ—Å–ª–∏ —Å–Ω–∏–º–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ
        """
        try:
            key = self._get_snapshot_key(user_id, candidate_id, action_type)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–Ω–∏–º–æ–∫ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
            snapshot_data = {
                'timestamp': candidate_data.get('timestamp', ''),
                'candidate_basic': candidate_data.get('candidate_basic', {}),
                'candidate_questionary': candidate_data.get('candidate_questionary', {}),
                'candidate_status': candidate_data.get('candidate_status', {}),
                'candidate_level': candidate_data.get('candidate_level', {}),
                'metadata': candidate_data.get('metadata', {})
            }
            
            self.redis_client.setex(
                key, 
                self.snapshot_ttl, 
                json.dumps(snapshot_data, ensure_ascii=False)
            )
            
            logger.info(f"üì∏ SNAPSHOT_SAVE: –°–Ω–∏–º–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ {candidate_id}, –¥–µ–π—Å—Ç–≤–∏–µ {action_type}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå SNAPSHOT_SAVE: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–Ω–∏–º–∫–∞: {e}")
            return False
    
    def get_candidate_snapshot(self, user_id: int, candidate_id: str, action_type: str) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–Ω–∏–º–æ–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            candidate_id: ID –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
            action_type: –¢–∏–ø –¥–µ–π—Å—Ç–≤–∏—è
        
        Returns:
            Dict —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–Ω–∏–º–∫–∞ –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        try:
            key = self._get_snapshot_key(user_id, candidate_id, action_type)
            snapshot_data = self.redis_client.get(key)
            
            if snapshot_data:
                data = json.loads(snapshot_data)
                logger.info(f"üì∏ SNAPSHOT_GET: –°–Ω–∏–º–æ–∫ –ø–æ–ª—É—á–µ–Ω –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ {candidate_id}, –¥–µ–π—Å—Ç–≤–∏–µ {action_type}")
                return data
            else:
                logger.warning(f"‚ö†Ô∏è SNAPSHOT_GET: –°–Ω–∏–º–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ {candidate_id}, –¥–µ–π—Å—Ç–≤–∏–µ {action_type}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå SNAPSHOT_GET: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–Ω–∏–º–∫–∞: {e}")
            return None
    
    def delete_candidate_snapshot(self, user_id: int, candidate_id: str, action_type: str) -> bool:
        """
        –£–¥–∞–ª—è–µ—Ç —Å–Ω–∏–º–æ–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            candidate_id: ID –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
            action_type: –¢–∏–ø –¥–µ–π—Å—Ç–≤–∏—è
        
        Returns:
            bool: True –µ—Å–ª–∏ —Å–Ω–∏–º–æ–∫ —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ
        """
        try:
            key = self._get_snapshot_key(user_id, candidate_id, action_type)
            result = self.redis_client.delete(key)
            
            if result:
                logger.info(f"üóëÔ∏è SNAPSHOT_DELETE: –°–Ω–∏–º–æ–∫ —É–¥–∞–ª–µ–Ω –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ {candidate_id}, –¥–µ–π—Å—Ç–≤–∏–µ {action_type}")
                return True
            else:
                logger.warning(f"‚ö†Ô∏è SNAPSHOT_DELETE: –°–Ω–∏–º–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ {candidate_id}, –¥–µ–π—Å—Ç–≤–∏–µ {action_type}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå SNAPSHOT_DELETE: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–Ω–∏–º–∫–∞: {e}")
            return False
    
    def create_candidate_snapshot_data(self, huntflow_service, account_id: int, candidate_id: str) -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞–µ—Ç —Å–Ω–∏–º–æ–∫ –¥–∞–Ω–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∏–∑ Huntflow
        
        Args:
            huntflow_service: –°–µ—Ä–≤–∏—Å Huntflow
            account_id: ID –∞–∫–∫–∞—É–Ω—Ç–∞
            candidate_id: ID –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        
        Returns:
            Dict —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        """
        try:
            from datetime import datetime
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
            candidate_basic = huntflow_service.get_applicant(account_id, int(candidate_id))
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (questionary)
            candidate_questionary = huntflow_service.get_applicant_questionary(account_id, int(candidate_id))
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
            candidate_status = {}
            try:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–≤—è–∑–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —Å –≤–∞–∫–∞–Ω—Å–∏—è–º–∏
                links = candidate_basic.get('links', []) if candidate_basic else []
                if links:
                    # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–≤—è–∑—å (–∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å)
                    latest_link = max(links, key=lambda x: x.get('updated', ''))
                    candidate_status = {
                        'status_id': latest_link.get('status'),
                        'vacancy_id': latest_link.get('vacancy'),
                        'updated': latest_link.get('updated'),
                        'changed': latest_link.get('changed')
                    }
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è SNAPSHOT_CREATE: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Ä–æ–≤–Ω–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
            candidate_level = {}
            if candidate_questionary:
                # –ò—â–µ–º –ø–æ–ª–µ —Å —É—Ä–æ–≤–Ω–µ–º (–æ–±—ã—á–Ω–æ —ç—Ç–æ kIbah4MN0iHussXm3n2Ar)
                for key, value in candidate_questionary.items():
                    if isinstance(value, str) and value in ['Junior', 'Junior+', 'Middle', 'Middle+', 'Senior', 'Senior+']:
                        candidate_level = {
                            'field_key': key,
                            'grade': value
                        }
                        break
            
            snapshot_data = {
                'timestamp': datetime.now().isoformat(),
                'candidate_basic': candidate_basic or {},
                'candidate_questionary': candidate_questionary or {},
                'candidate_status': candidate_status,
                'candidate_level': candidate_level,
                'metadata': {
                    'account_id': account_id,
                    'candidate_id': candidate_id,
                    'created_at': datetime.now().isoformat()
                }
            }
            
            logger.info(f"üì∏ SNAPSHOT_CREATE: –°–Ω–∏–º–æ–∫ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ {candidate_id}")
            return snapshot_data
            
        except Exception as e:
            logger.error(f"‚ùå SNAPSHOT_CREATE: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–Ω–∏–º–∫–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return {
                'timestamp': datetime.now().isoformat(),
                'candidate_basic': {},
                'candidate_questionary': {},
                'candidate_status': {},
                'candidate_level': {},
                'metadata': {
                    'account_id': account_id,
                    'candidate_id': candidate_id,
                    'error': str(e)
                }
            }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
snapshot_service = StateSnapshotService()
