# –°–æ–∑–¥–∞–¥–∏–º —Ç–∞–∫–∂–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥ –¥–ª—è views.py
views_py_fix = '''
def determine_action_type_from_text(text):
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–µ–π—Å—Ç–≤–∏—è –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    if not text:
        return "hrscreening"
    
    import re
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –¥–∞—Ç
    date_patterns = [
        r'(\\d{4}-\\d{1,2}-\\d{1,2})',  # 2025-09-15
        r'(\\d{2}\\.\\d{2}\\.\\d{4})',    # 15.09.2025
        r'(\\d{2}\\d{2}\\d{4})'         # 15092025
    ]
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏
    time_patterns = [
        r'(\\d{1,2}:\\d{2})',          # 14:00, 9:30
        r'(\\d{1,2}\\d{2}\\d{4})',      # 140000
    ]
    
    # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
    weekdays = [
        '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞', '—Å—É–±–±–æ—Ç–∞', '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ',
        'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday',
        '–ø–Ω', '–≤—Ç', '—Å—Ä', '—á—Ç', '–ø—Ç', '—Å–±', '–≤—Å'
    ]
    
    # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞—Ç—ã
    relative_dates = [
        '—Å–µ–≥–æ–¥–Ω—è', '–∑–∞–≤—Ç—Ä–∞', '–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞', '–≤—á–µ—Ä–∞', '–ø–æ–∑–∞–≤—á–µ—Ä–∞',
        '—Å—ë–¥–Ω—è', '–∑–∞—Ñ—Ç—Ä–∞', '–ø–æ—Å–ª–µ–∑–∞—Ñ—Ç—Ä–∞', '–≤—á–∏—Ä–∞', '–ø–æ–∑–∞–≤—á–∏—Ä–∞'
    ]
    
    # –í—Ä–µ–º–µ–Ω–∞ —Å—É—Ç–æ–∫  
    time_periods = [
        '—É—Ç—Ä–æ–º', '–¥–Ω–µ–º', '–¥–Ω—ë–º', '–≤–µ—á–µ—Ä–æ–º', '–Ω–æ—á—å—é',
        '—É—Ç—Ä–∞', '–¥–Ω—è', '–≤–µ—á–µ—Ä–∞', '–Ω–æ—á–∏', 
        '—Å —É—Ç—Ä–∞', '–≤ –æ–±–µ–¥', '–æ–±–µ–¥'
    ]
    
    # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –≤—Å—Ç—Ä–µ—á
    meeting_indicators = [
        '–≤—Å—Ç—Ä–µ—á–∞', '–∏–Ω—Ç–µ—Ä–≤—å—é', '—Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ', '—Å–æ–∑–≤–æ–Ω', '–∑–≤–æ–Ω–æ–∫',
        '—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ', 'technical', '—Å–∫—Ä–∏–Ω–∏–Ω–≥', 'screening',
        '–∏–Ω–≤–∞–π—Ç', 'invite', '–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ',
        'meeting', 'interview', 'call', 'schedule', 'time', 'date'
    ]
    
    # HR –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    hr_indicators = [
        '–∑–∞—Ä–ø–ª–∞—Ç–∞', '–∑–∞—Ä–∞–±–æ—Ç–Ω–∞—è', '–æ–∫–ª–∞–¥', 'salary', 'wage', 'pay',
        'byn', 'usd', '$', '—Ä—É–±', '—Ä—É–±–ª–µ–π', '–¥–æ–ª–ª–∞—Ä–æ–≤',
        '–æ–ø—ã—Ç', '—Å—Ç–∞–∂', 'experience', '—Ä–∞–±–æ—Ç–∞–ª', '—Ä–∞–±–æ—Ç–∞–ª–∞',
        'senior', 'junior', 'middle', 'lead', 'head', 'trainee',
        '–Ω–∞–≤—ã–∫–∏', 'skills', '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', 'technologies',
        '–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', 'education', '—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç', '–∏–Ω—Å—Ç–∏—Ç—É—Ç',
        '—Ä–µ–∑—é–º–µ', 'cv', 'resume'
    ]
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π
    has_date = any(re.search(pattern, text, re.IGNORECASE) for pattern in date_patterns)
    has_time = any(re.search(pattern, text, re.IGNORECASE) for pattern in time_patterns)  
    has_weekday = any(day.lower() in text.lower() for day in weekdays)
    has_relative_date = any(rel_date in text.lower() for rel_date in relative_dates)
    has_time_period = any(period in text.lower() for period in time_periods)
    has_meeting_indicators = any(indicator.lower() in text.lower() for indicator in meeting_indicators)
    has_hr_indicators = any(re.search(r'\\b' + re.escape(indicator.lower()) + r'\\b', text.lower()) for indicator in hr_indicators)
    
    text_length = len(text.strip())
    
    # –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è (—Ç–∞–∫–∞—è –∂–µ –∫–∞–∫ –≤ forms.py)
    if has_hr_indicators:
        return "hrscreening"  # 1. HR-–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã - HR-—Å–∫—Ä–∏–Ω–∏–Ω–≥
    elif any(re.search(r'\\b' + re.escape(keyword.lower()) + r'\\b', text.lower()) 
             for keyword in ['senior', 'junior', 'middle', 'lead', 'head', 'trainee']):
        return "hrscreening"  # 2. –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —É—Ä–æ–≤–Ω–µ–π - HR-—Å–∫—Ä–∏–Ω–∏–Ω–≥
    elif (has_date or has_time or has_weekday or has_relative_date or has_time_period):
        return "invite"       # 3. –í—Ä–µ–º–µ–Ω–Ω—ã–µ —É–∫–∞–∑–∞–Ω–∏—è - –∏–Ω–≤–∞–π—Ç
    elif has_meeting_indicators and not has_hr_indicators:
        return "invite"       # 4. –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –≤—Å—Ç—Ä–µ—á –±–µ–∑ HR - –∏–Ω–≤–∞–π—Ç
    elif text_length < 100:
        return "hrscreening"  # 5. –ö–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç - HR-—Å–∫—Ä–∏–Ω–∏–Ω–≥
    else:
        return "hrscreening"  # 6. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - HR-—Å–∫—Ä–∏–Ω–∏–Ω–≥
'''

print("üìù –°–æ–∑–¥–∞–Ω –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥ –¥–ª—è views.py")

# –¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–¥–∏–º –∫–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ Tech Screening
tech_screening_update = '''
# –í models.py –≤ –∫–ª–∞—Å—Å–µ Invite –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥:

def update_candidate_status_to_tech_screening(self):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –Ω–∞ Tech Screening –≤ Huntflow"""
    try:
        from apps.huntflow.services import HuntflowService
        from apps.vacancies.models import Vacancy
        from datetime import datetime, timezone, timedelta
        import re
        
        print(f"[TECH_SCREENING] –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ {self.candidate_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º account_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        account_id = self.get_user_account_id()
        if not account_id:
            print("[TECH_SCREENING] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å account_id")
            return False
        
        # ID —Å—Ç–∞—Ç—É—Å–∞ Tech Screening (–ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ API –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
        tech_screening_status_id = 3459  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π ID Tech Screening
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–ß–µ—Ç–≤–µ—Ä–≥, 25 —Å–µ–Ω—Ç—è–±—Ä—è‚ãÖ11:00‚Äì11:45"
        comment = self.get_formatted_interview_datetime()
        print(f"[TECH_SCREENING] –ö–∞–Ω–¥–∏–¥–∞—Ç: {self.candidate_id} -> Tech Screening")
        print(f"[TECH_SCREENING] –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}")
        
        service = HuntflowService(self.user)
        result = service.update_applicant_status(
            account_id=account_id,
            applicant_id=int(self.candidate_id),
            status_id=tech_screening_status_id,
            comment=comment,
            vacancy_id=int(self.vacancy_id) if self.vacancy_id else None
        )
        
        if result:
            print(f"[TECH_SCREENING] –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –Ω–∞ Tech Screening")
            return True
        else:
            print(f"[TECH_SCREENING] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞")
            return False
            
    except Exception as e:
        print(f"[TECH_SCREENING] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
        return False

# –í –º–µ—Ç–æ–¥–µ create_google_drive_structure –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–∑–æ–≤:
# –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è scorecard –∏ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è:

if calendar_success:
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ Tech Screening
    tech_screening_success = self.update_candidate_status_to_tech_screening()
    print(f"[TECH_SCREENING] –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω: {tech_screening_success}")

return True, f"–°–æ–∑–¥–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {folder_path}. Scorecard –∏ —Å–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω—ã."
'''

print("üìù –°–æ–∑–¥–∞–Ω –∫–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ Tech Screening")
print("\nüéØ –ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:")
print("   1. –ó–∞–º–µ–Ω–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é determine_action_type –≤ forms.py")
print("   2. –ó–∞–º–µ–Ω–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é determine_action_type_from_text –≤ views.py")
print("   3. –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ update_candidate_status_to_tech_screening –≤ models.py")
print("   4. –î–æ–±–∞–≤–∏—Ç—å –≤—ã–∑–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è scorecard")
print("   5. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å ID —Å—Ç–∞—Ç—É—Å–∞ Tech Screening —á–µ—Ä–µ–∑ Huntflow API")

# –°–æ–∑–¥–∞–¥–∏–º —Ç–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
print(f"\nüß™ –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –§–£–ù–ö–¶–ò–ò:")
def test_determine_action_type(text):
    # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞—Ç—ã
    relative_dates = [
        '—Å–µ–≥–æ–¥–Ω—è', '–∑–∞–≤—Ç—Ä–∞', '–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞', '–≤—á–µ—Ä–∞', '–ø–æ–∑–∞–≤—á–µ—Ä–∞',
        '—Å—ë–¥–Ω—è', '–∑–∞—Ñ—Ç—Ä–∞', '–ø–æ—Å–ª–µ–∑–∞—Ñ—Ç—Ä–∞', '–≤—á–∏—Ä–∞', '–ø–æ–∑–∞–≤—á–∏—Ä–∞'
    ]
    
    # –í—Ä–µ–º–µ–Ω–∞ —Å—É—Ç–æ–∫  
    time_periods = [
        '—É—Ç—Ä–æ–º', '–¥–Ω–µ–º', '–¥–Ω—ë–º', '–≤–µ—á–µ—Ä–æ–º', '–Ω–æ—á—å—é',
        '—É—Ç—Ä–∞', '–¥–Ω—è', '–≤–µ—á–µ—Ä–∞', '–Ω–æ—á–∏', 
        '—Å —É—Ç—Ä–∞', '–≤ –æ–±–µ–¥', '–æ–±–µ–¥'
    ]
    
    has_relative_date = any(rel_date in text.lower() for rel_date in relative_dates)
    has_time_period = any(period in text.lower() for period in time_periods)
    
    if has_relative_date or has_time_period:
        return "invite"
    else:
        return "hrscreening"

test_cases = [
    "—Å–µ–≥–æ–¥–Ω—è –≤–µ—á–µ—Ä–æ–º",
    "–∑–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ–º", 
    "–ü–¢ 18",
    "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 14:00",
    "–∑–∞—Ä–ø–ª–∞—Ç–∞ 800 –¥–æ–ª–ª–∞—Ä–æ–≤",
    "–æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã 3 –≥–æ–¥–∞"
]

for test in test_cases:
    result = test_determine_action_type(test)
    print(f"   '{test}' -> {result}")