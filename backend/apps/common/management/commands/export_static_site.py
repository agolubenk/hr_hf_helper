"""
Management –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ Django-—Å–∞–π—Ç–∞ –≤ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ HTML —Ñ–∞–π–ª—ã
"""
import os
import shutil
from pathlib import Path
from django.core.management.base import BaseCommand
from django.test import Client
from django.conf import settings
from django.contrib.auth import get_user_model
from django.core.management import call_command
from django.db import transaction
from django.utils import timezone
from decimal import Decimal
import random

User = get_user_model()


class Command(BaseCommand):
    help = '–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ–≥–æ —Å–∞–π—Ç–∞ –≤ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ HTML-—Ñ–∞–π–ª—ã —Å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏'

    def add_arguments(self, parser):
        parser.add_argument(
            '--output-dir',
            type=str,
            default='exported_site',
            help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: exported_site)'
        )
        parser.add_argument(
            '--skip-accounts',
            action='store_true',
            help='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (–ª–æ–≥–∏–Ω, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è)'
        )
        parser.add_argument(
            '--include-admin',
            action='store_true',
            help='–í–∫–ª—é—á–∏—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (—Ç—Ä–µ–±—É–µ—Ç —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)'
        )

    def handle(self, *args, **options):
        output_dir = Path(options['output_dir'])
        skip_accounts = options['skip_accounts']
        include_admin = options['include_admin']
        
        self.stdout.write(
            self.style.SUCCESS(f'üöÄ –ù–∞—á–∏–Ω–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∞–π—Ç–∞ –≤ {output_dir}')
        )
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        self._create_directories(output_dir)
        
        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
        self._collect_static_files(output_dir)
        
        # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        self._create_demo_data()
        
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        self._export_html_pages(output_dir, skip_accounts, include_admin)
        
        # –°–æ–∑–¥–∞–µ–º index.html –¥–ª—è –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        self._create_index_file(output_dir)
        
        self.stdout.write(
            self.style.SUCCESS(f'‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–∞–π—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ {output_dir}')
        )
        self.stdout.write(
            self.style.WARNING('üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞:')
        )
        self.stdout.write(f'   {output_dir}/ - HTML —Ñ–∞–π–ª—ã')
        self.stdout.write(f'   {output_dir}/static/ - CSS, JS, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è')

    def _create_directories(self, output_dir):
        """–°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        output_dir.mkdir(exist_ok=True)
        (output_dir / 'static').mkdir(exist_ok=True)
        self.stdout.write('üìÅ –°–æ–∑–¥–∞–Ω—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞')

    def _collect_static_files(self, output_dir):
        """–°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã"""
        self.stdout.write('üì¶ –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã...')
        
        # –ö–æ–ø–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –∏–∑ STATIC_ROOT
        static_root = Path(settings.STATIC_ROOT)
        static_dest = output_dir / 'static'
        
        if static_root.exists():
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –ø–∞–ø–∫—É static –µ—Å–ª–∏ –µ—Å—Ç—å
            if static_dest.exists():
                shutil.rmtree(static_dest)
            
            # –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
            shutil.copytree(static_root, static_dest)
            self.stdout.write(f'‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –∏–∑ {static_root}')
        else:
            self.stdout.write(
                self.style.WARNING('‚ö†Ô∏è  STATIC_ROOT –Ω–µ –Ω–∞–π–¥–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º collectstatic...')
            )
            call_command('collectstatic', '--noinput')
            if static_root.exists():
                shutil.copytree(static_root, static_dest)
                self.stdout.write('‚úÖ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã —Å–æ–±—Ä–∞–Ω—ã –∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã')

    def _create_demo_data(self):
        """–°–æ–∑–¥–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        self.stdout.write('üé≠ –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...')
        
        with transaction.atomic():
            # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            demo_user, created = User.objects.get_or_create(
                email='demo@hrhelper.com',
                defaults={
                    'first_name': '–î–µ–º–æ',
                    'last_name': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                    'is_staff': True,
                    'is_active': True,
                }
            )
            
            if created:
                demo_user.set_password('demo123')
                demo_user.save()
                self.stdout.write('‚úÖ –°–æ–∑–¥–∞–Ω –¥–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
            else:
                self.stdout.write('‚ÑπÔ∏è  –î–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
            
            # –°–æ–∑–¥–∞–µ–º —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–¥–º–∏–Ω–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if not User.objects.filter(is_superuser=True).exists():
                superuser = User.objects.create_superuser(
                    email='admin@hrhelper.com',
                    password='admin123',
                    first_name='–ê–¥–º–∏–Ω',
                    last_name='–°–∏—Å—Ç–µ–º—ã'
                )
                self.stdout.write('‚úÖ –°–æ–∑–¥–∞–Ω —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –∞–¥–º–∏–Ω–∫–∏')
            
            # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
            self._create_finance_demo_data()
            self._create_vacancies_demo_data()
            self._create_huntflow_demo_data()
            self._create_interviewers_demo_data()
            self._create_google_oauth_demo_data()
            self._create_telegram_demo_data()
            self._create_clickup_demo_data()
            self._create_notion_demo_data()
            self._create_gemini_demo_data()

    def _export_html_pages(self, output_dir, skip_accounts, include_admin):
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        self.stdout.write('üìÑ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã...')
        
        client = Client()
        
        # –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è –∫–∞–∫ –¥–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        demo_user = User.objects.get(email='demo@hrhelper.com')
        client.force_login(demo_user)
        
        # –°–ø–∏—Å–æ–∫ URL –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        urls_to_export = [
            # –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            ('/', 'index.html'),
            ('/huntflow/', 'huntflow.html'),
            ('/finance/', 'finance.html'),
            ('/gemini/', 'gemini.html'),
            ('/interviewers/', 'interviewers.html'),
            ('/vacancies/', 'vacancies.html'),
            ('/clickup/', 'clickup.html'),
            ('/notion/', 'notion.html'),
            ('/telegram/', 'telegram.html'),
            
            # –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Huntflow
            ('/huntflow/accounts/1/vacancies/', 'huntflow_vacancies.html'),
            ('/huntflow/accounts/1/vacancies/1/', 'huntflow_vacancy_detail.html'),
            ('/huntflow/accounts/1/applicants/', 'huntflow_applicants.html'),
            ('/huntflow/accounts/1/applicants/1/', 'huntflow_applicant_detail.html'),
            
            # –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Finance
            ('/finance/salary-ranges/', 'finance_salary_ranges.html'),
            ('/finance/benchmarks/', 'finance_benchmarks.html'),
            ('/finance/pln-taxes/', 'finance_pln_taxes.html'),
            
            # –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Vacancies
            ('/vacancies/list/', 'vacancies_list.html'),
            ('/vacancies/1/', 'vacancy_detail.html'),
            ('/vacancies/salary-ranges/', 'vacancies_salary_ranges.html'),
            
            # –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Interviewers
            ('/interviewers/list/', 'interviewers_list.html'),
            ('/interviewers/1/', 'interviewer_detail.html'),
            
            # –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Google OAuth
            ('/google-oauth/calendar/', 'google_oauth_calendar.html'),
            ('/google-oauth/invites/', 'google_oauth_invites.html'),
            ('/google-oauth/invites/list/', 'google_oauth_invites_list.html'),
            
            # –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ClickUp
            ('/clickup/tasks/', 'clickup_tasks.html'),
            ('/clickup/task/demo_task_1/', 'clickup_task_detail.html'),
            ('/clickup/settings/', 'clickup_settings.html'),
            
            # –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Notion
            ('/notion/pages/', 'notion_pages.html'),
            ('/notion/pages/demo_page_1/', 'notion_page_detail.html'),
            ('/notion/settings/', 'notion_settings.html'),
            
            # –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Telegram
            ('/telegram/chats/', 'telegram_chats.html'),
            ('/telegram/settings/', 'telegram_settings.html'),
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –µ—Å–ª–∏ –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if not skip_accounts:
            urls_to_export.extend([
                ('/accounts/login/', 'accounts_login.html'),
                ('/accounts/', 'accounts_profile.html'),
            ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if include_admin:
            urls_to_export.append(('/admin/', 'admin.html'))
        
        exported_count = 0
        failed_count = 0
        
        for url_path, filename in urls_to_export:
            try:
                response = client.get(url_path)
                
                if response.status_code == 200:
                    file_path = output_dir / filename
                    
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º HTML —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –ø—É—Ç—è–º–∏ –∫ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º —Ñ–∞–π–ª–∞–º
                    content = self._fix_static_paths(response.content.decode('utf-8'))
                    
                    with open(file_path, 'w', encoding='utf-8') as f:
                        f.write(content)
                    
                    self.stdout.write(f'‚úÖ {url_path} ‚Üí {filename}')
                    exported_count += 1
                    
                elif response.status_code == 302:
                    # –†–µ–¥–∏—Ä–µ–∫—Ç - —Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–µ–¥–∏—Ä–µ–∫—Ç–µ
                    redirect_url = response.get('Location', '')
                    content = f"""
<!DOCTYPE html>
<html>
<head>
    <title>–†–µ–¥–∏—Ä–µ–∫—Ç</title>
    <meta charset="utf-8">
    <meta http-equiv="refresh" content="0; url={redirect_url}">
</head>
<body>
    <p>–≠—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞: <a href="{redirect_url}">{redirect_url}</a></p>
</body>
</html>
"""
                    file_path = output_dir / filename
                    with open(file_path, 'w', encoding='utf-8') as f:
                        f.write(content)
                    
                    self.stdout.write(f'üîÑ {url_path} ‚Üí {filename} (—Ä–µ–¥–∏—Ä–µ–∫—Ç)')
                    exported_count += 1
                    
                else:
                    self.stdout.write(
                        self.style.WARNING(f'‚ö†Ô∏è  {url_path}: HTTP {response.status_code}')
                    )
                    failed_count += 1
                    
            except Exception as e:
                self.stdout.write(
                    self.style.ERROR(f'‚ùå {url_path}: {str(e)}')
                )
                failed_count += 1
        
        self.stdout.write(f'üìä –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {exported_count}, –æ—à–∏–±–æ–∫: {failed_count}')

    def _fix_static_paths(self, content):
        """–ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º —Ñ–∞–π–ª–∞–º –≤ HTML"""
        # –ó–∞–º–µ–Ω—è–µ–º Django static —Ç–µ–≥–∏ –Ω–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏
        import re
        
        # –ó–∞–º–µ–Ω—è–µ–º {% static 'path' %} –Ω–∞ static/path
        content = re.sub(
            r'{% static [\'"]([^\'"]+)[\'"] %}',
            r'static/\1',
            content
        )
        
        # –ó–∞–º–µ–Ω—è–µ–º /static/ –Ω–∞ static/
        content = re.sub(r'/static/', 'static/', content)
        
        return content

    def _create_index_file(self, output_dir):
        """–°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω—ã–π index.html"""
        index_content = """
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>HR Helper - –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–∞–π—Ç</title>
    <link rel="stylesheet" href="static/css/hrhelper.css">
    <style>
        .welcome-container {
            max-width: 800px;
            margin: 50px auto;
            padding: 20px;
            text-align: center;
        }
        .nav-links {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin: 30px 0;
        }
        .nav-link {
            display: block;
            padding: 20px;
            background: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 8px;
            text-decoration: none;
            color: #495057;
            transition: all 0.3s ease;
        }
        .nav-link:hover {
            background: #e9ecef;
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
        .nav-link h3 {
            margin: 0 0 10px 0;
            color: #007bff;
        }
        .info-box {
            background: #d1ecf1;
            border: 1px solid #bee5eb;
            border-radius: 8px;
            padding: 20px;
            margin: 20px 0;
        }
    </style>
</head>
<body>
    <div class="welcome-container">
        <h1>üéØ HR Helper - –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–∞–π—Ç</h1>
        <p>–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è HR Helper —Å–∏—Å—Ç–µ–º—ã</p>
        
        <div class="info-box">
            <h3>‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
            <p>–≠—Ç–æ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è –≤–µ—Ä—Å–∏—è —Å–∞–π—Ç–∞, —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–∑ Django-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.</p>
            <p>–í—Å–µ –¥–∞–Ω–Ω—ã–µ —è–≤–ª—è—é—Ç—Å—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–º–∏.</p>
        </div>
        
        <div class="nav-links">
            <a href="huntflow.html" class="nav-link">
                <h3>üë• Huntflow</h3>
                <p>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º–∏ –∏ –≤–∞–∫–∞–Ω—Å–∏—è–º–∏</p>
                <small>üìÑ <a href="huntflow_vacancies.html">–í–∞–∫–∞–Ω—Å–∏–∏</a> | 
                       <a href="huntflow_applicants.html">–ö–∞–Ω–¥–∏–¥–∞—Ç—ã</a> | 
                       <a href="huntflow_vacancy_detail.html">–î–µ—Ç–∞–ª–∏ –≤–∞–∫–∞–Ω—Å–∏–∏</a></small>
            </a>
            
            <a href="finance.html" class="nav-link">
                <h3>üí∞ –§–∏–Ω–∞–Ω—Å—ã</h3>
                <p>–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ—Ç—á–µ—Ç—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞</p>
                <small>üìÑ <a href="finance_salary_ranges.html">–ó–∞—Ä–ø–ª–∞—Ç–Ω—ã–µ –≤–∏–ª–∫–∏</a> | 
                       <a href="finance_benchmarks.html">–ë–µ–Ω—á–º–∞—Ä–∫–∏</a> | 
                       <a href="finance_pln_taxes.html">–ù–∞–ª–æ–≥–∏ PLN</a></small>
            </a>
            
            <a href="gemini.html" class="nav-link">
                <h3>ü§ñ Gemini AI</h3>
                <p>–ò–ò –∞–Ω–∞–ª–∏–∑ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è</p>
            </a>
            
            <a href="interviewers.html" class="nav-link">
                <h3>üë®‚Äçüíº –ò–Ω—Ç–µ—Ä–≤—å—é–µ—Ä—ã</h3>
                <p>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä–∞–º–∏</p>
                <small>üìÑ <a href="interviewers_list.html">–°–ø–∏—Å–æ–∫</a> | 
                       <a href="interviewer_detail.html">–î–µ—Ç–∞–ª–∏</a></small>
            </a>
            
            <a href="vacancies.html" class="nav-link">
                <h3>üìã –í–∞–∫–∞–Ω—Å–∏–∏</h3>
                <p>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏—è–º–∏</p>
                <small>üìÑ <a href="vacancies_list.html">–°–ø–∏—Å–æ–∫</a> | 
                       <a href="vacancy_detail.html">–î–µ—Ç–∞–ª–∏</a> | 
                       <a href="vacancies_salary_ranges.html">–ó–∞—Ä–ø–ª–∞—Ç–Ω—ã–µ –≤–∏–ª–∫–∏</a></small>
            </a>
            
            <a href="clickup.html" class="nav-link">
                <h3>üìå ClickUp</h3>
                <p>–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å ClickUp</p>
                <small>üìÑ <a href="clickup_tasks.html">–ó–∞–¥–∞—á–∏</a> | 
                       <a href="clickup_task_detail.html">–î–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏</a> | 
                       <a href="clickup_settings.html">–ù–∞—Å—Ç—Ä–æ–π–∫–∏</a></small>
            </a>
            
            <a href="notion.html" class="nav-link">
                <h3>üìù Notion</h3>
                <p>–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Notion</p>
                <small>üìÑ <a href="notion_pages.html">–°—Ç—Ä–∞–Ω–∏—Ü—ã</a> | 
                       <a href="notion_page_detail.html">–î–µ—Ç–∞–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã</a> | 
                       <a href="notion_settings.html">–ù–∞—Å—Ç—Ä–æ–π–∫–∏</a></small>
            </a>
            
            <a href="telegram.html" class="nav-link">
                <h3>üì± Telegram</h3>
                <p>Telegram –±–æ—Ç –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</p>
                <small>üìÑ <a href="telegram_chats.html">–ß–∞—Ç—ã</a> | 
                       <a href="telegram_settings.html">–ù–∞—Å—Ç—Ä–æ–π–∫–∏</a></small>
            </a>
        </div>
        
        <div class="info-box">
            <h3>üîó –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã</h3>
            <p><strong>Google OAuth:</strong> 
               <a href="google_oauth_calendar.html">–ö–∞–ª–µ–Ω–¥–∞—Ä—å</a> | 
               <a href="google_oauth_invites.html">–ò–Ω–≤–∞–π—Ç—ã</a> | 
               <a href="google_oauth_invites_list.html">–°–ø–∏—Å–æ–∫ –∏–Ω–≤–∞–π—Ç–æ–≤</a>
            </p>
        </div>
        
        <div class="info-box">
            <h3>üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
            <p><strong>–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ:</strong> {date}</p>
            <p><strong>–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã:</strong> static/</p>
            <p><strong>–î–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</strong> demo@hrhelper.com / demo123</p>
        </div>
    </div>
</body>
</html>
"""
        
        # –ó–∞–º–µ–Ω—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –¥–∞—Ç—ã
        current_date = __import__('datetime').datetime.now().strftime('%d.%m.%Y %H:%M')
        index_content = index_content.replace('{date}', current_date)
        
        index_path = output_dir / 'index.html'
        with open(index_path, 'w', encoding='utf-8') as f:
            f.write(index_content)
        
        self.stdout.write('‚úÖ –°–æ–∑–¥–∞–Ω –≥–ª–∞–≤–Ω—ã–π index.html')

    def _create_finance_demo_data(self):
        """–°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –º–æ–¥—É–ª—è"""
        try:
            from apps.finance.models import Grade, CurrencyRate, PLNTax, SalaryRange, Benchmark, BenchmarkSettings
            
            # –°–æ–∑–¥–∞–µ–º –≥—Ä–µ–π–¥—ã
            grades_data = [
                'Junior', 'Junior+', 'Middle', 'Middle+', 'Senior', 'Senior+', 'Lead', 'Head'
            ]
            for grade_name in grades_data:
                Grade.objects.get_or_create(name=grade_name)
            
            # –°–æ–∑–¥–∞–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç
            currency_rates = [
                ('USD', Decimal('3.25'), 1),
                ('PLN', Decimal('0.80'), 1),
                ('BYN', Decimal('1.00'), 1),
            ]
            for code, rate, scale in currency_rates:
                CurrencyRate.objects.get_or_create(
                    code=code,
                    defaults={'rate': rate, 'scale': scale}
                )
            
            # –°–æ–∑–¥–∞–µ–º –Ω–∞–ª–æ–≥–∏ PLN
            pln_taxes = [
                ('–ü–æ–¥–æ—Ö–æ–¥–Ω—ã–π –Ω–∞–ª–æ–≥', Decimal('17.00')),
                ('–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –≤–∑–Ω–æ—Å—ã', Decimal('19.48')),
                ('–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ', Decimal('9.00')),
            ]
            for name, rate in pln_taxes:
                PLNTax.objects.get_or_create(
                    name=name,
                    defaults={'rate': rate, 'is_active': True}
                )
            
            # –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–Ω—á–º–∞—Ä–∫–æ–≤
            BenchmarkSettings.load()
            
            self.stdout.write('‚úÖ –°–æ–∑–¥–∞–Ω—ã —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ')
        except Exception as e:
            self.stdout.write(f'‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}')

    def _create_vacancies_demo_data(self):
        """–°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–π"""
        try:
            from apps.vacancies.models import Vacancy, SalaryRange
            from apps.finance.models import Grade
            
            # –°–æ–∑–¥–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏
            vacancies_data = [
                {
                    'name': 'Backend Engineer (Java)',
                    'external_id': 'BE_JAVA_001',
                    'invite_title': '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –ø–æ–∑–∏—Ü–∏—é Backend Engineer (Java)',
                    'invite_text': '–ú—ã –∏—â–µ–º –æ–ø—ã—Ç–Ω–æ–≥–æ Java —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞–¥ –≤—ã—Å–æ–∫–æ–Ω–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏.',
                    'scorecard_title': 'Scorecard Backend Engineer (Java)',
                    'questions_belarus': '1. –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å Spring Framework\n2. –ó–Ω–∞–Ω–∏–µ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã\n3. –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö',
                    'questions_poland': '1. Experience with Spring Framework\n2. Microservices architecture knowledge\n3. Database experience',
                },
                {
                    'name': 'Frontend Engineer (React)',
                    'external_id': 'FE_REACT_001',
                    'invite_title': '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –ø–æ–∑–∏—Ü–∏—é Frontend Engineer (React)',
                    'invite_text': '–ò—â–µ–º —Ç–∞–ª–∞–Ω—Ç–ª–∏–≤–æ–≥–æ React —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤.',
                    'scorecard_title': 'Scorecard Frontend Engineer (React)',
                    'questions_belarus': '1. –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å React\n2. –ó–Ω–∞–Ω–∏–µ TypeScript\n3. –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å Redux',
                    'questions_poland': '1. React experience\n2. TypeScript knowledge\n3. Redux experience',
                },
                {
                    'name': 'QA Engineer',
                    'external_id': 'QA_001',
                    'invite_title': '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –ø–æ–∑–∏—Ü–∏—é QA Engineer',
                    'invite_text': '–ò—â–µ–º QA –∏–Ω–∂–µ–Ω–µ—Ä–∞ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –Ω–∞—à–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤.',
                    'scorecard_title': 'Scorecard QA Engineer',
                    'questions_belarus': '1. –û–ø—ã—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n2. –ó–Ω–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏\n3. –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å API',
                    'questions_poland': '1. Testing experience\n2. Automation knowledge\n3. API testing experience',
                },
                {
                    'name': 'DevOps Engineer',
                    'external_id': 'DEVOPS_001',
                    'invite_title': '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –ø–æ–∑–∏—Ü–∏—é DevOps Engineer',
                    'invite_text': '–ò—â–µ–º DevOps –∏–Ω–∂–µ–Ω–µ—Ä–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è.',
                    'scorecard_title': 'Scorecard DevOps Engineer',
                    'questions_belarus': '1. –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å Docker\n2. –ó–Ω–∞–Ω–∏–µ Kubernetes\n3. –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å CI/CD',
                    'questions_poland': '1. Docker experience\n2. Kubernetes knowledge\n3. CI/CD experience',
                },
                {
                    'name': 'Project Manager',
                    'external_id': 'PM_001',
                    'invite_title': '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –ø–æ–∑–∏—Ü–∏—é Project Manager',
                    'invite_text': '–ò—â–µ–º Project Manager –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è IT –ø—Ä–æ–µ–∫—Ç–∞–º–∏.',
                    'scorecard_title': 'Scorecard Project Manager',
                    'questions_belarus': '1. –û–ø—ã—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏\n2. –ó–Ω–∞–Ω–∏–µ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–π\n3. –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å –∫–æ–º–∞–Ω–¥–∞–º–∏',
                    'questions_poland': '1. Project management experience\n2. Methodology knowledge\n3. Team management experience',
                },
            ]
            
            demo_user = User.objects.get(email='demo@hrhelper.com')
            grades = list(Grade.objects.all())
            
            for vacancy_data in vacancies_data:
                vacancy, created = Vacancy.objects.get_or_create(
                    external_id=vacancy_data['external_id'],
                    defaults={
                        'name': vacancy_data['name'],
                        'recruiter': demo_user,
                        'invite_title': vacancy_data['invite_title'],
                        'invite_text': vacancy_data['invite_text'],
                        'scorecard_title': vacancy_data['scorecard_title'],
                        'questions_belarus': vacancy_data['questions_belarus'],
                        'questions_poland': vacancy_data['questions_poland'],
                        'screening_duration': 45,
                        'is_active': True,
                    }
                )
                
                if created:
                    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä–µ–π–¥—ã
                    vacancy.available_grades.set(grades[:5])  # –ü–µ—Ä–≤—ã–µ 5 –≥—Ä–µ–π–¥–æ–≤
                    
                    # –°–æ–∑–¥–∞–µ–º –∑–∞—Ä–ø–ª–∞—Ç–Ω—ã–µ –≤–∏–ª–∫–∏
                    for grade in grades[:5]:
                        salary_min = random.randint(2000, 8000)
                        salary_max = salary_min + random.randint(1000, 3000)
                        
                        SalaryRange.objects.get_or_create(
                            vacancy=vacancy,
                            grade=grade,
                            defaults={
                                'salary_min_usd': Decimal(str(salary_min)),
                                'salary_max_usd': Decimal(str(salary_max)),
                                'is_active': True,
                            }
                        )
            
            self.stdout.write('‚úÖ –°–æ–∑–¥–∞–Ω—ã –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–π')
        except Exception as e:
            self.stdout.write(f'‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π: {e}')

    def _create_huntflow_demo_data(self):
        """–°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–ª—è Huntflow"""
        try:
            from apps.huntflow.models import HuntflowCache, HuntflowLog
            
            # –°–æ–∑–¥–∞–µ–º –∫—ç—à –¥–∞–Ω–Ω—ã–µ
            cache_data = [
                {
                    'cache_key': 'accounts_list',
                    'data': {
                        'accounts': [
                            {
                                'id': 1,
                                'name': 'Demo Company',
                                'subdomain': 'demo',
                                'active': True
                            }
                        ]
                    }
                },
                {
                    'cache_key': 'account_1_vacancies',
                    'data': {
                        'vacancies': [
                            {
                                'id': 1,
                                'position': 'Backend Engineer (Java)',
                                'state': 'OPEN',
                                'created': '2024-01-15T10:00:00Z'
                            },
                            {
                                'id': 2,
                                'position': 'Frontend Engineer (React)',
                                'state': 'OPEN',
                                'created': '2024-01-16T11:00:00Z'
                            }
                        ]
                    }
                },
                {
                    'cache_key': 'account_1_applicants',
                    'data': {
                        'applicants': [
                            {
                                'id': 1,
                                'first_name': '–ò–≤–∞–Ω',
                                'last_name': '–ü–µ—Ç—Ä–æ–≤',
                                'email': 'ivan.petrov@example.com',
                                'position': 'Backend Engineer (Java)',
                                'status': 'NEW'
                            },
                            {
                                'id': 2,
                                'first_name': '–ú–∞—Ä–∏—è',
                                'last_name': '–°–∏–¥–æ—Ä–æ–≤–∞',
                                'email': 'maria.sidorova@example.com',
                                'position': 'Frontend Engineer (React)',
                                'status': 'INTERVIEW'
                            }
                        ]
                    }
                }
            ]
            
            for cache_item in cache_data:
                HuntflowCache.objects.get_or_create(
                    cache_key=cache_item['cache_key'],
                    defaults={
                        'data': cache_item['data'],
                        'expires_at': timezone.now() + timezone.timedelta(hours=1)
                    }
                )
            
            # –°–æ–∑–¥–∞–µ–º –ª–æ–≥–∏
            demo_user = User.objects.get(email='demo@hrhelper.com')
            log_data = [
                ('GET', '/v2/accounts', 200, '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤'),
                ('GET', '/v2/accounts/1/vacancies', 200, '–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–π'),
                ('GET', '/v2/accounts/1/applicants', 200, '–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤'),
            ]
            
            for method, endpoint, status_code, description in log_data:
                HuntflowLog.objects.create(
                    log_type='GET',
                    endpoint=endpoint,
                    method=method,
                    status_code=status_code,
                    user=demo_user,
                    request_data={},
                    response_data={'message': description}
                )
            
            self.stdout.write('‚úÖ –°–æ–∑–¥–∞–Ω—ã –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ Huntflow')
        except Exception as e:
            self.stdout.write(f'‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö Huntflow: {e}')

    def _create_interviewers_demo_data(self):
        """–°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä–æ–≤"""
        try:
            from apps.interviewers.models import Interviewer, InterviewRule
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä–æ–≤
            interviewers_data = [
                {
                    'name': '–ê–ª–µ–∫—Å–µ–π –ò–≤–∞–Ω–æ–≤',
                    'email': 'alexey.ivanov@company.com',
                    'telegram_username': '@alexey_ivanov',
                    'calendar_url': 'https://calendly.com/alexey-ivanov',
                    'is_active': True
                },
                {
                    'name': '–ï–ª–µ–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞',
                    'email': 'elena.petrova@company.com',
                    'telegram_username': '@elena_petrova',
                    'calendar_url': 'https://calendly.com/elena-petrova',
                    'is_active': True
                },
                {
                    'name': '–î–º–∏—Ç—Ä–∏–π –°–∏–¥–æ—Ä–æ–≤',
                    'email': 'dmitry.sidorov@company.com',
                    'telegram_username': '@dmitry_sidorov',
                    'calendar_url': 'https://calendly.com/dmitry-sidorov',
                    'is_active': True
                }
            ]
            
            for interviewer_data in interviewers_data:
                interviewer, created = Interviewer.objects.get_or_create(
                    email=interviewer_data['email'],
                    defaults=interviewer_data
                )
                
                if created:
                    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è
                    InterviewRule.objects.create(
                        interviewer=interviewer,
                        rule_name='–û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ',
                        rule_description='–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä–∞',
                        is_active=True
                    )
            
            self.stdout.write('‚úÖ –°–æ–∑–¥–∞–Ω—ã –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä–æ–≤')
        except Exception as e:
            self.stdout.write(f'‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä–æ–≤: {e}')

    def _create_google_oauth_demo_data(self):
        """–°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–ª—è Google OAuth"""
        try:
            from apps.google_oauth.models import GoogleOAuthAccount, Invite, HRScreening
            
            demo_user = User.objects.get(email='demo@hrhelper.com')
            
            # –°–æ–∑–¥–∞–µ–º Google OAuth –∞–∫–∫–∞—É–Ω—Ç
            google_account, created = GoogleOAuthAccount.objects.get_or_create(
                user=demo_user,
                defaults={
                    'google_id': 'demo_google_id_123',
                    'email': 'demo@hrhelper.com',
                    'name': 'Demo User',
                    'access_token': 'demo_access_token',
                    'refresh_token': 'demo_refresh_token',
                    'is_active': True
                }
            )
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–∞–π—Ç—ã
            invites_data = [
                {
                    'candidate_email': 'candidate1@example.com',
                    'candidate_name': '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤',
                    'position': 'Backend Engineer (Java)',
                    'meeting_date': timezone.now() + timezone.timedelta(days=1),
                    'meeting_duration': 45,
                    'status': 'SENT'
                },
                {
                    'candidate_email': 'candidate2@example.com',
                    'candidate_name': '–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞',
                    'position': 'Frontend Engineer (React)',
                    'meeting_date': timezone.now() + timezone.timedelta(days=2),
                    'meeting_duration': 45,
                    'status': 'CONFIRMED'
                }
            ]
            
            for invite_data in invites_data:
                Invite.objects.get_or_create(
                    candidate_email=invite_data['candidate_email'],
                    defaults={
                        'user': demo_user,
                        'candidate_name': invite_data['candidate_name'],
                        'position': invite_data['position'],
                        'meeting_date': invite_data['meeting_date'],
                        'meeting_duration': invite_data['meeting_duration'],
                        'status': invite_data['status']
                    }
                )
            
            self.stdout.write('‚úÖ –°–æ–∑–¥–∞–Ω—ã –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ Google OAuth')
        except Exception as e:
            self.stdout.write(f'‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö Google OAuth: {e}')

    def _create_telegram_demo_data(self):
        """–°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–ª—è Telegram"""
        try:
            from apps.telegram.models import TelegramUser, TelegramChat, TelegramMessage
            
            demo_user = User.objects.get(email='demo@hrhelper.com')
            
            # –°–æ–∑–¥–∞–µ–º Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            telegram_user, created = TelegramUser.objects.get_or_create(
                user=demo_user,
                defaults={
                    'telegram_id': 123456789,
                    'username': 'demo_user',
                    'first_name': 'Demo',
                    'last_name': 'User',
                    'session_name': 'demo_session',
                    'is_authorized': True,
                    'auth_date': timezone.now()
                }
            )
            
            # –°–æ–∑–¥–∞–µ–º —á–∞—Ç—ã
            chats_data = [
                {
                    'chat_id': -1001234567890,
                    'title': 'HR Helper Demo Chat',
                    'chat_type': 'supergroup',
                    'is_active': True
                },
                {
                    'chat_id': -1001234567891,
                    'title': 'Recruitment Team',
                    'chat_type': 'supergroup',
                    'is_active': True
                }
            ]
            
            for chat_data in chats_data:
                chat, created = TelegramChat.objects.get_or_create(
                    chat_id=chat_data['chat_id'],
                    defaults=chat_data
                )
                
                if created:
                    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
                    messages_data = [
                        {
                            'message_id': 1,
                            'text': '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ HR Helper!',
                            'message_type': 'text',
                            'sender': telegram_user
                        },
                        {
                            'message_id': 2,
                            'text': '–ù–æ–≤—ã–π –∫–∞–Ω–¥–∏–¥–∞—Ç: –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤',
                            'message_type': 'text',
                            'sender': telegram_user
                        }
                    ]
                    
                    for msg_data in messages_data:
                        TelegramMessage.objects.create(
                            chat=chat,
                            message_id=msg_data['message_id'],
                            text=msg_data['text'],
                            message_type=msg_data['message_type'],
                            sender=msg_data['sender'],
                            created_at=timezone.now()
                        )
            
            self.stdout.write('‚úÖ –°–æ–∑–¥–∞–Ω—ã –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ Telegram')
        except Exception as e:
            self.stdout.write(f'‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö Telegram: {e}')

    def _create_clickup_demo_data(self):
        """–°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–ª—è ClickUp"""
        try:
            from apps.clickup_int.models import ClickUpSettings, ClickUpTask
            
            demo_user = User.objects.get(email='demo@hrhelper.com')
            
            # –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ClickUp
            clickup_settings, created = ClickUpSettings.objects.get_or_create(
                user=demo_user,
                defaults={
                    'api_key': 'demo_clickup_api_key',
                    'team_id': 'demo_team_id',
                    'space_id': 'demo_space_id',
                    'folder_id': 'demo_folder_id',
                    'list_id': 'demo_list_id',
                    'is_active': True
                }
            )
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏
            tasks_data = [
                {
                    'task_id': 'demo_task_1',
                    'name': '–ù–∞–π—Ç–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏—é Backend Engineer',
                    'description': '–ü–æ–∏—Å–∫ –∏ –æ—Ç–±–æ—Ä –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–∞ –ø–æ–∑–∏—Ü–∏—é Java —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞',
                    'status': 'in progress',
                    'priority': 'high',
                    'assignee': 'demo_user'
                },
                {
                    'task_id': 'demo_task_2',
                    'name': '–ü—Ä–æ–≤–µ—Å—Ç–∏ –∏–Ω—Ç–µ—Ä–≤—å—é —Å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–º',
                    'description': '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é —Å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–º –Ω–∞ –ø–æ–∑–∏—Ü–∏—é Frontend Engineer',
                    'status': 'completed',
                    'priority': 'medium',
                    'assignee': 'demo_user'
                }
            ]
            
            for task_data in tasks_data:
                ClickUpTask.objects.get_or_create(
                    task_id=task_data['task_id'],
                    defaults={
                        'user': demo_user,
                        'name': task_data['name'],
                        'description': task_data['description'],
                        'status': task_data['status'],
                        'priority': task_data['priority'],
                        'assignee': task_data['assignee'],
                        'created_at': timezone.now()
                    }
                )
            
            self.stdout.write('‚úÖ –°–æ–∑–¥–∞–Ω—ã –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ ClickUp')
        except Exception as e:
            self.stdout.write(f'‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö ClickUp: {e}')

    def _create_notion_demo_data(self):
        """–°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–ª—è Notion"""
        try:
            from apps.notion_int.models import NotionSettings, NotionPage
            
            demo_user = User.objects.get(email='demo@hrhelper.com')
            
            # –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Notion
            notion_settings, created = NotionSettings.objects.get_or_create(
                user=demo_user,
                defaults={
                    'integration_token': 'demo_notion_token',
                    'database_id': 'demo_database_id',
                    'is_active': True
                }
            )
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            pages_data = [
                {
                    'page_id': 'demo_page_1',
                    'title': '–ö–∞–Ω–¥–∏–¥–∞—Ç: –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤',
                    'content': '–†–µ–∑—é–º–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ –Ω–∞ –ø–æ–∑–∏—Ü–∏—é Backend Engineer',
                    'status': 'active'
                },
                {
                    'page_id': 'demo_page_2',
                    'title': '–ö–∞–Ω–¥–∏–¥–∞—Ç: –ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞',
                    'content': '–†–µ–∑—é–º–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ –Ω–∞ –ø–æ–∑–∏—Ü–∏—é Frontend Engineer',
                    'status': 'active'
                }
            ]
            
            for page_data in pages_data:
                NotionPage.objects.get_or_create(
                    page_id=page_data['page_id'],
                    defaults={
                        'user': demo_user,
                        'title': page_data['title'],
                        'content': page_data['content'],
                        'status': page_data['status'],
                        'created_at': timezone.now()
                    }
                )
            
            self.stdout.write('‚úÖ –°–æ–∑–¥–∞–Ω—ã –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ Notion')
        except Exception as e:
            self.stdout.write(f'‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö Notion: {e}')

    def _create_gemini_demo_data(self):
        """–°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–ª—è Gemini"""
        try:
            from apps.gemini.models import ChatSession, ChatMessage
            
            demo_user = User.objects.get(email='demo@hrhelper.com')
            
            # –°–æ–∑–¥–∞–µ–º —á–∞—Ç-—Å–µ—Å—Å–∏–∏
            sessions_data = [
                {
                    'title': '–ê–Ω–∞–ª–∏–∑ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤',
                    'session_type': 'candidate_analysis',
                    'is_active': True
                },
                {
                    'title': '–ê–Ω–∞–ª–∏–∑ –≤–∞–∫–∞–Ω—Å–∏–∏: Backend Engineer',
                    'session_type': 'vacancy_analysis',
                    'is_active': True
                }
            ]
            
            for session_data in sessions_data:
                session, created = ChatSession.objects.get_or_create(
                    user=demo_user,
                    title=session_data['title'],
                    defaults={
                        'session_type': session_data['session_type'],
                        'is_active': session_data['is_active'],
                        'created_at': timezone.now()
                    }
                )
                
                if created:
                    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
                    messages_data = [
                        {
                            'role': 'user',
                            'content': '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞',
                            'message_type': 'text'
                        },
                        {
                            'role': 'assistant',
                            'content': '–ö–∞–Ω–¥–∏–¥–∞—Ç –∏–º–µ–µ—Ç —Ö–æ—Ä–æ—à–∏–π –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å Java –∏ Spring Framework. –†–µ–∫–æ–º–µ–Ω–¥—É—é –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é.',
                            'message_type': 'text'
                        }
                    ]
                    
                    for msg_data in messages_data:
                        ChatMessage.objects.create(
                            session=session,
                            role=msg_data['role'],
                            content=msg_data['content'],
                            message_type=msg_data['message_type'],
                            created_at=timezone.now()
                        )
            
            self.stdout.write('‚úÖ –°–æ–∑–¥–∞–Ω—ã –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ Gemini')
        except Exception as e:
            self.stdout.write(f'‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö Gemini: {e}')
