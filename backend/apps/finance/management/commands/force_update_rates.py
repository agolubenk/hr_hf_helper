from django.core.management.base import BaseCommand
from django.utils import timezone
from apps.finance.models import CurrencyRate
from apps.finance.services import CurrencyRateService
import requests
from decimal import Decimal


class Command(BaseCommand):
    help = "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"

    def add_arguments(self, parser):
        parser.add_argument(
            '--source',
            choices=['nbrb', 'market', 'manual'],
            default='nbrb',
            help='–ò—Å—Ç–æ—á–Ω–∏–∫ –∫—É—Ä—Å–æ–≤: nbrb (–ù–ë–†–ë), market (—Ä—ã–Ω–æ—á–Ω—ã–µ), manual (—Ä—É—á–Ω—ã–µ)',
        )
        parser.add_argument(
            '--usd-rate',
            type=float,
            help='–†—É—á–Ω–æ–π –∫—É—Ä—Å USD (—Ç–æ–ª—å–∫–æ —Å --source=manual)',
        )
        parser.add_argument(
            '--pln-rate',
            type=float,
            help='–†—É—á–Ω–æ–π –∫—É—Ä—Å PLN (—Ç–æ–ª—å–∫–æ —Å --source=manual)',
        )

    def handle(self, *args, **options):
        source = options['source']
        
        self.stdout.write(f"üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞: {source}")
        
        if source == 'nbrb':
            self._update_from_nbrb()
        elif source == 'market':
            self._update_from_market()
        elif source == 'manual':
            self._update_manual(options)
        else:
            self.stdout.write(self.style.ERROR(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫: {source}"))

    def _update_from_nbrb(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫—É—Ä—Å—ã –∏–∑ –ù–ë–†–ë"""
        self.stdout.write("üåê –ü–æ–ª—É—á–∞—é –∫—É—Ä—Å—ã –∏–∑ –ù–ë–†–ë...")
        
        try:
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –∏–∑ –ù–ë–†–ë
            nbrb_rates = CurrencyRateService._get_nbrb_rates()
            
            if nbrb_rates:
                self.stdout.write("‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –∫—É—Ä—Å—ã –∏–∑ –ù–ë–†–ë!")
                self._save_rates(nbrb_rates, "–ù–ë–†–ë")
            else:
                self.stdout.write(self.style.WARNING("‚ö†Ô∏è –ù–ë–†–ë –Ω–µ –¥–∞–ª –∫—É—Ä—Å–æ–≤, –ø—Ä–æ–±—É—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏..."))
                self._update_from_market()
                
        except Exception as e:
            self.stdout.write(self.style.ERROR(f"‚ùå –û—à–∏–±–∫–∞ –ù–ë–†–ë: {e}"))
            self.stdout.write("üîÑ –ü—Ä–æ–±—É—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏...")
            self._update_from_market()

    def _update_from_market(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫—É—Ä—Å—ã –∏–∑ —Ä—ã–Ω–æ—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        self.stdout.write("üìà –ü–æ–ª—É—á–∞—é –∫—É—Ä—Å—ã –∏–∑ —Ä—ã–Ω–æ—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...")
        
        try:
            # –ü—Ä–æ–±—É–µ–º exchangerate-api
            response = requests.get("https://api.exchangerate-api.com/v4/latest/BYN", timeout=10)
            if response.status_code == 200:
                data = response.json()
                rates = data.get("rates", {})
                
                market_rates = {
                    "BYN": {
                        "rate": 1.0,
                        "scale": 1,
                        "source": "market",
                        "status": "base"
                    }
                }
                
                if "USD" in rates:
                    usd_rate = 1.0 / float(rates["USD"])
                    market_rates["USD"] = {
                        "rate": usd_rate,
                        "scale": 1,
                        "source": "market",
                        "status": "market_rate"
                    }
                    self.stdout.write(f"‚úÖ USD: {usd_rate} BYN (—Ä—ã–Ω–æ—á–Ω—ã–π)")
                
                if "PLN" in rates:
                    pln_rate = 1.0 / float(rates["PLN"])
                    market_rates["PLN"] = {
                        "rate": pln_rate,
                        "scale": 1,
                        "source": "market",
                        "status": "market_rate"
                    }
                    self.stdout.write(f"‚úÖ PLN: {pln_rate} BYN (—Ä—ã–Ω–æ—á–Ω—ã–π)")
                
                self._save_rates(market_rates, "—Ä—ã–Ω–æ—á–Ω—ã–µ")
            else:
                self.stdout.write(self.style.ERROR("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä—ã–Ω–æ—á–Ω—ã–µ –∫—É—Ä—Å—ã"))
                
        except Exception as e:
            self.stdout.write(self.style.ERROR(f"‚ùå –û—à–∏–±–∫–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö –∫—É—Ä—Å–æ–≤: {e}"))

    def _update_manual(self, options):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫—É—Ä—Å—ã –≤—Ä—É—á–Ω—É—é"""
        usd_rate = options.get('usd_rate')
        pln_rate = options.get('pln_rate')
        
        if not usd_rate or not pln_rate:
            self.stdout.write(self.style.ERROR("‚ùå –î–ª—è —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω—É–∂–Ω—ã --usd-rate –∏ --pln-rate"))
            return
        
        manual_rates = {
            "BYN": {
                "rate": 1.0,
                "scale": 1,
                "source": "manual",
                "status": "base"
            },
            "USD": {
                "rate": usd_rate,
                "scale": 1,
                "source": "manual",
                "status": "manual"
            },
            "PLN": {
                "rate": pln_rate,
                "scale": 1,
                "source": "manual",
                "status": "manual"
            }
        }
        
        self.stdout.write(f"‚úÖ USD: {usd_rate} BYN (—Ä—É—á–Ω–æ–π)")
        self.stdout.write(f"‚úÖ PLN: {pln_rate} BYN (—Ä—É—á–Ω–æ–π)")
        
        self._save_rates(manual_rates, "—Ä—É—á–Ω—ã–µ")

    def _save_rates(self, rates_data, source_name):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫—É—Ä—Å—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        self.stdout.write(f"\nüíæ –°–æ—Ö—Ä–∞–Ω—è—é –∫—É—Ä—Å—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
        
        for code, rate_data in rates_data.items():
            try:
                rate = Decimal(str(rate_data['rate']))
                scale = rate_data['scale']
                
                obj, created = CurrencyRate.objects.update_or_create(
                    code=code,
                    defaults={
                        "rate": rate,
                        "scale": scale,
                        "fetched_at": timezone.now(),
                    },
                )
                
                if created:
                    self.stdout.write(f"üìù –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å –¥–ª—è {code}: {rate} BYN")
                else:
                    self.stdout.write(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å –¥–ª—è {code}: {rate} BYN")
                    
            except Exception as e:
                self.stdout.write(self.style.ERROR(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ {code}: {e}"))
        
        self.stdout.write(self.style.SUCCESS(f"üéâ –ö—É—Ä—Å—ã –∏–∑ {source_name} –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!"))
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ –∫—É—Ä—Å—ã
        self.stdout.write("\nüìä –ò–¢–û–ì–û–í–´–ï –ö–£–†–°–´:")
        for rate in CurrencyRate.objects.all().order_by('code'):
            self.stdout.write(f"   {rate.code}: {rate.rate} BYN ({rate.fetched_at.strftime('%d.%m.%Y %H:%M')})")

