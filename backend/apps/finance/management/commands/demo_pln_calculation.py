from django.core.management.base import BaseCommand
from apps.finance.models import CurrencyRate, PLNTax
from decimal import Decimal


class Command(BaseCommand):
    help = "–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞—Å—á–µ—Ç PLN —Å —É—á–µ—Ç–æ–º –Ω–∞–ª–æ–≥–æ–≤"

    def add_arguments(self, parser):
        parser.add_argument(
            '--usd-amount',
            type=float,
            default=3000.0,
            help='–°—É–º–º–∞ –≤ USD –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3000)',
        )

    def handle(self, *args, **options):
        usd_amount = Decimal(str(options['usd_amount']))
        
        self.stdout.write("üßÆ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –†–ê–°–ß–ï–¢–ê PLN –° –£–ß–ï–¢–û–ú –ù–ê–õ–û–ì–û–í")
        self.stdout.write("=" * 50)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç
        try:
            usd_rate = CurrencyRate.objects.get(code='USD')
            pln_rate = CurrencyRate.objects.get(code='PLN')
            
            self.stdout.write(f"\nüìä –ö–£–†–°–´ –í–ê–õ–Æ–¢:")
            self.stdout.write(f"   USD: {usd_rate.rate} BYN")
            self.stdout.write(f"   PLN: {pln_rate.rate} BYN")
            
        except CurrencyRate.DoesNotExist as e:
            self.stdout.write(self.style.ERROR(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç: {e}"))
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–ª–æ–≥–∏
        active_taxes = PLNTax.objects.filter(is_active=True)
        total_tax_rate = sum(tax.rate_decimal for tax in active_taxes)
        
        self.stdout.write(f"\nüí∞ –ù–ê–õ–û–ì–ò PLN:")
        if active_taxes.exists():
            for tax in active_taxes:
                self.stdout.write(f"   - {tax.name}: {tax.rate}%")
            self.stdout.write(f"   üìä –°—É–º–º–∞—Ä–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {total_tax_rate * 100:.2f}%")
        else:
            self.stdout.write("   ‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ª–æ–≥–æ–≤")
        
        # –†–∞—Å—á–µ—Ç
        self.stdout.write(f"\nüßÆ –†–ê–°–ß–ï–¢ –î–õ–Ø {usd_amount} USD:")
        
        # –®–∞–≥ 1: USD -> BYN
        byn_amount = usd_amount * usd_rate.rate
        self.stdout.write(f"\n1Ô∏è‚É£ USD ‚Üí BYN:")
        self.stdout.write(f"   {usd_amount} USD √ó {usd_rate.rate} BYN = {byn_amount} BYN")
        
        # –®–∞–≥ 2: BYN -> PLN (–±–∞–∑–æ–≤—ã–π –∫—É—Ä—Å)
        pln_gross = byn_amount / pln_rate.rate
        self.stdout.write(f"\n2Ô∏è‚É£ BYN ‚Üí PLN (–±–∞–∑–æ–≤—ã–π –∫—É—Ä—Å):")
        self.stdout.write(f"   {byn_amount} BYN √∑ {pln_rate.rate} BYN = {pln_gross} PLN")
        
        # –®–∞–≥ 3: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–ª–æ–≥–æ–≤
        if total_tax_rate > 0 and total_tax_rate < 1:
            pln_final = pln_gross / (1 - total_tax_rate)
            self.stdout.write(f"\n3Ô∏è‚É£ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–ª–æ–≥–æ–≤:")
            self.stdout.write(f"   {pln_gross} PLN √∑ (1 - {total_tax_rate}) = {pln_final} PLN")
            
            # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–ª–æ–≥–æ–≤
            self.stdout.write(f"\nüìã –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø –ù–ê–õ–û–ì–û–í:")
            breakdown = PLNTax.get_tax_breakdown(pln_final)
            
            for tax_detail in breakdown['taxes']:
                self.stdout.write(f"   - {tax_detail['name']}: {tax_detail['rate']}% = {tax_detail['amount']} PLN")
            
            self.stdout.write(f"   üìä –ò—Ç–æ–≥–æ –Ω–∞–ª–æ–≥–æ–≤: {breakdown['total_tax_amount']} PLN")
            self.stdout.write(f"   üí∞ Net —Å—É–º–º–∞: {breakdown['net_amount']} PLN")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞
            self.stdout.write(f"\n‚úÖ –ü–†–û–í–ï–†–ö–ê:")
            self.stdout.write(f"   Gross: {pln_final} PLN")
            self.stdout.write(f"   –ù–∞–ª–æ–≥–∏: {breakdown['total_tax_amount']} PLN")
            self.stdout.write(f"   Net: {breakdown['net_amount']} PLN")
            self.stdout.write(f"   –ü—Ä–æ–≤–µ—Ä–∫–∞: {pln_final} - {breakdown['total_tax_amount']} = {breakdown['net_amount']} PLN")
            
        else:
            pln_final = pln_gross
            self.stdout.write(f"\n3Ô∏è‚É£ –ë–µ–∑ –Ω–∞–ª–æ–≥–æ–≤:")
            self.stdout.write(f"   {pln_gross} PLN (–Ω–∞–ª–æ–≥–∏ –Ω–µ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è)")
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Ñ–æ—Ä–º—É–ª–∞
        self.stdout.write(f"\nüéØ –ò–¢–û–ì–û–í–ê–Ø –§–û–†–ú–£–õ–ê:")
        if total_tax_rate > 0 and total_tax_rate < 1:
            self.stdout.write(f"   PLN = (USD √ó –∫—É—Ä—Å_USD) √∑ –∫—É—Ä—Å_PLN √∑ (1 - {total_tax_rate})")
            self.stdout.write(f"   PLN = ({usd_amount} √ó {usd_rate.rate}) √∑ {pln_rate.rate} √∑ (1 - {total_tax_rate})")
            self.stdout.write(f"   PLN = {pln_final} PLN")
        else:
            self.stdout.write(f"   PLN = (USD √ó –∫—É—Ä—Å_USD) √∑ –∫—É—Ä—Å_PLN")
            self.stdout.write(f"   PLN = ({usd_amount} √ó {usd_rate.rate}) √∑ {pln_rate.rate}")
            self.stdout.write(f"   PLN = {pln_final} PLN")
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—Ç—ã–º —Ä–∞—Å—á–µ—Ç–æ–º
        simple_pln = byn_amount / pln_rate.rate
        difference = pln_final - simple_pln
        difference_percent = (difference / simple_pln) * 100
        
        self.stdout.write(f"\nüìà –°–†–ê–í–ù–ï–ù–ò–ï:")
        self.stdout.write(f"   –ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç: {simple_pln} PLN")
        self.stdout.write(f"   –° –Ω–∞–ª–æ–≥–∞–º–∏: {pln_final} PLN")
        self.stdout.write(f"   –†–∞–∑–Ω–∏—Ü–∞: {difference} PLN ({difference_percent:+.2f}%)")
        
        self.stdout.write(f"\nüí° –í–´–í–û–î:")
        if total_tax_rate > 0:
            self.stdout.write(f"   –ù–∞–ª–æ–≥–∏ —É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É –Ω–∞ {difference_percent:.2f}%")
            self.stdout.write(f"   –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –ø–ª–∞—Ç–∏—Ç—å –±–æ–ª—å—à–µ, —á—Ç–æ–±—ã")
            self.stdout.write(f"   —Ä–∞–±–æ—Ç–Ω–∏–∫ –ø–æ–ª—É—á–∏–ª —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç {simple_pln} PLN –Ω–∞ —Ä—É–∫–∏")
        else:
            self.stdout.write(f"   –ù–∞–ª–æ–≥–∏ –Ω–µ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è, —Ä–∞—Å—á–µ—Ç –ø—Ä–æ—Å—Ç–æ–π")
        
        self.stdout.write(f"\nüîß –ö–û–ú–ê–ù–î–´ –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        self.stdout.write(f"   python manage.py demo_pln_calculation --usd-amount=5000")
        self.stdout.write(f"   python manage.py test_salary_recalculation")
        self.stdout.write(f"   python manage.py update_salary_currency_amounts")

