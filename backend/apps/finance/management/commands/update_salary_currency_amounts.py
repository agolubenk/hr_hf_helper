from django.core.management.base import BaseCommand
from apps.finance.models import SalaryRange, CurrencyRate


class Command(BaseCommand):
    help = "–û–±–Ω–æ–≤–ª—è–µ—Ç –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –¥–ª—è –≤—Å–µ—Ö –∑–∞—Ä–ø–ª–∞—Ç–Ω—ã—Ö –≤–∏–ª–æ–∫"

    def add_arguments(self, parser):
        parser.add_argument(
            '--force',
            action='store_true',
            help='–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–∏–ª–æ–∫',
        )
        parser.add_argument(
            '--active-only',
            action='store_true',
            help='–û–±–Ω–æ–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –≤–∏–ª–∫–∏',
        )

    def handle(self, *args, **options):
        self.stdout.write("üîÑ –û–±–Ω–æ–≤–ª—è—é –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –¥–ª—è –∑–∞—Ä–ø–ª–∞—Ç–Ω—ã—Ö –≤–∏–ª–æ–∫...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
        try:
            usd_rate = CurrencyRate.objects.get(code='USD')
            pln_rate = CurrencyRate.objects.get(code='PLN')
            
            self.stdout.write(f"üìä –¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã:")
            self.stdout.write(f"   USD: {usd_rate.rate} BYN")
            self.stdout.write(f"   PLN: {pln_rate.rate} BYN")
            
        except CurrencyRate.DoesNotExist as e:
            self.stdout.write(self.style.ERROR(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç: {e}"))
            self.stdout.write("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python manage.py migrate finance 0006_seed_currency_rates")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–∏–ª–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if options['active_only']:
            salary_ranges = SalaryRange.objects.filter(is_active=True)
            self.stdout.write(f"üìã –û–±–Ω–æ–≤–ª—è—é —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –≤–∏–ª–∫–∏...")
        else:
            salary_ranges = SalaryRange.objects.all()
            self.stdout.write(f"üìã –û–±–Ω–æ–≤–ª—è—é –≤—Å–µ –≤–∏–ª–∫–∏...")
        
        if not salary_ranges.exists():
            self.stdout.write(self.style.WARNING("‚ö†Ô∏è –ù–µ—Ç –∑–∞—Ä–ø–ª–∞—Ç–Ω—ã—Ö –≤–∏–ª–æ–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"))
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–ª–∫–∏
        updated_count = 0
        error_count = 0
        
        for salary_range in salary_ranges:
            try:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                old_byn_min = salary_range.salary_min_byn
                old_byn_max = salary_range.salary_max_byn
                old_pln_min = salary_range.salary_min_pln
                old_pln_max = salary_range.salary_max_pln
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å—ã
                salary_range.update_currency_amounts()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è
                changed = (
                    old_byn_min != salary_range.salary_min_byn or
                    old_byn_max != salary_range.salary_max_byn or
                    old_pln_min != salary_range.salary_min_pln or
                    old_pln_max != salary_range.salary_max_pln
                )
                
                if changed or options['force']:
                    updated_count += 1
                    self.stdout.write(
                        f"‚úÖ {salary_range.vacancy.name} - {salary_range.grade.name}: "
                        f"USD {salary_range.salary_min_usd}-{salary_range.salary_max_usd} ‚Üí "
                        f"BYN {salary_range.salary_min_byn}-{salary_range.salary_max_byn}, "
                        f"PLN {salary_range.salary_min_pln}-{salary_range.salary_max_pln}"
                    )
                else:
                    self.stdout.write(
                        f"‚è≠Ô∏è  {salary_range.vacancy.name} - {salary_range.grade.name}: "
                        f"–∫—É—Ä—Å—ã —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã"
                    )
                    
            except Exception as e:
                error_count += 1
                self.stdout.write(
                    self.style.ERROR(
                        f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ {salary_range.vacancy.name} - {salary_range.grade.name}: {e}"
                    )
                )
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stdout.write(f"\nüìä –ò–¢–û–ì–ò:")
        self.stdout.write(f"   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_count}")
        self.stdout.write(f"   ‚ùå –û—à–∏–±–æ–∫: {error_count}")
        self.stdout.write(f"   üìã –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {salary_ranges.count()}")
        
        if updated_count > 0:
            self.stdout.write(self.style.SUCCESS("üéâ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!"))
        elif error_count == 0:
            self.stdout.write(self.style.SUCCESS("‚úÖ –í—Å–µ –∫—É—Ä—Å—ã —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã!"))
        else:
            self.stdout.write(self.style.WARNING("‚ö†Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏"))
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if error_count > 0:
            self.stdout.write(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            self.stdout.write(f"   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç: python manage.py check_currency_rates")
            self.stdout.write(f"   - –û–±–Ω–æ–≤–∏—Ç–µ –∫—É—Ä—Å—ã: python manage.py update_nbrb_rates")
            self.stdout.write(f"   - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: python manage.py update_salary_currency_amounts --force")

