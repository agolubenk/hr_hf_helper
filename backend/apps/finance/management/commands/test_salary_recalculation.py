from django.core.management.base import BaseCommand
from apps.finance.models import SalaryRange, CurrencyRate
from decimal import Decimal


class Command(BaseCommand):
    help = "–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–µ—Ä–µ—Å—á–µ—Ç –∑–∞—Ä–ø–ª–∞—Ç–Ω—ã—Ö –≤–∏–ª–æ–∫"

    def handle(self, *args, **options):
        self.stdout.write("üß™ –¢–µ—Å—Ç–∏—Ä—É—é –ø–µ—Ä–µ—Å—á–µ—Ç –∑–∞—Ä–ø–ª–∞—Ç–Ω—ã—Ö –≤–∏–ª–æ–∫...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç
        try:
            usd_rate = CurrencyRate.objects.get(code='USD')
            pln_rate = CurrencyRate.objects.get(code='PLN')
            
            self.stdout.write(f"\nüìä –¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç:")
            self.stdout.write(f"   USD: {usd_rate.rate} BYN")
            self.stdout.write(f"   PLN: {pln_rate.rate} BYN")
            
        except CurrencyRate.DoesNotExist as e:
            self.stdout.write(self.style.ERROR(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç: {e}"))
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é –∑–∞—Ä–ø–ª–∞—Ç–Ω—É—é –≤–∏–ª–∫—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        salary_range = SalaryRange.objects.first()
        
        if not salary_range:
            self.stdout.write(self.style.WARNING("‚ö†Ô∏è –ù–µ—Ç –∑–∞—Ä–ø–ª–∞—Ç–Ω—ã—Ö –≤–∏–ª–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"))
            return
        
        self.stdout.write(f"\nüîç –¢–µ—Å—Ç–∏—Ä—É—é –≤–∏–ª–∫—É: {salary_range}")
        self.stdout.write(f"   USD: {salary_range.salary_min_usd} - {salary_range.salary_max_usd}")
        self.stdout.write(f"   BYN: {salary_range.salary_min_byn} - {salary_range.salary_max_byn}")
        self.stdout.write(f"   PLN: {salary_range.salary_min_pln} - {salary_range.salary_max_pln}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        old_byn_min = salary_range.salary_min_byn
        old_byn_max = salary_range.salary_max_byn
        old_pln_min = salary_range.salary_min_pln
        old_pln_max = salary_range.salary_max_pln
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ—Å—á–µ—Ç
        self.stdout.write(f"\nüîÑ –í—ã–ø–æ–ª–Ω—è—é –ø–µ—Ä–µ—Å—á–µ—Ç...")
        
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å—ã
            salary_range.update_currency_amounts()
            
            self.stdout.write(f"‚úÖ –ü–µ—Ä–µ—Å—á–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            self.stdout.write(f"\nüìä –ù–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:")
            self.stdout.write(f"   BYN: {salary_range.salary_min_byn} - {salary_range.salary_max_byn}")
            self.stdout.write(f"   PLN: {salary_range.salary_min_pln} - {salary_range.salary_max_pln}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            self.stdout.write(f"\nüìà –ò–∑–º–µ–Ω–µ–Ω–∏—è:")
            if old_byn_min != salary_range.salary_min_byn:
                self.stdout.write(f"   BYN min: {old_byn_min} ‚Üí {salary_range.salary_min_byn}")
            if old_byn_max != salary_range.salary_max_byn:
                self.stdout.write(f"   BYN max: {old_byn_max} ‚Üí {salary_range.salary_max_byn}")
            if old_pln_min != salary_range.salary_min_pln:
                self.stdout.write(f"   PLN min: {old_pln_min} ‚Üí {salary_range.salary_min_pln}")
            if old_pln_max != salary_range.salary_max_pln:
                self.stdout.write(f"   PLN max: {old_pln_max} ‚Üí {salary_range.salary_max_pln}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ä–∞—Å—á–µ—Ç–æ–≤
            self.stdout.write(f"\nüßÆ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—á–µ—Ç–æ–≤:")
            
            # BYN —Ä–∞—Å—á–µ—Ç
            expected_byn_min = salary_range.salary_min_usd * usd_rate.rate
            expected_byn_max = salary_range.salary_max_usd * usd_rate.rate
            
            self.stdout.write(f"   BYN min: {salary_range.salary_min_usd} √ó {usd_rate.rate} = {expected_byn_min}")
            self.stdout.write(f"   BYN max: {salary_range.salary_max_usd} √ó {usd_rate.rate} = {expected_byn_max}")
            
            if abs(float(salary_range.salary_min_byn) - float(expected_byn_min)) < 0.01:
                self.stdout.write(self.style.SUCCESS("   ‚úÖ BYN min: —Ä–∞—Å—á–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω"))
            else:
                self.stdout.write(self.style.ERROR("   ‚ùå BYN min: —Ä–∞—Å—á–µ—Ç –Ω–µ–≤–µ—Ä–µ–Ω"))
            
            if abs(float(salary_range.salary_max_byn) - float(expected_byn_max)) < 0.01:
                self.stdout.write(self.style.SUCCESS("   ‚úÖ BYN max: —Ä–∞—Å—á–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω"))
            else:
                self.stdout.write(self.style.ERROR("   ‚ùå BYN max: —Ä–∞—Å—á–µ—Ç –Ω–µ–≤–µ—Ä–µ–Ω"))
            
            # PLN —Ä–∞—Å—á–µ—Ç —Å —É—á–µ—Ç–æ–º –Ω–∞–ª–æ–≥–æ–≤
            from apps.finance.models import PLNTax
            active_taxes = PLNTax.objects.filter(is_active=True)
            total_tax_rate = sum(tax.rate_decimal for tax in active_taxes)
            
            pln_gross_min = (salary_range.salary_min_usd * usd_rate.rate) / pln_rate.rate
            pln_gross_max = (salary_range.salary_max_usd * usd_rate.rate) / pln_rate.rate
            
            if total_tax_rate > 0 and total_tax_rate < 1:
                expected_pln_min = pln_gross_min / (1 - total_tax_rate)
                expected_pln_max = pln_gross_max / (1 - total_tax_rate)
                
                self.stdout.write(f"   PLN min: {pln_gross_min} √∑ (1 - {total_tax_rate}) = {expected_pln_min}")
                self.stdout.write(f"   PLN max: {pln_gross_max} √∑ (1 - {total_tax_rate}) = {expected_pln_max}")
            else:
                expected_pln_min = pln_gross_min
                expected_pln_max = pln_gross_max
                
                self.stdout.write(f"   PLN min: {pln_gross_min} (–±–µ–∑ –Ω–∞–ª–æ–≥–æ–≤)")
                self.stdout.write(f"   PLN max: {pln_gross_max} (–±–µ–∑ –Ω–∞–ª–æ–≥–æ–≤)")
            
            if abs(float(salary_range.salary_min_pln) - float(expected_pln_min)) < 0.01:
                self.stdout.write(self.style.SUCCESS("   ‚úÖ PLN min: —Ä–∞—Å—á–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω"))
            else:
                self.stdout.write(self.style.ERROR("   ‚ùå PLN min: —Ä–∞—Å—á–µ—Ç –Ω–µ–≤–µ—Ä–µ–Ω"))
            
            if abs(float(salary_range.salary_max_pln) - float(expected_pln_max)) < 0.01:
                self.stdout.write(self.style.SUCCESS("   ‚úÖ PLN max: —Ä–∞—Å—á–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω"))
            else:
                self.stdout.write(self.style.ERROR("   ‚ùå PLN max: —Ä–∞—Å—á–µ—Ç –Ω–µ–≤–µ—Ä–µ–Ω"))
            
            self.stdout.write(self.style.SUCCESS("\nüéâ –¢–µ—Å—Ç –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!"))
            
        except Exception as e:
            self.stdout.write(self.style.ERROR(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—á–µ—Ç–µ: {e}"))
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Å—á–µ—Ç –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
        self.stdout.write(f"\nüîÑ –¢–µ—Å—Ç–∏—Ä—É—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Å—á–µ—Ç –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏...")
        
        try:
            # –ò–∑–º–µ–Ω—è–µ–º USD —Å—É–º–º—É
            old_usd_min = salary_range.salary_min_usd
            salary_range.salary_min_usd = Decimal('1000.00')
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º (–¥–æ–ª–∂–µ–Ω –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Å—á–µ—Ç)
            salary_range.save()
            
            self.stdout.write(f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Å—á–µ—Ç –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            self.stdout.write(f"   USD min: {old_usd_min} ‚Üí {salary_range.salary_min_usd}")
            self.stdout.write(f"   BYN min: {salary_range.salary_min_byn}")
            self.stdout.write(f"   PLN min: {salary_range.salary_min_pln}")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            salary_range.salary_min_usd = old_usd_min
            salary_range.save()
            
        except Exception as e:
            self.stdout.write(self.style.ERROR(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ—Å—á–µ—Ç–∞: {e}"))
        
        self.stdout.write(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        self.stdout.write(f"   - –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –≤–∏–ª–æ–∫: python manage.py update_salary_currency_amounts")
        self.stdout.write(f"   - –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—É—Ä—Å–æ–≤: python manage.py check_currency_rates")
        self.stdout.write(f"   - –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤: python manage.py update_nbrb_rates")
