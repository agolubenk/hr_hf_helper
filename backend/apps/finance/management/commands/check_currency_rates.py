from django.core.management.base import BaseCommand
from django.utils import timezone
from apps.finance.models import CurrencyRate
from apps.finance.services import CurrencyRateService


class Command(BaseCommand):
    help = "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Å –ù–ë–†–ë"

    def handle(self, *args, **options):
        self.stdout.write("üîç –ü—Ä–æ–≤–µ—Ä—è—é —Ç–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É—Ä—Å—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        self.stdout.write("\nüìä –ö–£–†–°–´ –í –ë–ê–ó–ï –î–ê–ù–ù–´–•:")
        db_rates = CurrencyRate.objects.all().order_by('code')
        
        if not db_rates.exists():
            self.stdout.write(self.style.ERROR("‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç!"))
            self.stdout.write("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python manage.py migrate finance 0006_seed_currency_rates")
            return
        
        for rate in db_rates:
            status = rate.status_info
            if status == "–ë–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞":
                color = self.style.SUCCESS
            elif status == "–°–µ–≥–æ–¥–Ω—è":
                color = self.style.SUCCESS
            elif status == "–í—á–µ—Ä–∞":
                color = self.style.WARNING
            else:
                color = self.style.ERROR
            
            self.stdout.write(
                f"   {rate.code}: {rate.rate} BYN "
                f"({rate.fetched_at.strftime('%d.%m.%Y %H:%M')}) - "
                f"{color(status)}"
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É—Ä—Å—ã –∏–∑ –ù–ë–†–ë
        self.stdout.write("\nüåê –ö–£–†–°–´ –ò–ó –ù–ë–†–ë:")
        try:
            nbrb_rates = CurrencyRateService.get_latest_rates()
            
            if nbrb_rates:
                for code, rate_data in nbrb_rates.items():
                    if rate_data:
                        rate = rate_data['rate']
                        source = rate_data['source']
                        status = rate_data['status']
                        
                        if status == "official":
                            color = self.style.SUCCESS
                            icon = "‚úÖ"
                        elif status == "nbrb_not_available":
                            color = self.style.WARNING
                            icon = "‚ö†Ô∏è"
                        else:
                            color = self.style.SUCCESS
                            icon = "‚úÖ"
                        
                        self.stdout.write(
                            f"   {icon} {code}: {rate} BYN "
                            f"({color(source)}) - {color(status)}"
                        )
                        
                        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
                        try:
                            db_rate = CurrencyRate.objects.get(code=code)
                            if abs(float(db_rate.rate) - float(rate)) > 0.01:
                                self.stdout.write(
                                    self.style.WARNING(
                                        f"      ‚ö†Ô∏è  –†–∞–∑–Ω–∏—Ü–∞ —Å –ë–î: {db_rate.rate} BYN "
                                        f"(—Ä–∞–∑–Ω–∏—Ü–∞: {abs(float(db_rate.rate) - float(rate)):.4f})"
                                    )
                                )
                            else:
                                self.stdout.write(
                                    self.style.SUCCESS(
                                        f"      ‚úÖ –°–æ–≤–ø–∞–¥–∞–µ—Ç —Å –ë–î: {db_rate.rate} BYN"
                                    )
                                )
                        except CurrencyRate.DoesNotExist:
                            self.stdout.write(
                                self.style.ERROR(f"      ‚ùå –ù–µ—Ç –≤ –ë–î: {code}")
                            )
            else:
                self.stdout.write(self.style.ERROR("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –∏–∑ –ù–ë–†–ë"))
                
        except Exception as e:
            self.stdout.write(self.style.ERROR(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –∏–∑ –ù–ë–†–ë: {e}"))
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        self.stdout.write("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∫—É—Ä—Å—ã
        outdated_rates = db_rates.exclude(code='BYN').filter(
            fetched_at__lt=timezone.now() - timezone.timedelta(days=1)
        )
        
        if outdated_rates.exists():
            self.stdout.write(
                self.style.WARNING(
                    f"‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ {outdated_rates.count()} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∫—É—Ä—Å–æ–≤"
                )
            )
            self.stdout.write("   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python manage.py update_nbrb_rates")
        else:
            self.stdout.write(self.style.SUCCESS("‚úÖ –í—Å–µ –∫—É—Ä—Å—ã –∞–∫—Ç—É–∞–ª—å–Ω—ã"))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ fallback –∫—É—Ä—Å—ã
        fallback_rates = db_rates.filter(
            rate__in=[2.85, 0.72]  # Fallback –∑–Ω–∞—á–µ–Ω–∏—è
        )
        
        if fallback_rates.exists():
            self.stdout.write(
                self.style.WARNING(
                    f"‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ {fallback_rates.count()} fallback –∫—É—Ä—Å–æ–≤"
                )
            )
            self.stdout.write("   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python manage.py update_nbrb_rates --force")
        
        self.stdout.write("\nüéØ –ö–û–ú–ê–ù–î–´ –î–õ–Ø –û–ë–ù–û–í–õ–ï–ù–ò–Ø:")
        self.stdout.write("   python manage.py update_nbrb_rates          # –û–±–Ω–æ–≤–∏—Ç—å –∏–∑ –ù–ë–†–ë")
        self.stdout.write("   python manage.py update_nbrb_rates --force  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
        self.stdout.write("   python manage.py migrate finance 0006_seed_currency_rates  # –°–æ–∑–¥–∞—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã")
