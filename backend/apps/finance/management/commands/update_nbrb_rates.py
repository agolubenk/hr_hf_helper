from django.core.management.base import BaseCommand
from django.utils import timezone
from apps.finance.models import CurrencyRate, Currency
from apps.finance.services import CurrencyRateService


class Command(BaseCommand):
    help = "–û–±–Ω–æ–≤–ª—è–µ—Ç –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç (BYN, USD, PLN) –∏–∑ –ù–ë–†–ë"

    def add_arguments(self, parser):
        parser.add_argument(
            '--force',
            action='store_true',
            help='–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö',
        )

    def handle(self, *args, **options):
        self.stdout.write("üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç –∏–∑ –ù–ë–†–ë...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫—É—Ä—Å—ã –∏–∑ –ù–ë–†–ë
            rates_info = CurrencyRateService.get_latest_rates()
            
            if not rates_info:
                self.stdout.write(self.style.ERROR("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã"))
                if not options['force']:
                    return
                rates_info = CurrencyRateService._get_fallback_rates_with_info()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å—ã –¥–ª—è –∫–∞–∂–¥–æ–π –≤–∞–ª—é—Ç—ã
            for code in [Currency.BYN, Currency.USD, Currency.PLN]:
                try:
                    if code not in rates_info or not rates_info[code]:
                        self.stdout.write(self.style.ERROR(f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {code}"))
                        continue
                    
                    currency_data = rates_info[code]
                    rate = currency_data["rate"]
                    scale = currency_data["scale"]
                    source = currency_data["source"]
                    status = currency_data["status"]
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    if status == "base":
                        self.stdout.write(f"‚úÖ {code}: {rate} (–±–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞)")
                    elif status == "official":
                        self.stdout.write(f"‚úÖ {code}: {rate} (–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –ù–ë–†–ë)")
                    elif status == "nbrb_not_available":
                        note = currency_data.get("note", "")
                        market_info = currency_data.get("market_rate")
                        
                        if market_info:
                            market_rate = market_info.get("rate", "N/A")
                            market_source = market_info.get("source", "N/A")
                            self.stdout.write(self.style.WARNING(f"‚ö†Ô∏è  {code}: {rate} (fallback) - {note}"))
                            self.stdout.write(f"   üí° –†—ã–Ω–æ—á–Ω—ã–π –∫—É—Ä—Å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {market_rate} BYN (–∏—Å—Ç–æ—á–Ω–∏–∫: {market_source})")
                        else:
                            self.stdout.write(self.style.WARNING(f"‚ö†Ô∏è  {code}: {rate} (fallback) - {note}"))
                    else:
                        self.stdout.write(f"‚úÖ {code}: {rate} (—Å—Ç–∞—Ç—É—Å: {status})")

                    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
                    obj, created = CurrencyRate.objects.update_or_create(
                        code=code,
                        defaults={
                            "rate": rate,
                            "scale": scale,
                            "fetched_at": timezone.now(),
                        },
                    )
                    
                    if created:
                        self.stdout.write(f"üìù –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å –¥–ª—è {code}")
                    else:
                        self.stdout.write(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∑–∞–ø–∏—Å—å –¥–ª—è {code}")
                        
                except Exception as e:
                    self.stdout.write(self.style.ERROR(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ {code}: {e}"))
                    if not options['force']:
                        raise

            self.stdout.write(self.style.SUCCESS("üéâ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"))
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            if any(rate.get("status") == "nbrb_not_available" for rate in rates_info.values() if rate):
                self.stdout.write(self.style.WARNING("\n‚ö†Ô∏è  –í–∞–∂–Ω–æ:"))
                self.stdout.write("   - –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –ù–ë–†–ë –µ—â–µ –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è")
                self.stdout.write("   - –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è fallback –∑–Ω–∞—á–µ–Ω–∏—è")
                self.stdout.write("   - –ö—É—Ä—Å—ã –±—É–¥—É—Ç –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ–≥–¥–∞ –ù–ë–†–ë –∏—Ö –æ–ø—É–±–ª–∏–∫—É–µ—Ç")
                self.stdout.write("   - –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∂–µ")
            
        except Exception as e:
            self.stdout.write(self.style.ERROR(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}"))
            if not options['force']:
                raise
