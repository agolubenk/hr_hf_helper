"""
Django –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç –ù–ë–†–ë
"""
from django.core.management.base import BaseCommand
from logic.base.currency_service import currency_service
import logging

logger = logging.getLogger(__name__)


class Command(BaseCommand):
    help = '–û–±–Ω–æ–≤–ª—è–µ—Ç –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –ù–ë–†–ë –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö'

    def add_arguments(self, parser):
        parser.add_argument(
            '--force',
            action='store_true',
            help='–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏)',
        )

    def handle(self, *args, **options):
        self.stdout.write(self.style.SUCCESS('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç –ù–ë–†–ë...'))
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API
            self.stdout.write('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ù–ë–†–ë API...')
            test_response = currency_service.test_connection()
            
            if not test_response.success:
                self.stdout.write(
                    self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ù–ë–†–ë API: {test_response.error}')
                )
                return
            
            self.stdout.write(self.style.SUCCESS('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ù–ë–†–ë API —É—Å–ø–µ—à–Ω–æ'))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            self.stdout.write('üí± –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...')
            result = currency_service.update_currency_rates_in_db()
            
            if result['updated_count'] > 0:
                self.stdout.write(
                    self.style.SUCCESS(f'‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ {result["updated_count"]} –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç')
                )
                
                # –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª–∏ –ø–æ –∫–∞–∂–¥–æ–π –≤–∞–ª—é—Ç–µ
                for currency, data in result['results'].items():
                    if data['success']:
                        self.stdout.write(
                            f'  üí∞ {currency}: {data["rate"]} BYN '
                            f'({"—Å–æ–∑–¥–∞–Ω" if data["created"] else "–æ–±–Ω–æ–≤–ª–µ–Ω"})'
                        )
                    else:
                        self.stdout.write(
                            self.style.WARNING(f'  ‚ö†Ô∏è {currency}: –æ—à–∏–±–∫–∞ - {data["error"]}')
                        )
            else:
                self.stdout.write(
                    self.style.WARNING('‚ö†Ô∏è –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –Ω–µ –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã')
                )
                
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤: {e}')
            )
            logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç: {e}')
            raise
