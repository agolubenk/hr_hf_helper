from django.contrib import admin
from django.http import HttpResponseRedirect
from django.urls import path
from django.contrib import messages
from django.utils.html import format_html
from .models import Grade, CurrencyRate, PLNTax, SalaryRange, Benchmark, BenchmarkSettings, DataSource, VacancyField, Domain, HHVacancyTemp


@admin.register(Grade)
class GradeAdmin(admin.ModelAdmin):
    list_display = ("name",)
    search_fields = ("name",)


@admin.register(CurrencyRate)
class CurrencyRateAdmin(admin.ModelAdmin):
    list_display = ("code", "display_rate", "scale", "fetched_at", "status_display", "last_update_info")
    readonly_fields = ("fetched_at", "last_update_info", "status_display")
    list_filter = ("code", "fetched_at")
    search_fields = ("code",)
    
    def get_urls(self):
        urls = super().get_urls()
        custom_urls = [
            path('update-rates/', self.update_rates, name='finance_currencyrate_update_rates'),
        ]
        return custom_urls + urls
    
    def update_rates(self, request):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –∏–∑ –ù–ë–†–ë"""
        try:
            from django.core.management import call_command
            from io import StringIO
            
            # –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≤—ã–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã
            out = StringIO()
            call_command('update_nbrb_rates', stdout=out, stderr=out)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            output = out.getvalue()
            if "üéâ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!" in output:
                messages.success(request, "–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ –ù–ë–†–ë!")
            else:
                messages.warning(request, f"–ö—É—Ä—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏: {output}")
                
        except Exception as e:
            messages.error(request, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤: {e}")
        
        return HttpResponseRedirect("../")
    
    def status_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∫—É—Ä—Å–∞ —Å —Ü–≤–µ—Ç–æ–≤–æ–π –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π"""
        status = obj.status_info
        
        if status == "–ë–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞":
            color = "#28a745"  # –∑–µ–ª–µ–Ω—ã–π
        elif status == "–°–µ–≥–æ–¥–Ω—è":
            color = "#17a2b8"  # —Å–∏–Ω–∏–π
        elif status == "–í—á–µ—Ä–∞":
            color = "#ffc107"  # –∂–µ–ª—Ç—ã–π
        elif "–¥–Ω. –Ω–∞–∑–∞–¥" in status:
            color = "#fd7e14"  # –æ—Ä–∞–Ω–∂–µ–≤—ã–π
        else:
            color = "#dc3545"  # –∫—Ä–∞—Å–Ω—ã–π
        
        return format_html(
            '<span style="color: {}; font-weight: bold;">{}</span>',
            color, status
        )
    status_display.short_description = "–°—Ç–∞—Ç—É—Å"
    
    def display_rate(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫—É—Ä—Å —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        return obj.display_rate
    display_rate.short_description = "–ö—É—Ä—Å"
    
    def last_update_info(self, obj):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å –∫–Ω–æ–ø–∫–æ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        if obj.fetched_at:
            return format_html(
                '<div style="display: flex; align-items: center; gap: 10px;">'
                '<span>{}</span>'
                '<a href="update-rates/" class="button" style="background: #79aec8; color: white; padding: 5px 10px; text-decoration: none; border-radius: 3px;">'
                'üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å—ã'
                '</a>'
                '</div>',
                obj.fetched_at.strftime("%d.%m.%Y %H:%M:%S")
            )
        return "–ù–µ –æ–±–Ω–æ–≤–ª—è–ª–æ—Å—å"
    
    last_update_info.short_description = "–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"
    
    def changelist_view(self, request, extra_context=None):
        """–î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫"""
        extra_context = extra_context or {}
        extra_context['show_update_button'] = True
        return super().changelist_view(request, extra_context)


@admin.register(PLNTax)
class PLNTaxAdmin(admin.ModelAdmin):
    list_display = ("name", "rate_display", "is_active", "total_tax_rate_display", "created_at")
    list_filter = ("is_active", "created_at")
    search_fields = ("name",)
    readonly_fields = ("created_at", "updated_at", "total_tax_rate_display")
    fieldsets = (
        (None, {
            'fields': ('name', 'rate', 'is_active')
        }),
        ('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('created_at', 'updated_at', 'total_tax_rate_display'),
            'classes': ('collapse',)
        }),
    )
    
    def rate_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞–≤–∫—É —Å —Å–∏–º–≤–æ–ª–æ–º %"""
        return f"{obj.rate}%"
    rate_display.short_description = "–°—Ç–∞–≤–∫–∞"
    
    def total_tax_rate_display(self, obj):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â—É—é –Ω–∞–ª–æ–≥–æ–≤—É—é —Å—Ç–∞–≤–∫—É –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ª–æ–≥–æ–≤"""
        active_taxes = PLNTax.objects.filter(is_active=True)
        total_rate = sum(tax.rate for tax in active_taxes)
        if total_rate > 0:
            return format_html(
                '<span style="color: #28a745; font-weight: bold;">{}%</span>',
                total_rate
            )
        return "0%"
    total_tax_rate_display.short_description = "–û–±—â–∞—è —Å—Ç–∞–≤–∫–∞"
    
    def save_model(self, request, obj, form, change):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏"""
        try:
            obj.clean()
            super().save_model(request, obj, form, change)
        except Exception as e:
            messages.error(request, f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
            return
    
    def changelist_view(self, request, extra_context=None):
        """–î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å—á–µ—Ç–∞—Ö –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç"""
        extra_context = extra_context or {}
        
        # –ü—Ä–∏–º–µ—Ä —Ä–∞—Å—á–µ—Ç–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        from decimal import Decimal
        example_gross = Decimal('10000.00')
        breakdown = PLNTax.get_tax_breakdown(example_gross)
        
        extra_context['example_calculation'] = {
            'gross_amount': example_gross,
            'breakdown': breakdown
        }
        
        return super().changelist_view(request, extra_context)


@admin.register(SalaryRange)
class SalaryRangeAdmin(admin.ModelAdmin):
    list_display = ("vacancy", "grade", "salary_range_usd", "salary_range_byn", "salary_range_pln", "salary_range_eur", "is_active", "created_at")
    list_filter = ("is_active", "grade", "vacancy", "created_at")
    search_fields = ("vacancy__name", "grade__name")
    readonly_fields = ("created_at", "updated_at", "salary_range_usd", "salary_range_byn", "salary_range_pln", "salary_range_eur")
    fieldsets = (
        (None, {
            'fields': ('vacancy', 'grade', 'is_active')
        }),
        ('–ó–∞—Ä–ø–ª–∞—Ç–∞ –≤ USD', {
            'fields': ('salary_min_usd', 'salary_max_usd')
        }),
        ('–ó–∞—Ä–ø–ª–∞—Ç–∞ –≤ BYN (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)', {
            'fields': ('salary_min_byn', 'salary_max_byn'),
            'classes': ('collapse',)
        }),
        ('–ó–∞—Ä–ø–ª–∞—Ç–∞ –≤ PLN (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)', {
            'fields': ('salary_min_pln', 'salary_max_pln'),
            'classes': ('collapse',)
        }),
        ('–ó–∞—Ä–ø–ª–∞—Ç–∞ –≤ EUR (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)', {
            'fields': ('salary_min_eur', 'salary_max_eur'),
            'classes': ('collapse',)
        }),
        ('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('created_at', 'updated_at'),
            'classes': ('collapse',)
        }),
    )
    
    def salary_range_usd(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω –∑–∞—Ä–ø–ª–∞—Ç—ã –≤ USD"""
        return obj.salary_range_usd
    salary_range_usd.short_description = "–ó–∞—Ä–ø–ª–∞—Ç–∞ (USD)"
    
    def salary_range_byn(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω –∑–∞—Ä–ø–ª–∞—Ç—ã –≤ BYN"""
        return obj.salary_range_byn
    salary_range_byn.short_description = "–ó–∞—Ä–ø–ª–∞—Ç–∞ (BYN)"
    
    def salary_range_pln(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω –∑–∞—Ä–ø–ª–∞—Ç—ã –≤ PLN"""
        return obj.salary_range_pln
    salary_range_pln.short_description = "–ó–∞—Ä–ø–ª–∞—Ç–∞ (PLN)"
    
    def salary_range_eur(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω –∑–∞—Ä–ø–ª–∞—Ç—ã –≤ EUR"""
        return obj.salary_range_eur
    salary_range_eur.short_description = "–ó–∞—Ä–ø–ª–∞—Ç–∞ (EUR)"
    
    def save_model(self, request, obj, form, change):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏"""
        try:
            obj.clean()
            super().save_model(request, obj, form, change)
        except Exception as e:
            messages.error(request, f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
            return
    
    def changelist_view(self, request, extra_context=None):
        """–î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç"""
        extra_context = extra_context or {}
        extra_context['show_update_currency_button'] = True
        return super().changelist_view(request, extra_context)
    
    def get_urls(self):
        urls = super().get_urls()
        custom_urls = [
            path('update-currency-amounts/', self.update_currency_amounts, name='finance_salaryrange_update_currency'),
        ]
        return custom_urls + urls
    
    def update_currency_amounts(self, request):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –¥–ª—è –≤—Å–µ—Ö –∑–∞—Ä–ø–ª–∞—Ç–Ω—ã—Ö –≤–∏–ª–æ–∫"""
        try:
            from django.core.management import call_command
            from io import StringIO
            
            # –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≤—ã–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã
            out = StringIO()
            call_command('update_salary_currency_amounts', stdout=out, stderr=out)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            output = out.getvalue()
            if "—É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã" in output.lower():
                messages.success(request, "–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –¥–ª—è –≤—Å–µ—Ö –∑–∞—Ä–ø–ª–∞—Ç–Ω—ã—Ö –≤–∏–ª–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
            else:
                messages.warning(request, f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏: {output}")
                
        except Exception as e:
            messages.error(request, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤: {e}")
        
        return HttpResponseRedirect("../")


@admin.register(Benchmark)
class BenchmarkAdmin(admin.ModelAdmin):
    list_display = ("type_display", "vacancy", "grade", "salary_display", "location", "work_format", "domain", "hh_vacancy_id", "is_active", "date_added")
    list_filter = ("type", "is_active", "grade", "vacancy", "work_format", "domain", "date_added")
    search_fields = ("vacancy__name", "grade__name", "location", "notes", "work_format", "technologies", "domain", "hh_vacancy_id")
    readonly_fields = ("created_at", "updated_at", "date_added")
    fieldsets = (
        (None, {
            'fields': ('type', 'vacancy', 'grade', 'salary_from', 'salary_to', 'location', 'is_active')
        }),
        ('–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('notes',),
            'classes': ('collapse',)
        }),
        ('–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏', {
            'fields': ('work_format', 'compensation', 'benefits', 'development', 'technologies', 'domain', 'hh_vacancy_id'),
            'classes': ('collapse',),
            'description': '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–µ–Ω—á–º–∞—Ä–∫–æ–≤'
        }),
        ('–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('date_added', 'created_at', 'updated_at'),
            'classes': ('collapse',)
        }),
    )
    
    def type_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–∏–ø —Å –∏–∫–æ–Ω–∫–æ–π –∏ —Ü–≤–µ—Ç–æ–º"""
        if obj.type == 'candidate':
            color = '#28a745'  # –ó–µ–ª–µ–Ω—ã–π
            icon = 'fas fa-user'
        else:
            color = '#007bff'  # –°–∏–Ω–∏–π
            icon = 'fas fa-briefcase'
        
        return format_html(
            '<span style="color: {};"><i class="{}"></i> {}</span>',
            color, icon, obj.get_type_display()
        )
    type_display.short_description = "–¢–∏–ø"
    
    def salary_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∑–∞—Ä–ø–ª–∞—Ç—É"""
        return obj.get_salary_display()
    salary_display.short_description = "–ó–∞—Ä–ø–ª–∞—Ç–∞"
    
    def save_model(self, request, obj, form, change):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏"""
        try:
            obj.clean()
            super().save_model(request, obj, form, change)
        except Exception as e:
            messages.error(request, f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
            return
    
    def changelist_view(self, request, extra_context=None):
        """–î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç"""
        extra_context = extra_context or {}
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º
        candidate_count = Benchmark.objects.filter(type='candidate', is_active=True).count()
        vacancy_count = Benchmark.objects.filter(type='vacancy', is_active=True).count()
        total_count = Benchmark.objects.filter(is_active=True).count()
        
        extra_context['benchmark_stats'] = {
            'candidate_count': candidate_count,
            'vacancy_count': vacancy_count,
            'total_count': total_count
        }
        
        return super().changelist_view(request, extra_context)


@admin.register(HHVacancyTemp)
class HHVacancyTempAdmin(admin.ModelAdmin):
    list_display = ("hh_id", "processed", "created_at", "company_name", "vacancy_title")
    list_filter = ("processed", "created_at")
    search_fields = ("hh_id", "raw_data")
    readonly_fields = ("hh_id", "raw_data", "created_at")
    fieldsets = (
        (None, {
            'fields': ('hh_id', 'processed')
        }),
        ('–î–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏', {
            'fields': ('raw_data',),
            'classes': ('collapse',)
        }),
        ('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('created_at',),
            'classes': ('collapse',)
        }),
    )
    
    def company_name(self, obj):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–∑ raw_data"""
        try:
            return obj.raw_data.get('employer', {}).get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        except:
            return '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
    company_name.short_description = "–ö–æ–º–ø–∞–Ω–∏—è"
    
    def vacancy_title(self, obj):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–∑ raw_data"""
        try:
            return obj.raw_data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')[:50]
        except:
            return '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
    vacancy_title.short_description = "–í–∞–∫–∞–Ω—Å–∏—è"


@admin.register(BenchmarkSettings)
class BenchmarkSettingsAdmin(admin.ModelAdmin):
    list_display = (
        "average_calculation_period_days",
        "belarus_tax_rate",
        "max_daily_tasks",
        "data_sources_display",
        "vacancy_fields_display",
        "hh_channel_active",
        "max_daily_hh_tasks",
        "updated_at",
    )
    fieldsets = (
        (None, {
            'fields': (
                'average_calculation_period_days',
                'belarus_tax_rate',
                'max_daily_tasks',
                'ai_analysis_prompt'
            )
        }),
        ('–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö', {
            'fields': ('data_sources',),
            'description': '–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏, –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥—É—Ç —Å–æ–±–∏—Ä–∞—Ç—å—Å—è –¥–∞–Ω–Ω—ã–µ –æ –≤–∞–∫–∞–Ω—Å–∏—è—Ö.',
        }),
        ('–ü–æ–ª—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–π', {
            'fields': ('vacancy_fields',),
            'description': '–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–π.',
        }),
                ('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ hh.ru', {
                    'fields': ('hh_channel_active', 'max_daily_hh_tasks', 'hh_ai_prompt'),
                    'description': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å hh.ru',
                }),
    )
    
    # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥—ã –¥–ª—è —Å–∏–Ω–≥–ª—Ç–æ–Ω –º–æ–¥–µ–ª–∏
    def has_add_permission(self, request):
        return not BenchmarkSettings.objects.exists()
    
    def has_delete_permission(self, request, obj=None):
        return False
    
    def get_actions(self, request):
        actions = super().get_actions(request)
        if 'delete_selected' in actions:
            del actions['delete_selected']
        return actions
    
    def changelist_view(self, request, extra_context=None):
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏
        obj = self.model.load()
        return HttpResponseRedirect(f'./{obj.pk}/change/')
    
    def get_form(self, request, obj=None, **kwargs):
        from django.forms import CheckboxSelectMultiple, MultipleChoiceField
        
        form = super().get_form(request, obj, **kwargs)
        
        # –ó–∞–º–µ–Ω—è–µ–º JSONField –Ω–∞ MultipleChoiceField –¥–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö
        form.base_fields['data_sources'] = MultipleChoiceField(
            choices=DataSource.choices,
            widget=CheckboxSelectMultiple(),
            required=False,
            help_text="–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ –≤–∞–∫–∞–Ω—Å–∏—è—Ö"
        )
        
        # –ó–∞–º–µ–Ω—è–µ–º JSONField –Ω–∞ MultipleChoiceField –¥–ª—è –ø–æ–ª–µ–π –≤–∞–∫–∞–Ω—Å–∏–π
        form.base_fields['vacancy_fields'] = MultipleChoiceField(
            choices=VacancyField.choices,
            widget=CheckboxSelectMultiple(),
            required=False,
            help_text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–π"
        )
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –æ–±—ä–µ–∫—Ç–∞
        if obj:
            form.base_fields['data_sources'].initial = obj.data_sources or []
            form.base_fields['vacancy_fields'].initial = obj.vacancy_fields or []
        
        return form
    
    def save_model(self, request, obj, form, change):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏"""
        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ MultipleChoiceField
            if 'data_sources' in form.cleaned_data:
                obj.data_sources = form.cleaned_data['data_sources']
            
            if 'vacancy_fields' in form.cleaned_data:
                # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                required_fields = ['vacancy', 'date_added', 'available_grades', 'salary_range', 'location']
                all_fields = list(set(form.cleaned_data['vacancy_fields'] + required_fields))
                obj.vacancy_fields = all_fields
            
            obj.clean()
            super().save_model(request, obj, form, change)
        except Exception as e:
            messages.error(request, f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
            return
