import datetime
import requests
from typing import Dict, Any
from datetime import datetime, timedelta
from decimal import Decimal

# –û—Å–Ω–æ–≤–Ω–æ–π API –ù–ë–†–ë - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
NBRB_BASE_URL = "https://api.nbrb.by/exrates/rates/{currency}?parammode=2"

# –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ API (—Ç–æ–ª—å–∫–æ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –Ω–µ –¥–ª—è –ø–æ–¥–º–µ–Ω—ã)
EXCHANGERATE_API = "https://api.exchangerate-api.com/v4/latest/BYN"
OPEN_ER_API = "https://open.er-api.com/v6/latest/BYN"


class CurrencyRateService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
    
    @staticmethod
    def get_latest_rates() -> dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç.
        –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: —Ç–æ–ª—å–∫–æ –ù–ë–†–ë (–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã)
        –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
        """
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –∏–∑ –ù–ë–†–ë
        nbrb_rates = CurrencyRateService._get_nbrb_rates()
        
        # –ï—Å–ª–∏ –ù–ë–†–ë –¥–∞–ª –∫—É—Ä—Å—ã - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ö
        if nbrb_rates and any(rate and rate.get("rate") for rate in nbrb_rates.values() if rate and rate.get("rate") != 1.0):
            return nbrb_rates
        
        # –ï—Å–ª–∏ –ù–ë–†–ë –Ω–µ –¥–∞–ª –∫—É—Ä—Å–æ–≤ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º fallback —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–∞—Ç—É—Å–µ
        print("‚ö†Ô∏è  –ù–ë–†–ë –Ω–µ –¥–∞–ª –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è")
        print("üí° –ö—É—Ä—Å—ã –±—É–¥—É—Ç –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ–≥–¥–∞ –ù–ë–†–ë –∏—Ö –æ–ø—É–±–ª–∏–∫—É–µ—Ç")
        
        return CurrencyRateService._get_fallback_rates_with_info()

    @staticmethod
    def _get_nbrb_rates() -> dict[str, Any] | None:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫—É—Ä—Å—ã –∏–∑ –ù–ë–†–ë –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API"""
        try:
            result = {}
            
            # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã –¥–ª—è –∫–∞–∂–¥–æ–π –≤–∞–ª—é—Ç—ã –æ—Ç–¥–µ–ª—å–Ω–æ
            for currency in ["USD", "PLN"]:
                url = NBRB_BASE_URL.format(currency=currency)
                print(f"üîç –ü–æ–ª—É—á–∞—é –∫—É—Ä—Å {currency} –∏–∑ –ù–ë–†–ë: {url}")
                
                response = requests.get(url, timeout=15)
                if response.status_code != 200:
                    print(f"‚ùå HTTP {response.status_code} –¥–ª—è {currency}")
                    result[currency] = None
                    continue
                
                data = response.json()
                print(f"üìä {currency}: –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –ù–ë–†–ë")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
                if "Cur_OfficialRate" in data and data["Cur_OfficialRate"] is not None:
                    rate = float(data["Cur_OfficialRate"])
                    scale = int(data.get("Cur_Scale", 1))
                    normalized_rate = rate / scale
                    
                    result[currency] = {
                        "rate": normalized_rate,
                        "scale": scale,
                        "source": "nbrb",
                        "date": data.get("Date", ""),
                        "status": "official"
                    }
                    print(f"‚úÖ {currency}: {normalized_rate} BYN (scale: {scale})")
                else:
                    print(f"‚ùå {currency}: Cur_OfficialRate –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ None")
                    result[currency] = None
            
            # BYN –≤—Å–µ–≥–¥–∞ –±–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞
            result["BYN"] = {
                "rate": 1.0,
                "scale": 1,
                "source": "nbrb",
                "date": datetime.now().strftime("%Y-%m-%d"),
                "status": "base"
            }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª—É—á–∏–ª–∏ –ª–∏ –º—ã —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫—É—Ä—Å
            if any(rate and rate.get("rate") for rate in result.values() if rate and rate.get("rate") != 1.0):
                print("üéØ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –∫—É—Ä—Å—ã –ù–ë–†–ë!")
                return result
            else:
                print("‚ùå –ù–ë–†–ë –Ω–µ –¥–∞–ª –≤–∞–ª–∏–¥–Ω—ã—Ö –∫—É—Ä—Å–æ–≤")
                return None
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ù–ë–†–ë: {e}")
            return None

    @staticmethod
    def _get_fallback_rates_with_info() -> dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç fallback –∫—É—Ä—Å—ã —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–∞—Ç—É—Å–µ"""
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä—ã–Ω–æ—á–Ω—ã—Ö –∫—É—Ä—Å–∞—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        market_info = CurrencyRateService._get_market_info()
        
        return {
            "BYN": {
                "rate": 1.0,
                "scale": 1,
                "source": "nbrb",
                "date": datetime.now().strftime("%Y-%m-%d"),
                "status": "base"
            },
            "USD": {
                "rate": 2.85,  # –ë–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –∫—É—Ä—Å USD (–º–µ–Ω—å—à–µ 3)
                "scale": 1,
                "source": "fallback",
                "date": datetime.now().strftime("%Y-%m-%d"),
                "status": "nbrb_not_available",
                "market_rate": market_info.get("USD"),
                "note": "–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –ù–ë–†–ë –µ—â–µ –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏–º–µ—Ä–Ω—ã–π)"
            },
            "PLN": {
                "rate": 0.72,  # –ë–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –∫—É—Ä—Å PLN (–º–µ–Ω—å—à–µ 0.8)
                "scale": 1,
                "source": "fallback",
                "date": datetime.now().strftime("%Y-%m-%d"),
                "status": "nbrb_not_available",
                "market_rate": market_info.get("PLN"),
                "note": "–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –ù–ë–†–ë –µ—â–µ –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏–º–µ—Ä–Ω—ã–π)"
            }
        }

    @staticmethod
    def _get_market_info() -> dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä—ã–Ω–æ—á–Ω—ã—Ö –∫—É—Ä—Å–∞—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏)"""
        market_info = {}
        
        try:
            # –ü—Ä–æ–±—É–µ–º exchangerate-api
            response = requests.get(EXCHANGERATE_API, timeout=10)
            if response.status_code == 200:
                data = response.json()
                rates = data.get("rates", {})
                
                if "USD" in rates:
                    market_info["USD"] = {
                        "rate": 1.0 / float(rates["USD"]),
                        "source": "exchangerate-api",
                        "note": "–†—ã–Ω–æ—á–Ω—ã–π –∫—É—Ä—Å (–Ω–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –ù–ë–†–ë)"
                    }
                
                if "PLN" in rates:
                    market_info["PLN"] = {
                        "rate": 1.0 / float(rates["PLN"]),
                        "source": "exchangerate-api", 
                        "note": "–†—ã–Ω–æ—á–Ω—ã–π –∫—É—Ä—Å (–Ω–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –ù–ë–†–ë)"
                    }
        except:
            pass
        
        return market_info

    @staticmethod
    def get_currency_info() -> dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–ª—é—Ç–∞—Ö –∏ –∏—Ö –∫—É—Ä—Å–∞—Ö"""
        try:
            data = NBRBClient.fetch_all()
            result = {}
            
            for item in data:
                code = item.get("Cur_Abbreviation")
                if code in ["USD", "PLN", "BYN"]:
                    result[code] = {
                        "name": item.get("Cur_Name", ""),
                        "official_rate": item.get("Cur_OfficialRate"),
                        "scale": item.get("Cur_Scale", 1),
                        "date": item.get("Date", "")
                    }
            
            return result
        except Exception as e:
            return {"error": str(e)}


class HHVacancyService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–∞–∫–∞–Ω—Å–∏—è–º–∏ hh.ru"""
    
    def __init__(self):
        self.api_url = "https://api.hh.ru/vacancies"
        self.headers = {"User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"}
    
    def fetch_vacancies(self, search_params: dict) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–∏ —Å hh.ru API"""
        try:
            response = requests.get(
                self.api_url, 
                params=search_params, 
                headers=self.headers,
                timeout=30
            )
            response.raise_for_status()
            return response.json()
        except requests.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ API hh.ru: {e}")
            return {"items": [], "found": 0}
    
    def get_our_vacancies_list(self) -> list:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞—à–∏—Ö –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        from apps.vacancies.models import Vacancy
        return list(Vacancy.objects.values_list('name', flat=True))
    
    def format_for_ai_analysis_with_vacancies(self, vacancy_data: dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞ —Å –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∑–∞—Ä–ø–ª–∞—Ç—ã"""
        snippet = vacancy_data.get('snippet', {})
        
        # –ü—Ä–µ–¥–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞—Ä–ø–ª–∞—Ç—É (—É–∂–µ –≤ USD)
        processed_salary = self.preprocess_salary(vacancy_data)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–∞–±–æ—Ç—É –∏–∑ schedule –∏ work_format
        schedule = vacancy_data.get('schedule', {}).get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        work_formats = vacancy_data.get('work_format', [])
        work_format_str = ', '.join([wf.get('name', '') for wf in work_formats if wf.get('name')])
        
        return f"""ID –≤–∞–∫–∞–Ω—Å–∏–∏: {vacancy_data.get('id', '')}

–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏: {vacancy_data.get('name', '')}

–ö–æ–º–ø–∞–Ω–∏—è: {vacancy_data.get('employer', {}).get('name', '')}

–õ–æ–∫–∞—Ü–∏—è: {vacancy_data.get('area', {}).get('name', '')}

–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: {vacancy_data.get('experience', {}).get('name', '')}

–¢–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏: {vacancy_data.get('employment', {}).get('name', '')}

–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã: {schedule}

–§–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã: {work_format_str or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

–ó–∞—Ä–ø–ª–∞—Ç–∞ (–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –≤ USD):
- –û—Ç: {processed_salary.get('salary_usd_from', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')} USD
- –î–æ: {processed_salary.get('salary_usd_to', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')} USD

–û–ø–∏—Å–∞–Ω–∏–µ/—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è: {snippet.get('requirement', '')}

–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏: {snippet.get('responsibility', '')}

–ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {vacancy_data.get('description', '')}"""
    
    def preprocess_salary(self, vacancy_data: dict) -> dict:
        """–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—Ä–ø–ª–∞—Ç—ã —Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π –≤ USD"""
        from .models import CurrencyRate, PLNTax, BenchmarkSettings
        
        settings = BenchmarkSettings.load() # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ belarus_tax_rate
        
        salary_info = vacancy_data.get('salary', {})
        if not salary_info:
            return {"salary_usd_from": None, "salary_usd_to": None}
        
        original_currency = salary_info.get('currency', 'RUB')
        gross_from = salary_info.get('from')
        gross_to = salary_info.get('to')
        
        result = {}
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∑–∞—Ä–ø–ª–∞—Ç—É –≤ USD
        for amount, field in [(gross_from, 'salary_usd_from'), (gross_to, 'salary_usd_to')]:
            if not amount:
                result[field] = None
                continue
                
            try:
                gross_amount = Decimal(str(amount))
                
                if original_currency == 'PLN':
                    # PLN: gross -> net (—Å —É—á–µ—Ç–æ–º –ø–æ–ª—å—Å–∫–∏—Ö –Ω–∞–ª–æ–≥–æ–≤), –ø–æ—Ç–æ–º –≤ USD
                    net_amount = PLNTax.calculate_net_from_gross(gross_amount)
                    pln_rate = CurrencyRate.objects.get(code='PLN')
                    usd_amount = net_amount / pln_rate.rate
                    
                elif original_currency == 'BYN':
                    # BYN: gross -> net (—Å —É—á–µ—Ç–æ–º –±–µ–ª–æ—Ä—É—Å—Å–∫–∏—Ö –Ω–∞–ª–æ–≥–æ–≤), –ø–æ—Ç–æ–º –≤ USD
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É belarus_tax_rate
                    net_amount = gross_amount * (1 - settings.belarus_tax_rate / 100)
                    byn_rate = CurrencyRate.objects.get(code='BYN')
                    usd_amount = net_amount / byn_rate.rate
                    
                elif original_currency == 'USD':
                    # USD: —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —ç—Ç–æ —É–∂–µ net —Å—É–º–º–∞
                    usd_amount = gross_amount
                    
                elif original_currency == 'EUR':
                    # EUR: –ø—Ä—è–º–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ USD (–∫—É—Ä—Å –ø—Ä–∏–º–µ—Ä–Ω–æ 1.1)
                    usd_amount = gross_amount * Decimal('1.1')
                    
                elif original_currency == 'BYR':
                    # BYR = BYN (1:1) - –ø—Ä–∏—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                    byn_amount = gross_amount
                    # BYN gross -> net (—Å —É—á–µ—Ç–æ–º –±–µ–ª–æ—Ä—É—Å—Å–∫–∏—Ö –Ω–∞–ª–æ–≥–æ–≤)
                    net_amount = byn_amount * (1 - settings.belarus_tax_rate / 100)
                    byn_rate = CurrencyRate.objects.get(code='BYN')
                    usd_amount = net_amount / byn_rate.rate
                    
                else:
                    # –î–ª—è –¥—Ä—É–≥–∏—Ö –≤–∞–ª—é—Ç - –ø—Ä—è–º–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —ç—Ç–æ net
                    try:
                        currency_rate = CurrencyRate.objects.get(code=original_currency)
                        usd_amount = gross_amount / currency_rate.rate
                    except CurrencyRate.DoesNotExist:
                        # –ï—Å–ª–∏ –∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
                        result[field] = None
                        continue
                        
                result[field] = usd_amount.quantize(Decimal('0.01'))
            except (CurrencyRate.DoesNotExist, ValueError, TypeError):
                result[field] = None
        
        return result


# –û—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∫–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
class NBRBClient:
    @staticmethod
    def fetch_all() -> list[dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –æ—Ç –ù–ë–†–ë"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π API –¥–ª—è –∫–∞–∂–¥–æ–π –≤–∞–ª—é—Ç—ã
            result = []
            for currency in ["USD", "PLN"]:
                url = NBRB_BASE_URL.format(currency=currency)
                response = requests.get(url, timeout=10)
                if response.status_code == 200:
                    data = response.json()
                    result.append(data)
            
            return result
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –ù–ë–†–ë: {e}")
            return []