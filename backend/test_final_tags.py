#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫
"""
import os
import sys
import django

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

from django.contrib.auth import get_user_model
from apps.huntflow.services import HuntflowService

User = get_user_model()

def main():
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è andrei.golubenko (production)
        user = User.objects.get(username='andrei.golubenko')
        
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username}")
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å Huntflow
        huntflow_service = HuntflowService(user)
        
        account_id = 291341
        
        # –ú–æ–¥–µ–ª–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ ClickUp
        mock_task_data = {
            'id': 'test_task_final_tags',
            'name': '–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –º–µ—Ç–æ–∫',
            'description': '–û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –º–µ—Ç–æ–∫',
            'status': 'new',
            'assignees': [{'username': 'Yauheni Lebedzeu'}],
            'attachments': [],
            'comments': [],
            'custom_fields': []
        }
        
        # –ú–æ–¥–µ–ª–∏—Ä—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–æ–±—ã—á–Ω–æ –∏–∑ —Ä–µ–∑—é–º–µ)
        mock_parsed_data = {
            'fields': {
                'name': {'first': '–§–∏–Ω–∞–ª—å–Ω—ã–π', 'last': '–¢–µ—Å—Ç'}
            },
            'text': '–¢–µ—Å—Ç–æ–≤–æ–µ —Ä–µ–∑—é–º–µ –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –º–µ—Ç–æ–∫'
        }
        
        print("\nüß™ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏...")
        
        # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        applicant_result = huntflow_service.create_applicant_from_parsed_data(
            account_id=account_id,
            parsed_data=mock_parsed_data,
            vacancy_id=None, # –î–ª—è —Ç–µ—Å—Ç–∞ –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –≤–∞–∫–∞–Ω—Å–∏–∏
            task_name=mock_task_data['name'],
            task_description=mock_task_data['description'],
            task_comments=mock_task_data['comments'],
            assignees=mock_task_data['assignees'],
            task_status=mock_task_data['status'],
            task_data=mock_task_data # –ü–µ—Ä–µ–¥–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        )
        
        if applicant_result and isinstance(applicant_result, dict) and applicant_result.get('id'):
            print("‚úÖ –ö–∞–Ω–¥–∏–¥–∞—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
            applicant_id = applicant_result.get('id')
            print(f"üìä ID –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: {applicant_id}")
            print(f"üìä –ò–º—è: {applicant_result.get('first_name')} {applicant_result.get('last_name')}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–∫–∏ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ (—á—Ç–æ–±—ã –∫—ç—à –æ–±–Ω–æ–≤–∏–ª—Å—è)
            import time
            print(f"\n‚è≥ –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞...")
            time.sleep(3)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–∫–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
            print(f"\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–∫–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ {applicant_id}...")
            applicant_check = huntflow_service.get_applicant(account_id, applicant_id)
            
            if applicant_check:
                tags = applicant_check.get('tags', [])
                print(f"üìã –ú–µ—Ç–∫–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ ({len(tags)}):")
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–µ–≥–∏ –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
                all_tags = huntflow_service.get_tags(account_id)
                tag_names = {}
                if all_tags and 'items' in all_tags:
                    for tag_info in all_tags['items']:
                        tag_names[tag_info['id']] = tag_info
                
                has_clickup_tag = False
                has_executor_tag = False
                
                for tag in tags:
                    tag_id = tag.get('tag')
                    tag_info = tag_names.get(tag_id, {})
                    tag_name = tag_info.get('name', f'Unknown (ID: {tag_id})')
                    tag_color = tag_info.get('color', 'default')
                    print(f"   - ID: {tag_id}, –ù–∞–∑–≤–∞–Ω–∏–µ: '{tag_name}', –¶–≤–µ—Ç: {tag_color}")
                    
                    if tag_name == 'clickup-new':
                        has_clickup_tag = True
                        print(f"     ‚úÖ –ù–ê–ô–î–ï–ù–ê –ú–ï–¢–ö–ê CLICKUP-NEW!")
                    elif tag_name == 'Yauheni Lebedzeu':
                        has_executor_tag = True
                        print(f"     ‚úÖ –ù–ê–ô–î–ï–ù–ê –ú–ï–¢–ö–ê –ò–°–ü–û–õ–ù–ò–¢–ï–õ–Ø!")
                
                print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞:")
                print(f"   - –ú–µ—Ç–∫–∞ clickup-new: {'‚úÖ' if has_clickup_tag else '‚ùå'}")
                print(f"   - –ú–µ—Ç–∫–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è: {'‚úÖ' if has_executor_tag else '‚ùå'}")
                
                if has_clickup_tag and has_executor_tag:
                    print(f"\nüéâ –ü–û–õ–ù–´–ô –£–°–ü–ï–•! –û–±–µ –º–µ—Ç–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
                    print(f"üéØ –ü–†–û–ë–õ–ï–ú–ê –†–ï–®–ï–ù–ê!")
                elif has_clickup_tag:
                    print(f"\n‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–´–ô –£–°–ü–ï–•! –ú–µ—Ç–∫–∞ clickup-new –¥–æ–±–∞–≤–ª–µ–Ω–∞, –Ω–æ –Ω–µ—Ç –º–µ—Ç–∫–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è")
                elif has_executor_tag:
                    print(f"\n‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–´–ô –£–°–ü–ï–•! –ú–µ—Ç–∫–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∞, –Ω–æ –Ω–µ—Ç –º–µ—Ç–∫–∏ clickup-new")
                else:
                    print(f"\n‚ùå –ü–†–û–ë–õ–ï–ú–ê! –ù–∏ –æ–¥–Ω–∞ –∏–∑ –º–µ—Ç–æ–∫ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
            print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {applicant_result}")
        
    except User.DoesNotExist:
        print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å andrei.golubenko –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
