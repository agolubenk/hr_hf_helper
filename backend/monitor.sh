#!/bin/bash

# üìä –°–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã
# –ê–≤—Ç–æ—Ä: AI Assistant
# –î–∞—Ç–∞: $(date)

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_metric() {
    echo -e "${CYAN}[METRIC]${NC} $1"
}

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
BASE_URL="http://127.0.0.1:8000"
LOG_FILE="monitoring_$(date +%Y%m%d_%H%M%S).log"
INTERVAL=30  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
check_health() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Django
    if python3 manage.py check --deploy > /dev/null 2>&1; then
        log_success "Django: ‚úÖ –ó–¥–æ—Ä–æ–≤"
    else
        log_error "Django: ‚ùå –û—à–∏–±–∫–∏"
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
    if curl -s "$BASE_URL/" > /dev/null; then
        log_success "–°–µ—Ä–≤–µ—Ä: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç"
    else
        log_error "–°–µ—Ä–≤–µ—Ä: ‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoints
    check_api_endpoints
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    check_performance
    
    return 0
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API endpoints
check_api_endpoints() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoints..."
    
    ENDPOINTS=(
        "finance/grades"
        "vacancies/vacancies"
        "huntflow/cache"
        "gemini/chat-sessions"
        "accounts/users"
    )
    
    for endpoint in "${ENDPOINTS[@]}"; do
        response_code=$(curl -s -o /dev/null -w "%{http_code}" "$BASE_URL/api/v1/$endpoint/")
        
        if [ "$response_code" = "401" ] || [ "$response_code" = "403" ]; then
            log_success "API $endpoint: ‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω (–∫–æ–¥: $response_code)"
        elif [ "$response_code" = "200" ]; then
            log_success "API $endpoint: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç (–∫–æ–¥: $response_code)"
        else
            log_warning "API $endpoint: ‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥: $response_code"
        fi
    done
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
check_performance() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–ª–∏–∫–∞ API
    start_time=$(date +%s.%N)
    curl -s "$BASE_URL/api/v1/finance/grades/" > /dev/null
    end_time=$(date +%s.%N)
    
    response_time=$(echo "$end_time - $start_time" | bc)
    response_time_ms=$(echo "$response_time * 1000" | bc)
    
    if (( $(echo "$response_time_ms < 500" | bc -l) )); then
        log_success "–í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ API: ‚úÖ ${response_time_ms}ms (–æ—Ç–ª–∏—á–Ω–æ)"
    elif (( $(echo "$response_time_ms < 1000" | bc -l) )); then
        log_warning "–í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ API: ‚ö†Ô∏è ${response_time_ms}ms (–ø—Ä–∏–µ–º–ª–µ–º–æ)"
    else
        log_error "–í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ API: ‚ùå ${response_time_ms}ms (–º–µ–¥–ª–µ–Ω–Ω–æ)"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
    check_system_resources
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
check_system_resources() {
    # CPU
    cpu_usage=$(top -l 1 | grep "CPU usage" | awk '{print $3}' | sed 's/%//')
    if (( $(echo "$cpu_usage < 80" | bc -l) )); then
        log_success "CPU: ‚úÖ ${cpu_usage}% (–Ω–æ—Ä–º–∞)"
    else
        log_warning "CPU: ‚ö†Ô∏è ${cpu_usage}% (–≤—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞)"
    fi
    
    # –ü–∞–º—è—Ç—å
    memory_info=$(python3 -c "
import psutil
mem = psutil.virtual_memory()
print(f'{mem.percent:.1f}')
")
    
    if (( $(echo "$memory_info < 85" | bc -l) )); then
        log_success "–ü–∞–º—è—Ç—å: ‚úÖ ${memory_info}% (–Ω–æ—Ä–º–∞)"
    else
        log_warning "–ü–∞–º—è—Ç—å: ‚ö†Ô∏è ${memory_info}% (–º–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)"
    fi
    
    # –î–∏—Å–∫
    disk_info=$(python3 -c "
import psutil
disk = psutil.disk_usage('/')
print(f'{disk.percent:.1f}')
")
    
    if (( $(echo "$disk_info < 90" | bc -l) )); then
        log_success "–î–∏—Å–∫: ‚úÖ ${disk_info}% (–Ω–æ—Ä–º–∞)"
    else
        log_warning "–î–∏—Å–∫: ‚ö†Ô∏è ${disk_info}% (–º–∞–ª–æ –º–µ—Å—Ç–∞)"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–æ–≤ –Ω–∞ –æ—à–∏–±–∫–∏
check_logs() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –Ω–∞ –æ—à–∏–±–∫–∏..."
    
    # –ü–æ–∏—Å–∫ –æ—à–∏–±–æ–∫ –≤ Django –ª–æ–≥–∞—Ö
    if [ -f "server.log" ]; then
        error_count=$(grep -i "error\|exception\|traceback" server.log | wc -l)
        if [ "$error_count" -eq 0 ]; then
            log_success "Django –ª–æ–≥–∏: ‚úÖ –û—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        else
            log_warning "Django –ª–æ–≥–∏: ‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ $error_count –æ—à–∏–±–æ–∫"
            
            # –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏
            log_info "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏:"
            grep -i "error\|exception\|traceback" server.log | tail -3
        fi
    fi
    
    # –ü–æ–∏—Å–∫ –æ—à–∏–±–æ–∫ –≤ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ª–æ–≥–∞—Ö
    if [ -f "logs/django.log" ]; then
        error_count=$(grep -i "error\|exception\|traceback" logs/django.log | wc -l)
        if [ "$error_count" -eq 0 ]; then
            log_success "–°–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏: ‚úÖ –û—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        else
            log_warning "–°–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏: ‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ $error_count –æ—à–∏–±–æ–∫"
        fi
    fi
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥—É–ª–µ–π logic
check_logic_modules() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ logic –º–æ–¥—É–ª–µ–π..."
    
    MODULES=(
        "logic.base.api_client"
        "logic.base.response_handler"
        "logic.integration.shared.candidate_operations"
        "logic.integration.shared.gemini_operations"
        "logic.utilities.common_api"
    )
    
    healthy_count=0
    total_count=${#MODULES[@]}
    
    for module in "${MODULES[@]}"; do
        if python3 -c "import $module" 2>/dev/null; then
            log_success "–ú–æ–¥—É–ª—å $module: ‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è"
            ((healthy_count++))
        else
            log_error "–ú–æ–¥—É–ª—å $module: ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞"
        fi
    done
    
    log_metric "Logic –º–æ–¥—É–ª–∏: $healthy_count/$total_count –∑–¥–æ—Ä–æ–≤—ã"
}

# –§—É–Ω–∫—Ü–∏—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
continuous_monitor() {
    log_info "–ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–∏–Ω—Ç–µ—Ä–≤–∞–ª: ${INTERVAL}—Å)..."
    log_info "–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C"
    
    while true; do
        echo ""
        echo "=========================================="
        echo "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: $(date)"
        echo "=========================================="
        
        check_health
        check_logs
        check_logic_modules
        
        echo ""
        log_info "–°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ $INTERVAL —Å–µ–∫—É–Ω–¥..."
        sleep $INTERVAL
    done
}

# –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞
generate_report() {
    log_info "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã..."
    
    REPORT_FILE="system_report_$(date +%Y%m%d_%H%M%S).txt"
    
    {
        echo "=========================================="
        echo "–û–¢–ß–ï–¢ –û –°–û–°–¢–û–Ø–ù–ò–ò –°–ò–°–¢–ï–ú–´"
        echo "=========================================="
        echo "–î–∞—Ç–∞: $(date)"
        echo ""
        
        echo "1. –ó–î–û–†–û–í–¨–ï –°–ò–°–¢–ï–ú–´:"
        if check_health; then
            echo "   ‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑–¥–æ—Ä–æ–≤–∞"
        else
            echo "   ‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã"
        fi
        echo ""
        
        echo "2. API ENDPOINTS:"
        check_api_endpoints
        echo ""
        
        echo "3. –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨:"
        check_performance
        echo ""
        
        echo "4. –õ–û–ì–ò:"
        check_logs
        echo ""
        
        echo "5. LOGIC –ú–û–î–£–õ–ò:"
        check_logic_modules
        echo ""
        
        echo "=========================================="
        echo "–û–¢–ß–ï–¢ –ó–ê–í–ï–†–®–ï–ù"
        echo "=========================================="
        
    } > "$REPORT_FILE"
    
    log_success "–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: $REPORT_FILE"
}

# –§—É–Ω–∫—Ü–∏—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
quick_check() {
    log_info "–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Django
    if python3 manage.py check --deploy > /dev/null 2>&1; then
        echo "Django: ‚úÖ"
    else
        echo "Django: ‚ùå"
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
    if curl -s "$BASE_URL/" > /dev/null; then
        echo "–°–µ—Ä–≤–µ—Ä: ‚úÖ"
    else
        echo "–°–µ—Ä–≤–µ—Ä: ‚ùå"
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ API
    response_code=$(curl -s -o /dev/null -w "%{http_code}" "$BASE_URL/api/v1/finance/grades/")
    if [ "$response_code" = "401" ] || [ "$response_code" = "403" ]; then
        echo "API: ‚úÖ"
    else
        echo "API: ‚ùå (–∫–æ–¥: $response_code)"
        return 1
    fi
    
    log_success "–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞"
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
case "${1:-quick}" in
    "quick")
        quick_check
        ;;
    "full")
        check_health
        check_logs
        check_logic_modules
        ;;
    "continuous")
        continuous_monitor
        ;;
    "report")
        generate_report
        ;;
    "health")
        check_health
        ;;
    "performance")
        check_performance
        ;;
    "logs")
        check_logs
        ;;
    "modules")
        check_logic_modules
        ;;
    *)
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 {quick|full|continuous|report|health|performance|logs|modules}"
        echo ""
        echo "–ö–æ–º–∞–Ω–¥—ã:"
        echo "  quick       - –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"
        echo "  full        - –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã"
        echo "  continuous  - –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"
        echo "  report      - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞"
        echo "  health      - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"
        echo "  performance - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
        echo "  logs        - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤"
        echo "  modules     - –ü—Ä–æ–≤–µ—Ä–∫–∞ logic –º–æ–¥—É–ª–µ–π"
        exit 1
        ;;
esac
