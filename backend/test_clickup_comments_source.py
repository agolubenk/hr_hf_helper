import os
import django

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

from django.contrib.auth import get_user_model
from apps.clickup_int.services import ClickUpService
from apps.clickup_int.models import ClickUpTask

User = get_user_model()

def main():
    try:
        user = User.objects.filter(username='andrei.golubenko').first()
        if not user:
            print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 'andrei.golubenko' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        clickup_service = ClickUpService(user.clickup_api_key)
        
        # ID –∑–∞–¥–∞—á–∏ –∏–∑ –ª–æ–≥–æ–≤
        task_id = '86c0hhu35'
        
        print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}...")
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —á–µ—Ä–µ–∑ API
        print("\n1Ô∏è‚É£ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —á–µ—Ä–µ–∑ API:")
        try:
            comments_api = clickup_service.get_task_comments(task_id)
            print(f"   –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —á–µ—Ä–µ–∑ API: {len(comments_api)}")
            for i, comment in enumerate(comments_api):
                print(f"   {i+1}. {comment}")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —á–µ—Ä–µ–∑ API: {e}")
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–µ
        print("\n2Ô∏è‚É£ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:")
        try:
            task_details = clickup_service.get_task(task_id)
            comments_details = task_details.get('comments', [])
            print(f"   –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ –¥–µ—Ç–∞–ª—è—Ö: {len(comments_details)}")
            for i, comment in enumerate(comments_details):
                print(f"   {i+1}. {comment}")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        print("\n3Ô∏è‚É£ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:")
        try:
            task_db = ClickUpTask.objects.filter(task_id=task_id, user=user).first()
            if task_db:
                print(f"   –ó–∞–¥–∞—á–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î: {task_db.name}")
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ custom fields
                custom_fields = task_db.custom_fields
                if isinstance(custom_fields, str):
                    import json
                    custom_fields = json.loads(custom_fields)
                
                print(f"   Custom fields: {custom_fields}")
                
                # –ò—â–µ–º –ø–æ–ª–µ "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏"
                for field in custom_fields:
                    if field.get('name') == '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏' and field.get('value'):
                        print(f"   üéØ –ù–ê–ô–î–ï–ù–´ –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ò –í CUSTOM FIELDS: {field.get('value')}")
                        break
            else:
                print("   ‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ë–î: {e}")
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫ –ø–æ–ª—É—á–∞—é—Ç—Å—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ transfer_to_huntflow
        print("\n4Ô∏è‚É£ –°–∏–º—É–ª—è—Ü–∏—è transfer_to_huntflow:")
        try:
            task_db = ClickUpTask.objects.filter(task_id=task_id, user=user).first()
            if task_db:
                attachments = clickup_service.get_task_attachments(task_id)
                comments = clickup_service.get_task_comments(task_id)
                
                print(f"   –í–ª–æ–∂–µ–Ω–∏—è: {len(attachments)}")
                print(f"   –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —á–µ—Ä–µ–∑ API: {len(comments)}")
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∫–∞–∫ –≤ transfer_to_huntflow
                task_data = {
                    'id': task_id,  # –î–æ–±–∞–≤–ª—è–µ–º ID –∑–∞–¥–∞—á–∏
                    'name': task_db.name,
                    'description': task_db.description,
                    'status': task_db.status,
                    'attachments': attachments,
                    'comments': comments,
                    'assignees': json.loads(task_db.assignees) if isinstance(task_db.assignees, str) else task_db.assignees,
                    'custom_fields': task_db.custom_fields
                }
                
                print(f"   üìã –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:")
                print(f"      - ID: {task_data.get('id')}")
                print(f"      - –ù–∞–∑–≤–∞–Ω–∏–µ: {task_data.get('name')}")
                print(f"      - –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {len(task_data.get('comments', []))}")
                print(f"      - Custom fields: {len(task_data.get('custom_fields', []))}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ custom fields
                custom_fields = task_data.get('custom_fields', [])
                for field in custom_fields:
                    if field.get('name') == '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏' and field.get('value'):
                        print(f"   üéØ –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ò –í CUSTOM FIELDS: {field.get('value')[:100]}...")
                        
                        # –ï—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –µ—Å—Ç—å –≤ custom fields, –Ω–æ –Ω–µ—Ç –≤ API, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö
                        if not comments:
                            print(f"   üí° –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏–∑ custom fields –∫ API –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º")
                            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏–∑ custom fields
                        break
            else:
                print("   ‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏: {e}")
            import traceback
            traceback.print_exc()
        
    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
