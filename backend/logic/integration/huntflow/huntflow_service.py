"""–û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Huntflow"""
from django.shortcuts import render, redirect
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.http import JsonResponse
from django.views.decorators.http import require_http_methods
from django.views.decorators.csrf import csrf_exempt
import json

from logic.utilities.context_helpers import ContextHelper
from logic.base.response_handler import UnifiedResponseHandler
from apps.huntflow.services import HuntflowService


def get_correct_account_id(user, fallback_account_id=None):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π account_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Huntflow API
    
    –í–•–û–î–Ø–©–ò–ï –î–ê–ù–ù–´–ï: user (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å), fallback_account_id (—Å—Ç—Ä–æ–∫–∞)
    –ò–°–¢–û–ß–ù–ò–ö–ò –î–ê–ù–ù–´–ï: HuntflowService, Huntflow API
    –û–ë–†–ê–ë–û–¢–ö–ê: –ü–æ–ª—É—á–µ–Ω–∏–µ account_id –∏–∑ API –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ fallback
    –í–´–•–û–î–Ø–©–ò–ï –î–ê–ù–ù–´–ï: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π account_id
    –°–í–Ø–ó–ò: HuntflowService
    –§–û–†–ú–ê–¢: –°—Ç—Ä–æ–∫–∞ —Å account_id
    """
    try:
        huntflow_service = HuntflowService(user)
        accounts = huntflow_service.get_accounts()
        
        if accounts and 'items' in accounts and accounts['items']:
            account_id = accounts['items'][0]['id']
            print(f"üîç –ü–æ–ª—É—á–µ–Ω account_id –∏–∑ API: {account_id}")
            return account_id
        else:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å account_id –∏–∑ API, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback: {fallback_account_id}")
            return fallback_account_id
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è account_id: {e}")
        return fallback_account_id


@login_required
def huntflow_dashboard(request):
    """
    –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Huntflow
    
    –í–•–û–î–Ø–©–ò–ï –î–ê–ù–ù–´–ï: request.user
    –ò–°–¢–û–ß–ù–ò–ö–ò –î–ê–ù–ù–´–ï: User.huntflow_prod_url, User.huntflow_sandbox_url
    –û–ë–†–ê–ë–û–¢–ö–ê: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Huntflow –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    –í–´–•–û–î–Ø–©–ò–ï –î–ê–ù–ù–´–ï: context ‚Üí huntflow/dashboard.html
    –°–í–Ø–ó–ò: HuntflowService
    –§–û–†–ú–ê–¢: HTML render
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ª–∏ Huntflow —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not request.user.huntflow_prod_url and not request.user.huntflow_sandbox_url:
            messages.warning(request, 'Huntflow –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.')
            return render(request, 'huntflow/dashboard.html', {
                'huntflow_configured': False
            })
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å Huntflow
        huntflow_service = HuntflowService(request.user)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        connection_test = huntflow_service.test_connection()
        
        if not connection_test:
            messages.error(request, '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Huntflow API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.')
            return render(request, 'huntflow/dashboard.html', {
                'huntflow_configured': True,
                'connection_test': False
            })
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π
        accounts = huntflow_service.get_accounts()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –∏–∑ –æ—Ç–≤–µ—Ç–∞ API
        accounts_list = accounts.get('items', []) if accounts else []
        
        context = ContextHelper.get_base_context(
            request,
            '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Huntflow',
            {
                'huntflow_configured': True,
                'connection_test': True,
                'accounts': accounts_list,
                'accounts_for_menu': {'items': accounts_list},
                'active_system': request.user.active_system,
                'base_url': huntflow_service.base_url
            }
        )
        
        return render(request, 'huntflow/dashboard.html', context)
        
    except Exception as e:
        messages.error(request, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö Huntflow: {str(e)}')
        context = ContextHelper.get_base_context(
            request,
            '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Huntflow',
            {
                'huntflow_configured': True,
                'connection_test': False,
                'error': str(e)
            }
        )
        return render(request, 'huntflow/dashboard.html', context)


@login_required
def vacancies_list(request, account_id):
    """
    –°–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    
    –í–•–û–î–Ø–©–ò–ï –î–ê–ù–ù–´–ï: account_id, request.user
    –ò–°–¢–û–ß–ù–ò–ö–ò –î–ê–ù–ù–´–ï: HuntflowService, Huntflow API
    –û–ë–†–ê–ë–û–¢–ö–ê: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    –í–´–•–û–î–Ø–©–ò–ï –î–ê–ù–ù–´–ï: context ‚Üí huntflow/vacancies_list.html
    –°–í–Ø–ó–ò: HuntflowService, get_correct_account_id
    –§–û–†–ú–ê–¢: HTML render
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π account_id
        correct_account_id = get_correct_account_id(request.user, account_id)
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å Huntflow
        huntflow_service = HuntflowService(request.user)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π
        vacancies = huntflow_service.get_vacancies(correct_account_id)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π –∏–∑ –æ—Ç–≤–µ—Ç–∞ API
        vacancies_list = vacancies.get('items', []) if vacancies else []
        
        context = ContextHelper.get_base_context(
            request,
            f'–í–∞–∫–∞–Ω—Å–∏–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ {correct_account_id}',
            {
                'account_id': correct_account_id,
                'vacancies': vacancies_list,
                'total_count': len(vacancies_list)
            }
        )
        
        return render(request, 'huntflow/vacancies_list.html', context)
        
    except Exception as e:
        messages.error(request, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∞–∫–∞–Ω—Å–∏–π: {str(e)}')
        return render(request, 'huntflow/vacancies_list.html', {
            'account_id': account_id,
            'vacancies': [],
            'total_count': 0,
            'error': str(e)
        })


@login_required
def candidates_list(request, account_id):
    """
    –°–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    
    –í–•–û–î–Ø–©–ò–ï –î–ê–ù–ù–´–ï: account_id, request.user
    –ò–°–¢–û–ß–ù–ò–ö–ò –î–ê–ù–ù–´–ï: HuntflowService, Huntflow API
    –û–ë–†–ê–ë–û–¢–ö–ê: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    –í–´–•–û–î–Ø–©–ò–ï –î–ê–ù–ù–´–ï: context ‚Üí huntflow/candidates_list.html
    –°–í–Ø–ó–ò: HuntflowService, get_correct_account_id
    –§–û–†–ú–ê–¢: HTML render
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π account_id
        correct_account_id = get_correct_account_id(request.user, account_id)
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å Huntflow
        huntflow_service = HuntflowService(request.user)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
        candidates = huntflow_service.get_candidates(correct_account_id)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∏–∑ –æ—Ç–≤–µ—Ç–∞ API
        candidates_list = candidates.get('items', []) if candidates else []
        
        context = ContextHelper.get_base_context(
            request,
            f'–ö–∞–Ω–¥–∏–¥–∞—Ç—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ {correct_account_id}',
            {
                'account_id': correct_account_id,
                'candidates': candidates_list,
                'total_count': len(candidates_list)
            }
        )
        
        return render(request, 'huntflow/candidates_list.html', context)
        
    except Exception as e:
        messages.error(request, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {str(e)}')
        return render(request, 'huntflow/candidates_list.html', {
            'account_id': account_id,
            'candidates': [],
            'total_count': 0,
            'error': str(e)
        })


@login_required
def huntflow_settings(request):
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Huntflow
    
    –í–•–û–î–Ø–©–ò–ï –î–ê–ù–ù–´–ï: request.user
    –ò–°–¢–û–ß–ù–ò–ö–ò –î–ê–ù–ù–´–ï: User.active_system
    –û–ë–†–ê–ë–û–¢–ö–ê: –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –í–´–•–û–î–Ø–©–ò–ï –î–ê–ù–ù–´–ï: context ‚Üí huntflow/settings.html
    –°–í–Ø–ó–ò: ContextHelper
    –§–û–†–ú–ê–¢: HTML render
    """
    try:
        context = ContextHelper.get_base_context(
            request,
            '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Huntflow',
            {
                'user': request.user,
                'active_system': request.user.active_system
            }
        )
        
        return render(request, 'huntflow/settings.html', context)
        
    except Exception as e:
        messages.error(request, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {str(e)}')
        return render(request, 'huntflow/settings.html', {
            'user': request.user,
            'error': str(e)
        })


@login_required
@require_http_methods(["POST"])
def huntflow_sync(request):
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å Huntflow
    
    –í–•–û–î–Ø–©–ò–ï –î–ê–ù–ù–´–ï: request.POST (sync_type, account_id), request.user
    –ò–°–¢–û–ß–ù–ò–ö–ò –î–ê–ù–ù–´–ï: HuntflowService, Huntflow API
    –û–ë–†–ê–ë–û–¢–ö–ê: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤–∞–∫–∞–Ω—Å–∏–π –∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    –í–´–•–û–î–Ø–©–ò–ï –î–ê–ù–ù–´–ï: JsonResponse —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    –°–í–Ø–ó–ò: HuntflowService, get_correct_account_id
    –§–û–†–ú–ê–¢: JSON
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        sync_type = request.POST.get('sync_type', 'all')
        account_id = request.POST.get('account_id')
        
        if not account_id:
            return JsonResponse({
                'success': False,
                'message': '–ù–µ —É–∫–∞–∑–∞–Ω ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏'
            })
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π account_id
        correct_account_id = get_correct_account_id(request.user, account_id)
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å Huntflow
        huntflow_service = HuntflowService(request.user)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if sync_type == 'vacancies':
            result = huntflow_service.sync_vacancies(correct_account_id)
        elif sync_type == 'candidates':
            result = huntflow_service.sync_candidates(correct_account_id)
        elif sync_type == 'all':
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
            vacancies_result = huntflow_service.sync_vacancies(correct_account_id)
            candidates_result = huntflow_service.sync_candidates(correct_account_id)
            result = {
                'vacancies': vacancies_result,
                'candidates': candidates_result
            }
        else:
            return JsonResponse({
                'success': False,
                'message': f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {sync_type}'
            })
        
        return JsonResponse({
            'success': True,
            'message': '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ',
            'result': result
        })
        
    except Exception as e:
        return JsonResponse({
            'success': False,
            'message': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {str(e)}'
        })


@login_required
def huntflow_test_connection(request):
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Huntflow API
    
    –í–•–û–î–Ø–©–ò–ï –î–ê–ù–ù–´–ï: request.user
    –ò–°–¢–û–ß–ù–ò–ö–ò –î–ê–ù–ù–´–ï: HuntflowService
    –û–ë–†–ê–ë–û–¢–ö–ê: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Huntflow API
    –í–´–•–û–î–Ø–©–ò–ï –î–ê–ù–ù–´–ï: JsonResponse —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Ç–µ—Å—Ç–∞
    –°–í–Ø–ó–ò: HuntflowService
    –§–û–†–ú–ê–¢: JSON
    """
    try:
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å Huntflow
        huntflow_service = HuntflowService(request.user)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        connection_test = huntflow_service.test_connection()
        
        if connection_test:
            return JsonResponse({
                'success': True,
                'message': '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Huntflow API —É—Å–ø–µ—à–Ω–æ',
                'connection_status': 'connected'
            })
        else:
            return JsonResponse({
                'success': False,
                'message': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Huntflow API',
                'connection_status': 'failed'
            })
            
    except Exception as e:
        return JsonResponse({
            'success': False,
            'message': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}',
            'connection_status': 'error'
        })


@login_required
def huntflow_clear_cache(request):
    """
    –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ Huntflow
    
    –í–•–û–î–Ø–©–ò–ï –î–ê–ù–ù–´–ï: request.user
    –ò–°–¢–û–ß–ù–ò–ö–ò –î–ê–ù–ù–´–ï: HuntflowService
    –û–ë–†–ê–ë–û–¢–ö–ê: –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ Huntflow
    –í–´–•–û–î–Ø–©–ò–ï –î–ê–ù–ù–´–ï: HTTP redirect –Ω–∞ dashboard
    –°–í–Ø–ó–ò: HuntflowService
    –§–û–†–ú–ê–¢: HTTP redirect
    """
    try:
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å Huntflow
        huntflow_service = HuntflowService(request.user)
        
        # –û—á–∏—â–∞–µ–º –∫—ç—à
        clear_result = huntflow_service.clear_cache()
        
        if clear_result:
            messages.success(request, '–ö—ç—à Huntflow —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω')
        else:
            messages.warning(request, '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∫—ç—à Huntflow')
        
        return redirect('huntflow:dashboard')
        
    except Exception as e:
        messages.error(request, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞: {str(e)}')
        return redirect('huntflow:dashboard')
