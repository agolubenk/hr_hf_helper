"""–ë–∞–∑–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã –¥–ª—è API views"""
from rest_framework import viewsets, status
from rest_framework.response import Response
from rest_framework.decorators import action
from logic.base.response_handler import UnifiedResponseHandler

class BaseAPIViewSet(viewsets.ModelViewSet):
    """
    –ë–∞–∑–æ–≤—ã–π ViewSet —Å —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏
    
    –í–•–û–î–Ø–©–ò–ï –î–ê–ù–ù–´–ï: viewsets.ModelViewSet –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    –ò–°–¢–û–ß–ù–ò–ö–ò –î–ê–ù–ù–´–•: Django REST Framework viewsets
    –û–ë–†–ê–ë–û–¢–ö–ê: –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ CRUD –æ–ø–µ—Ä–∞—Ü–∏–π —Å —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏
    –í–´–•–û–î–Ø–©–ò–ï –î–ê–ù–ù–´–ï: –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ API –æ—Ç–≤–µ—Ç—ã
    –°–í–Ø–ó–ò: UnifiedResponseHandler, rest_framework
    –§–û–†–ú–ê–¢: ModelViewSet —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏
    """
    
    def handle_exception(self, exc):
        """
        –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
        
        –í–•–û–î–Ø–©–ò–ï –î–ê–ù–ù–´–ï: exc (–∏—Å–∫–ª—é—á–µ–Ω–∏–µ)
        –ò–°–¢–û–ß–ù–ò–ö–ò –î–ê–ù–ù–´–•: Django REST Framework –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        –û–ë–†–ê–ë–û–¢–ö–ê: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—Ç —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        –í–´–•–û–î–Ø–©–ò–ï –î–ê–ù–ù–´–ï: HTTP 500 –æ—Ç–≤–µ—Ç —Å –¥–µ—Ç–∞–ª—è–º–∏ –æ—à–∏–±–∫–∏
        –°–í–Ø–ó–ò: UnifiedResponseHandler.error_response()
        –§–û–†–ú–ê–¢: Response —Å error_response
        """
        import traceback
        error_msg = f"BaseAPIViewSet error: {str(exc)}\n{traceback.format_exc()}"
        print(f"üö® BaseAPIViewSet.handle_exception: {error_msg}")
        return Response(
            UnifiedResponseHandler.error_response(error_msg),
            status=status.HTTP_500_INTERNAL_SERVER_ERROR
        )
    
    def create(self, request, *args, **kwargs):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ —Å —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º
        
        –í–•–û–î–Ø–©–ò–ï –î–ê–ù–ù–´–ï: request (HTTP –∑–∞–ø—Ä–æ—Å), *args, **kwargs
        –ò–°–¢–û–ß–ù–ò–ö–ò –î–ê–ù–ù–´–ï: Django REST Framework request –¥–∞–Ω–Ω—ã–µ
        –û–ë–†–ê–ë–û–¢–ö–ê: –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ —Å —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º
        –í–´–•–û–î–Ø–©–ò–ï –î–ê–ù–ù–´–ï: HTTP 201 –æ—Ç–≤–µ—Ç —Å —Å–æ–∑–¥–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        –°–í–Ø–ó–ò: UnifiedResponseHandler.success_response()
        –§–û–†–ú–ê–¢: Response —Å success_response –∏–ª–∏ error_response
        """
        try:
            serializer = self.get_serializer(data=request.data)
            serializer.is_valid(raise_exception=True)
            instance = serializer.save()
            return Response(
                UnifiedResponseHandler.success_response(
                    serializer.data,
                    "Created successfully"
                ),
                status=status.HTTP_201_CREATED
            )
        except Exception as e:
            import traceback
            error_msg = f"BaseAPIViewSet.create error: {str(e)}\n{traceback.format_exc()}"
            return Response(
                UnifiedResponseHandler.error_response(error_msg),
                status=status.HTTP_400_BAD_REQUEST
            )
    
    def update(self, request, *args, **kwargs):
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º
        
        –í–•–û–î–Ø–©–ò–ï –î–ê–ù–ù–´–ï: request (HTTP –∑–∞–ø—Ä–æ—Å), *args, **kwargs
        –ò–°–¢–û–ß–ù–ò–ö–ò –î–ê–ù–ù–´–ï: Django REST Framework request –¥–∞–Ω–Ω—ã–µ
        –û–ë–†–ê–ë–û–¢–ö–ê: –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ —Å —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º
        –í–´–•–û–î–Ø–©–ò–ï –î–ê–ù–ù–´–ï: HTTP 200 –æ—Ç–≤–µ—Ç —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        –°–í–Ø–ó–ò: UnifiedResponseHandler.success_response()
        –§–û–†–ú–ê–¢: Response —Å success_response –∏–ª–∏ error_response
        """
        try:
            partial = kwargs.pop('partial', False)
            instance = self.get_object()
            serializer = self.get_serializer(instance, data=request.data, partial=partial)
            serializer.is_valid(raise_exception=True)
            instance = serializer.save()
            return Response(
                UnifiedResponseHandler.success_response(
                    serializer.data,
                    "Updated successfully"
                )
            )
        except Exception as e:
            return Response(
                UnifiedResponseHandler.error_response(str(e)),
                status=status.HTTP_400_BAD_REQUEST
            )
    
    def destroy(self, request, *args, **kwargs):
        """
        –£–¥–∞–ª–µ–Ω–∏–µ —Å —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º
        
        –í–•–û–î–Ø–©–ò–ï –î–ê–ù–ù–´–ï: request (HTTP –∑–∞–ø—Ä–æ—Å), *args, **kwargs
        –ò–°–¢–û–ß–ù–ò–ö–ò –î–ê–ù–ù–´–ï: Django REST Framework request –¥–∞–Ω–Ω—ã–µ
        –û–ë–†–ê–ë–û–¢–ö–ê: –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ —Å —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º
        –í–´–•–û–î–Ø–©–ò–ï –î–ê–ù–ù–´–ï: HTTP 204 –æ—Ç–≤–µ—Ç –æ–± —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏
        –°–í–Ø–ó–ò: UnifiedResponseHandler.success_response()
        –§–û–†–ú–ê–¢: Response —Å success_response –∏–ª–∏ error_response
        """
        try:
            instance = self.get_object()
            instance.delete()
            return Response(
                UnifiedResponseHandler.success_response(
                    message="Deleted successfully"
                ),
                status=status.HTTP_204_NO_CONTENT
            )
        except Exception as e:
            return Response(
                UnifiedResponseHandler.error_response(str(e)),
                status=status.HTTP_400_BAD_REQUEST
            )
    
    def list(self, request, *args, **kwargs):
        """
        –°–ø–∏—Å–æ–∫ —Å —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º
        
        –í–•–û–î–Ø–©–ò–ï –î–ê–ù–ù–´–ï: request (HTTP –∑–∞–ø—Ä–æ—Å), *args, **kwargs
        –ò–°–¢–û–ß–ù–ò–ö–ò –î–ê–ù–ù–´–ï: Django REST Framework request –¥–∞–Ω–Ω—ã–µ
        –û–ë–†–ê–ë–û–¢–ö–ê: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º
        –í–´–•–û–î–Ø–©–ò–ï –î–ê–ù–ù–´–ï: HTTP 200 –æ—Ç–≤–µ—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º –¥–∞–Ω–Ω—ã—Ö
        –°–í–Ø–ó–ò: UnifiedResponseHandler.success_response()
        –§–û–†–ú–ê–¢: Response —Å success_response –∏–ª–∏ error_response
        """
        try:
            queryset = self.filter_queryset(self.get_queryset())
            page = self.paginate_queryset(queryset)
            if page is not None:
                serializer = self.get_serializer(page, many=True)
                return self.get_paginated_response(serializer.data)
            
            serializer = self.get_serializer(queryset, many=True)
            return Response(
                UnifiedResponseHandler.success_response(serializer.data)
            )
        except Exception as e:
            return Response(
                UnifiedResponseHandler.error_response(str(e)),
                status=status.HTTP_400_BAD_REQUEST
            )
    
    def retrieve(self, request, *args, **kwargs):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ —Å —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º
        
        –í–•–û–î–Ø–©–ò–ï –î–ê–ù–ù–´–ï: request (HTTP –∑–∞–ø—Ä–æ—Å), *args, **kwargs
        –ò–°–¢–û–ß–ù–ò–ö–ò –î–ê–ù–ù–´–ï: Django REST Framework request –¥–∞–Ω–Ω—ã–µ
        –û–ë–†–ê–ë–û–¢–ö–ê: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –ø–æ ID —Å —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º
        –í–´–•–û–î–Ø–©–ò–ï –î–ê–ù–ù–´–ï: HTTP 200 –æ—Ç–≤–µ—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞
        –°–í–Ø–ó–ò: UnifiedResponseHandler.success_response()
        –§–û–†–ú–ê–¢: Response —Å success_response –∏–ª–∏ error_response
        """
        try:
            instance = self.get_object()
            serializer = self.get_serializer(instance)
            return Response(
                UnifiedResponseHandler.success_response(serializer.data)
            )
        except Exception as e:
            return Response(
                UnifiedResponseHandler.error_response(str(e)),
                status=status.HTTP_400_BAD_REQUEST
            )

class FinanceAPIViewSet(BaseAPIViewSet):
    """
    –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ViewSet –¥–ª—è Finance –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    
    –í–•–û–î–Ø–©–ò–ï –î–ê–ù–ù–´–ï: BaseAPIViewSet –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    –ò–°–¢–û–ß–ù–ò–ö–ò –î–ê–ù–ù–´–ï: Django REST Framework viewsets
    –û–ë–†–ê–ë–û–¢–ö–ê: –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è Finance –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    –í–´–•–û–î–Ø–©–ò–ï –î–ê–ù–ù–´–ï: –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ API –æ—Ç–≤–µ—Ç—ã –¥–ª—è Finance
    –°–í–Ø–ó–ò: UnifiedResponseHandler, logging
    –§–û–†–ú–ê–¢: ModelViewSet —Å Finance-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
    """
    
    def handle_exception(self, exc):
        """
        –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è Finance
        
        –í–•–û–î–Ø–©–ò–ï –î–ê–ù–ù–´–ï: exc (–∏—Å–∫–ª—é—á–µ–Ω–∏–µ)
        –ò–°–¢–û–ß–ù–ò–ö–ò –î–ê–ù–ù–´–ï: Django REST Framework –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        –û–ë–†–ê–ë–û–¢–ö–ê: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ Finance –ª–æ–≥–≥–µ—Ä –∏ –≤–æ–∑–≤—Ä–∞—Ç —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        –í–´–•–û–î–Ø–©–ò–ï –î–ê–ù–ù–´–ï: HTTP 500 –æ—Ç–≤–µ—Ç —Å Finance-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–º –∫–æ–¥–æ–º –æ—à–∏–±–∫–∏
        –°–í–Ø–ó–ò: UnifiedResponseHandler.error_response(), logging
        –§–û–†–ú–ê–¢: Response —Å error_response –∏ FINANCE_API_ERROR –∫–æ–¥–æ–º
        """
        import logging
        logger = logging.getLogger('apps.finance')
        logger.error(f"Finance API error: {exc}")
        
        return Response(
            UnifiedResponseHandler.error_response(
                str(exc),
                error_code="FINANCE_API_ERROR"
            ),
            status=status.HTTP_500_INTERNAL_SERVER_ERROR
        )
