#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ reject
"""
import os
import sys
import django

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

from django.contrib.auth import get_user_model
from apps.huntflow.services import HuntflowService

User = get_user_model()

def main():
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = User.objects.first()
        if not user:
            print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username}")
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å Huntflow
        huntflow_service = HuntflowService(user)
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã
        accounts = huntflow_service.get_accounts()
        if not accounts or 'items' not in accounts:
            print("‚ùå –ê–∫–∫–∞—É–Ω—Ç—ã Huntflow –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        account_id = accounts['items'][0]['id']
        print(f"üè¢ –ê–∫–∫–∞—É–Ω—Ç ID: {account_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã
        statuses = huntflow_service.get_vacancy_statuses(account_id)
        if not statuses or 'items' not in statuses:
            print("‚ùå –°—Ç–∞—Ç—É—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –ø–æ–∏—Å–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è task_status='reject'")
        print("="*60)
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –∏–∑ _bind_applicant_to_vacancy
        task_status = 'reject'
        target_status = None
        
        if task_status and task_status.lower() == 'reject':
            print(f"üîç –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ ClickUp: {task_status}, –∏—â–µ–º —Å—Ç–∞—Ç—É—Å '–û—Ç–∫–∞–∑' –≤ Huntflow")
            for status in statuses['items']:
                status_name = status.get('name', '').lower()
                status_type = status.get('type', '').lower()
                
                # –ò—â–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–∫–∞–∑–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–∏–ø–∞ 'trash' –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å '–æ—Ç–∫–∞–∑'/'reject')
                if ('–æ—Ç–∫–∞–∑' in status_name or 'reject' in status_name) or status_type == 'trash':
                    print(f"   üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å: '{status['name']}' (—Ç–∏–ø: {status_type})")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—Å—Ç–∞—Ç—É—Å—ã (reject_reasons)
                    if 'reject_reasons' in status and status['reject_reasons']:
                        print(f"      ‚îî‚îÄ –ù–∞–π–¥–µ–Ω—ã –ø–æ–¥—Å—Ç–∞—Ç—É—Å—ã: {len(status['reject_reasons'])}")
                        for reason in status['reject_reasons']:
                            reason_name = reason.get('name', '').lower()
                            print(f"         - '{reason['name']}'")
                            if '–ø–æ –¥—Ä—É–≥–æ–π –ø—Ä–∏—á–∏–Ω–µ' in reason_name or 'other reason' in reason_name:
                                target_status = reason['id']
                                print(f"         ‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–¥—Å—Ç–∞—Ç—É—Å –æ—Ç–∫–∞–∑–∞: {reason['name']} (ID: {reason['id']})")
                                break
                    else:
                        # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥—Å—Ç–∞—Ç—É—Å–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–∞—Ç—É—Å –æ—Ç–∫–∞–∑–∞
                        target_status = status['id']
                        print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω —Å—Ç–∞—Ç—É—Å –æ—Ç–∫–∞–∑–∞: {status['name']} (ID: {status['id']}) —Ç–∏–ø–∞ '{status_type}'")
                        break
        
        if not target_status:
            print("‚ùå –°—Ç–∞—Ç—É—Å –æ—Ç–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            # –ò—â–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            for status in statuses['items']:
                if status.get('order', 0) == 1 or status.get('name', '').lower() in ['–Ω–æ–≤–∞—è', 'new', '–æ—Ç–∫–ª–∏–∫', 'response']:
                    target_status = status['id']
                    print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {status['name']} (ID: {status['id']})")
                    break
        else:
            print(f"\nüéØ –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: {target_status}")
            
            # –ù–∞–π–¥–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            for status in statuses['items']:
                if status['id'] == target_status:
                    print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: '{status['name']}'")
                    break
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—Å—Ç–∞—Ç—É—Å—ã
                if 'reject_reasons' in status:
                    for reason in status['reject_reasons']:
                        if reason['id'] == target_status:
                            print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: '{reason['name']}' (–ø–æ–¥—Å—Ç–∞—Ç—É—Å)")
                            break
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
