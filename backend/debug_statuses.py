#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –≤ Huntflow
"""
import os
import sys
import django

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

from django.contrib.auth import get_user_model
from apps.huntflow.services import HuntflowService

User = get_user_model()

def main():
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = User.objects.first()
        if not user:
            print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username}")
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å Huntflow
        huntflow_service = HuntflowService(user)
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã
        accounts = huntflow_service.get_accounts()
        if not accounts or 'items' not in accounts:
            print("‚ùå –ê–∫–∫–∞—É–Ω—Ç—ã Huntflow –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        account_id = accounts['items'][0]['id']
        account_name = accounts['items'][0]['name']
        
        print(f"üè¢ –ê–∫–∫–∞—É–Ω—Ç: {account_name} (ID: {account_id})")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã
        statuses = huntflow_service.get_vacancy_statuses(account_id)
        if not statuses or 'items' not in statuses:
            print("‚ùå –°—Ç–∞—Ç—É—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ç—É—Å–æ–≤: {len(statuses['items'])}")
        print("\n" + "="*80)
        
        for status in statuses['items']:
            status_id = status.get('id')
            status_name = status.get('name')
            status_type = status.get('type', 'unknown')
            status_order = status.get('order', 0)
            
            print(f"ID: {status_id:6} | –ü–æ—Ä—è–¥–æ–∫: {status_order:2} | –¢–∏–ø: {status_type:8} | –ù–∞–∑–≤–∞–Ω–∏–µ: '{status_name}'")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—Å—Ç–∞—Ç—É—Å—ã (reject_reasons)
            if 'reject_reasons' in status and status['reject_reasons']:
                print(f"      ‚îî‚îÄ –ü–æ–¥—Å—Ç–∞—Ç—É—Å—ã –æ—Ç–∫–∞–∑–∞:")
                for reason in status['reject_reasons']:
                    reason_id = reason.get('id')
                    reason_name = reason.get('name')
                    print(f"         ID: {reason_id:6} | –ù–∞–∑–≤–∞–Ω–∏–µ: '{reason_name}'")
        
        print("\n" + "="*80)
        print("üîç –ü–æ–∏—Å–∫ —Å—Ç–∞—Ç—É—Å–æ–≤ —Å '–æ—Ç–∫–∞–∑' –∏–ª–∏ 'reject':")
        
        found_reject_statuses = []
        for status in statuses['items']:
            status_name = status.get('name', '').lower()
            if '–æ—Ç–∫–∞–∑' in status_name or 'reject' in status_name:
                found_reject_statuses.append(status)
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Å—Ç–∞—Ç—É—Å –æ—Ç–∫–∞–∑–∞: ID {status['id']} - '{status['name']}'")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—Å—Ç–∞—Ç—É—Å—ã
                if 'reject_reasons' in status and status['reject_reasons']:
                    for reason in status['reject_reasons']:
                        reason_name = reason.get('name', '').lower()
                        if '–ø–æ –¥—Ä—É–≥–æ–π –ø—Ä–∏—á–∏–Ω–µ' in reason_name or 'other reason' in reason_name:
                            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–¥—Å—Ç–∞—Ç—É—Å: ID {reason['id']} - '{reason['name']}'")
        
        if not found_reject_statuses:
            print("‚ùå –°—Ç–∞—Ç—É—Å—ã –æ—Ç–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            print("1. –°–æ–∑–¥–∞–π—Ç–µ —Å—Ç–∞—Ç—É—Å '–û—Ç–∫–∞–∑' –≤ Huntflow")
            print("2. –î–æ–±–∞–≤—å—Ç–µ –ø–æ–¥—Å—Ç–∞—Ç—É—Å '–ü–æ –¥—Ä—É–≥–æ–π –ø—Ä–∏—á–∏–Ω–µ' –∫ —Å—Ç–∞—Ç—É—Å—É –æ—Ç–∫–∞–∑–∞")
            print("3. –ò–ª–∏ –æ–±–Ω–æ–≤–∏—Ç–µ –ª–æ–≥–∏–∫—É –ø–æ–∏—Å–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–∫–∞–∑–∞ –≤ –∫–æ–¥–µ")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
