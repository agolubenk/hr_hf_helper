#!/bin/bash

# üíæ –°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ backup —Å–∏—Å—Ç–µ–º—ã
# –ê–≤—Ç–æ—Ä: AI Assistant
# –î–∞—Ç–∞: $(date)

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
BACKUP_DIR="../backups"
TIMESTAMP=$(date +%Y%m%d_%H%M%S)
BACKUP_NAME="hrhelper_backup_$TIMESTAMP"
BACKUP_PATH="$BACKUP_DIR/$BACKUP_NAME"
RETENTION_DAYS=30  # –•—Ä–∞–Ω–∏—Ç—å backup'—ã 30 –¥–Ω–µ–π

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è backup'–æ–≤
mkdir -p "$BACKUP_DIR"

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è backup –∫–æ–¥–∞
backup_code() {
    log_info "–°–æ–∑–¥–∞–Ω–∏–µ backup –∫–æ–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
    
    mkdir -p "$BACKUP_PATH/code"
    
    # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –∫—Ä–æ–º–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
    rsync -av --exclude='__pycache__' \
              --exclude='*.pyc' \
              --exclude='.git' \
              --exclude='node_modules' \
              --exclude='venv' \
              --exclude='env' \
              --exclude='.env' \
              --exclude='logs' \
              --exclude='staticfiles' \
              --exclude='media' \
              --exclude='backups' \
              --exclude='db.sqlite3' \
              . "$BACKUP_PATH/code/"
    
    log_success "Backup –∫–æ–¥–∞ —Å–æ–∑–¥–∞–Ω: $BACKUP_PATH/code"
}

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è backup –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
backup_database() {
    log_info "–°–æ–∑–¥–∞–Ω–∏–µ backup –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    
    mkdir -p "$BACKUP_PATH/database"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if [ -f "db.sqlite3" ]; then
        # SQLite backup
        cp db.sqlite3 "$BACKUP_PATH/database/db.sqlite3"
        log_success "SQLite backup —Å–æ–∑–¥–∞–Ω"
    else
        # PostgreSQL backup
        if command -v pg_dump &> /dev/null; then
            pg_dump -h localhost -U postgres hrhelper > "$BACKUP_PATH/database/db_dump.sql"
            log_success "PostgreSQL backup —Å–æ–∑–¥–∞–Ω"
        else
            log_warning "pg_dump –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º PostgreSQL backup"
        fi
    fi
}

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è backup –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
backup_config() {
    log_info "–°–æ–∑–¥–∞–Ω–∏–µ backup –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
    
    mkdir -p "$BACKUP_PATH/config"
    
    # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    if [ -f "config/settings.py" ]; then
        cp config/settings.py "$BACKUP_PATH/config/"
    fi
    
    if [ -f "config/settings_production.py" ]; then
        cp config/settings_production.py "$BACKUP_PATH/config/"
    fi
    
    if [ -f "requirements.txt" ]; then
        cp requirements.txt "$BACKUP_PATH/config/"
    fi
    
    # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–±–µ–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤)
    if [ -f "env_production_example.txt" ]; then
        cp env_production_example.txt "$BACKUP_PATH/config/"
    fi
    
    log_success "Backup –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω"
}

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è backup –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤
backup_media() {
    log_info "–°–æ–∑–¥–∞–Ω–∏–µ backup –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤..."
    
    if [ -d "media" ] && [ "$(ls -A media)" ]; then
        mkdir -p "$BACKUP_PATH/media"
        cp -r media/* "$BACKUP_PATH/media/"
        log_success "Backup –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤ —Å–æ–∑–¥–∞–Ω"
    else
        log_info "–ú–µ–¥–∏–∞ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º"
    fi
}

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è backup –ª–æ–≥–æ–≤
backup_logs() {
    log_info "–°–æ–∑–¥–∞–Ω–∏–µ backup –ª–æ–≥–æ–≤..."
    
    if [ -d "logs" ] && [ "$(ls -A logs)" ]; then
        mkdir -p "$BACKUP_PATH/logs"
        cp -r logs/* "$BACKUP_PATH/logs/"
        log_success "Backup –ª–æ–≥–æ–≤ —Å–æ–∑–¥–∞–Ω"
    else
        log_info "–õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º"
    fi
}

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞
create_archive() {
    log_info "–°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ backup..."
    
    cd "$BACKUP_DIR"
    tar -czf "${BACKUP_NAME}.tar.gz" "$BACKUP_NAME"
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–π –ø–∞–ø–∫–∏
    rm -rf "$BACKUP_NAME"
    
    # –ü–æ–¥—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞
    ARCHIVE_SIZE=$(du -h "${BACKUP_NAME}.tar.gz" | cut -f1)
    
    log_success "–ê—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω: ${BACKUP_NAME}.tar.gz (—Ä–∞–∑–º–µ—Ä: $ARCHIVE_SIZE)"
}

# –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö backup'–æ–≤
cleanup_old_backups() {
    log_info "–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö backup'–æ–≤ (—Å—Ç–∞—Ä—à–µ $RETENTION_DAYS –¥–Ω–µ–π)..."
    
    # –ü–æ–∏—Å–∫ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö backup'–æ–≤
    find "$BACKUP_DIR" -name "hrhelper_backup_*.tar.gz" -type f -mtime +$RETENTION_DAYS -delete
    
    # –ü–æ–¥—Å—á–µ—Ç –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è backup'–æ–≤
    BACKUP_COUNT=$(find "$BACKUP_DIR" -name "hrhelper_backup_*.tar.gz" -type f | wc -l)
    
    log_success "–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Å—Ç–∞–ª–æ—Å—å backup'–æ–≤: $BACKUP_COUNT"
}

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö backup
create_backup_metadata() {
    log_info "–°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö backup..."
    
    METADATA_FILE="$BACKUP_PATH/metadata.json"
    
    cat > "$METADATA_FILE" << EOF
{
    "backup_name": "$BACKUP_NAME",
    "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
    "version": "1.0",
    "components": {
        "code": true,
        "database": true,
        "config": true,
        "media": $([ -d "media" ] && [ "$(ls -A media)" ] && echo "true" || echo "false"),
        "logs": $([ -d "logs" ] && [ "$(ls -A logs)" ] && echo "true" || echo "false")
    },
    "system_info": {
        "python_version": "$(python3 --version 2>&1)",
        "django_version": "$(python3 -c 'import django; print(django.get_version())' 2>/dev/null || echo 'unknown')",
        "disk_usage": "$(df -h . | tail -1 | awk '{print $5}')",
        "memory_usage": "$(free -h | grep Mem | awk '{print $3 "/" $2}')"
    },
    "created_by": "backup.sh",
    "notes": "Automated backup of HRHelper application"
}
EOF
    
    log_success "–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã: $METADATA_FILE"
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ backup
verify_backup() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ backup..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä—Ö–∏–≤–∞
    if [ -f "$BACKUP_DIR/${BACKUP_NAME}.tar.gz" ]; then
        if tar -tzf "$BACKUP_DIR/${BACKUP_NAME}.tar.gz" > /dev/null; then
            log_success "–ê—Ä—Ö–∏–≤ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω"
        else
            log_error "–ê—Ä—Ö–∏–≤ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω"
            return 1
        fi
    else
        log_error "–ê—Ä—Ö–∏–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
    ARCHIVE_SIZE=$(stat -f%z "$BACKUP_DIR/${BACKUP_NAME}.tar.gz" 2>/dev/null || stat -c%s "$BACKUP_DIR/${BACKUP_NAME}.tar.gz" 2>/dev/null)
    if [ "$ARCHIVE_SIZE" -gt 1000 ]; then  # –ú–∏–Ω–∏–º—É–º 1KB
        log_success "–†–∞–∑–º–µ—Ä –∞—Ä—Ö–∏–≤–∞ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: $ARCHIVE_SIZE –±–∞–π—Ç"
    else
        log_error "–†–∞–∑–º–µ—Ä –∞—Ä—Ö–∏–≤–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –º–∞–ª: $ARCHIVE_SIZE –±–∞–π—Ç"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ backup
restore_backup() {
    local backup_file="$1"
    
    if [ -z "$backup_file" ]; then
        log_error "–ù–µ —É–∫–∞–∑–∞–Ω —Ñ–∞–π–ª backup –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"
        return 1
    fi
    
    if [ ! -f "$backup_file" ]; then
        log_error "–§–∞–π–ª backup –Ω–µ –Ω–∞–π–¥–µ–Ω: $backup_file"
        return 1
    fi
    
    log_warning "–í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ—Ç —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ!"
    read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): " -n 1 -r
    echo
    
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        log_info "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ"
        return 0
    fi
    
    log_info "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ backup: $backup_file"
    
    # –°–æ–∑–¥–∞–Ω–∏–µ backup —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    log_info "–°–æ–∑–¥–∞–Ω–∏–µ backup —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è..."
    ./backup.sh
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
    log_info "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    ./stop_services.sh 2>/dev/null || true
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞
    log_info "–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞..."
    cd "$BACKUP_DIR"
    tar -xzf "$(basename "$backup_file")"
    
    # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    log_info "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤..."
    cd ..
    rm -rf backend
    mv "backups/$(basename "$backup_file" .tar.gz)" backend
    
    # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if [ -f "backend/database/db.sqlite3" ]; then
        log_info "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ SQLite –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
        cp backend/database/db.sqlite3 .
    elif [ -f "backend/database/db_dump.sql" ]; then
        log_info "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ PostgreSQL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
        # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è PostgreSQL
        log_warning "PostgreSQL –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
    fi
    
    log_success "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
}

# –§—É–Ω–∫—Ü–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö backup'–æ–≤
list_backups() {
    log_info "–î–æ—Å—Ç—É–ø–Ω—ã–µ backup'—ã:"
    
    if [ -d "$BACKUP_DIR" ]; then
        ls -la "$BACKUP_DIR"/hrhelper_backup_*.tar.gz 2>/dev/null | while read -r line; do
            echo "  $line"
        done
        
        BACKUP_COUNT=$(ls -1 "$BACKUP_DIR"/hrhelper_backup_*.tar.gz 2>/dev/null | wc -l)
        log_info "–í—Å–µ–≥–æ backup'–æ–≤: $BACKUP_COUNT"
    else
        log_warning "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è backup'–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: $BACKUP_DIR"
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è backup
create_backup() {
    log_info "–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è backup: $BACKUP_NAME"
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ backup
    backup_code
    backup_database
    backup_config
    backup_media
    backup_logs
    create_backup_metadata
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞
    create_archive
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
    if verify_backup; then
        log_success "Backup —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ: $BACKUP_DIR/${BACKUP_NAME}.tar.gz"
        
        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö backup'–æ–≤
        cleanup_old_backups
        
        # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ backup
        ARCHIVE_SIZE=$(du -h "$BACKUP_DIR/${BACKUP_NAME}.tar.gz" | cut -f1)
        log_info "–†–∞–∑–º–µ—Ä backup: $ARCHIVE_SIZE"
        log_info "–ü—É—Ç—å: $BACKUP_DIR/${BACKUP_NAME}.tar.gz"
        
    else
        log_error "Backup —Å–æ–∑–¥–∞–Ω —Å –æ—à–∏–±–∫–∞–º–∏"
        return 1
    fi
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
case "${1:-create}" in
    "create")
        create_backup
        ;;
    "restore")
        restore_backup "$2"
        ;;
    "list")
        list_backups
        ;;
    "cleanup")
        cleanup_old_backups
        ;;
    "verify")
        if [ -n "$2" ]; then
            verify_backup "$2"
        else
            log_error "–£–∫–∞–∂–∏—Ç–µ —Ñ–∞–π–ª backup –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"
            exit 1
        fi
        ;;
    *)
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 {create|restore|list|cleanup|verify}"
        echo ""
        echo "–ö–æ–º–∞–Ω–¥—ã:"
        echo "  create [name]  - –°–æ–∑–¥–∞—Ç—å backup"
        echo "  restore <file> - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ backup"
        echo "  list          - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ backup'–æ–≤"
        echo "  cleanup       - –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ backup'—ã"
        echo "  verify <file> - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å backup"
        echo ""
        echo "–ü—Ä–∏–º–µ—Ä—ã:"
        echo "  $0 create"
        echo "  $0 restore backups/hrhelper_backup_20240101_120000.tar.gz"
        echo "  $0 list"
        exit 1
        ;;
esac

