// =============================================================================
// VACANCY AND SLOTS FUNCTIONALITY (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ gdata_automation.html)
// =============================================================================

// –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏–π –∏–∑ Django –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
console.log('üîç DEBUG: –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å–æ–±—ã—Ç–∏–π...');

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –±—É–¥—É—Ç –æ–±—ä—è–≤–ª–µ–Ω—ã –≤ —à–∞–±–ª–æ–Ω–µ
let vacancyData = {};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    console.log('üîç DEBUG: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ:', calendarEvents ? calendarEvents.length : 0);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–∑ JSON script
    const vacancyDataElement = document.getElementById('vacancy-data');
    if (vacancyDataElement) {
        try {
            vacancyData = JSON.parse(vacancyDataElement.textContent);
            console.log('üîç DEBUG: –î–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', vacancyData);
        } catch (e) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–∏:', e);
        }
    }
    
    console.log('üîç DEBUG: –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Ä–µ–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:', calendarEvents.length);
    console.log('üîç DEBUG: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ª–æ—Ç–æ–≤:', slotsSettings);
    console.log('üîç DEBUG: –î–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏:', vacancyData);
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è
    setupCollapseButtons();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã
    initializeSlots();
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è
function setupCollapseButtons() {
    console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–æ–∫ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è...');
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è
    const collapseButtons = document.querySelectorAll('.btn-collapse');
    collapseButtons.forEach(button => {
        button.addEventListener('click', function() {
            const targetId = this.getAttribute('data-bs-target');
            const targetElement = document.querySelector(targetId);
            
            if (targetElement) {
                // –û–±–Ω–æ–≤–ª—è–µ–º aria-expanded –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                const isExpanded = targetElement.classList.contains('show');
                this.setAttribute('aria-expanded', !isExpanded);
                
                console.log(`üîÑ ${targetId} ${isExpanded ? '—Å–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç—Å—è' : '—Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç—Å—è'}`);
            }
        });
    });
    
    console.log('‚úÖ –ö–Ω–æ–ø–∫–∏ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
}

// –§—É–Ω–∫—Ü–∏—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–æ–∫ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
window.copyVacancyLink = function(country) {
    let vacancyLink = '';
    let buttonClass = '';
    let countryName = '';
    
    if (country === 'belarus') {
        vacancyLink = vacancyData.vacancy_link_belarus || window.vacancyLinkBelarus || '';
        buttonClass = 'btn-copy-vacancy-link-belarus';
        countryName = '–ë–µ–ª–∞—Ä—É—Å–∏';
    } else if (country === 'poland') {
        vacancyLink = vacancyData.vacancy_link_poland || window.vacancyLinkPoland || '';
        buttonClass = 'btn-copy-vacancy-link-poland';
        countryName = '–ü–æ–ª—å—à–∏';
    }
    
    if (!vacancyLink || vacancyLink.trim() === '') {
        showNotification('–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é –¥–ª—è ' + countryName + ' –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞', 'warning');
        return;
    }
    
    // –ö–æ–ø–∏—Ä—É–µ–º –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
    navigator.clipboard.writeText(vacancyLink).then(function() {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        showNotification('–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é –¥–ª—è ' + countryName + ' —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!', 'success');
        
        // –í–∏–∑—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
        const button = document.querySelector('.' + buttonClass);
        if (button) {
            const originalClass = button.className;
            button.className = originalClass + ' copy-success';
            
            setTimeout(function() {
                button.className = originalClass;
            }, 2000);
        }
        
    }).catch(function(err) {
        console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: ', err);
        showNotification('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞', 'error');
    });
};

// –§—É–Ω–∫—Ü–∏—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
window.copyQuestions = function(country) {
    let questions = '';
    let buttonClass = '';
    let countryName = '';
    
    if (country === 'belarus') {
        questions = vacancyData.questions_belarus || window.questionsBelarus || '';
        buttonClass = 'btn-copy-belarus';
        countryName = '–ë–µ–ª–∞—Ä—É—Å–∏';
    } else if (country === 'poland') {
        questions = vacancyData.questions_poland || window.questionsPoland || '';
        buttonClass = 'btn-copy-poland';
        countryName = '–ü–æ–ª—å—à–∏';
    }
    
    if (!questions || questions.trim() === '') {
        showNotification('–í–æ–ø—Ä–æ—Å—ã –¥–ª—è ' + countryName + ' –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã', 'warning');
        return;
    }
    
    // –ö–æ–ø–∏—Ä—É–µ–º –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
    navigator.clipboard.writeText(questions).then(function() {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        showNotification('–í–æ–ø—Ä–æ—Å—ã –¥–ª—è ' + countryName + ' —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!', 'success');
        
        // –í–∏–∑—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
        const button = document.querySelector('.' + buttonClass);
        if (button) {
            const originalClass = button.className;
            button.className = originalClass + ' copy-success';
            
            setTimeout(function() {
                button.className = originalClass;
            }, 2000);
        }
        
    }).catch(function(err) {
        console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: ', err);
        showNotification('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞', 'error');
    });
};

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showNotification(message, type = 'info') {
    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const notification = document.createElement('div');
    notification.className = `alert alert-${type === 'success' ? 'success' : type === 'warning' ? 'warning' : type === 'error' ? 'danger' : 'info'} alert-dismissible fade show position-fixed`;
    notification.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
    
    notification.innerHTML = `
        <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'warning' ? 'exclamation-triangle' : type === 'error' ? 'times-circle' : 'info-circle'} me-2"></i>
        ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    document.body.appendChild(notification);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(function() {
        if (notification.parentNode) {
            notification.parentNode.removeChild(notification);
        }
    }, 5000);
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª–æ—Ç–æ–≤ (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω—ã –∏–∑ calendar_events.html)
function calculateAvailableSlots(dayEvents, date) {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã: 11:00-18:00 (7 —á–∞—Å–æ–≤)
    const workStartHour = 11;
    const workEndHour = 18;
    
    // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ —Å–ª–æ—Ç–æ–≤ –ø–æ —á–∞—Å–∞–º
    const slots = [];
    for (let hour = workStartHour; hour < workEndHour; hour++) {
        slots.push({
            hour: hour,
            start: new Date(date.getFullYear(), date.getMonth(), date.getDate(), hour, 0, 0),
            end: new Date(date.getFullYear(), date.getMonth(), date.getDate(), hour + 1, 0, 0),
            isOccupied: false
        });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–Ω—è –∏ –æ—Ç–º–µ—á–∞–µ–º –∑–∞–Ω—è—Ç—ã–µ —Å–ª–æ—Ç—ã
    dayEvents.forEach(event => {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–±—ã—Ç–∏—è –Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å
        if (event.is_all_day) {
            return;
        }
        
        const eventStart = new Date(event.start);
        const eventEnd = new Date(event.end);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è –ª–∏ —Å–æ–±—ã—Ç–∏–µ —Å —Ä–∞–±–æ—á–∏–º–∏ —á–∞—Å–∞–º–∏
        if (eventStart.getHours() < workEndHour && eventEnd.getHours() >= workStartHour) {
            // –û—Ç–º–µ—á–∞–µ–º –∑–∞–Ω—è—Ç—ã–µ —Å–ª–æ—Ç—ã
            slots.forEach(slot => {
                // –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –∑–∞–Ω–∏–º–∞–µ—Ç —Ö–æ—Ç—è –±—ã –ø–æ–ª—á–∞—Å–∞ –≤ —Å–ª–æ—Ç–µ, —Å—á–∏—Ç–∞–µ–º —Å–ª–æ—Ç –∑–∞–Ω—è—Ç—ã–º
                const slotStart = slot.start.getTime();
                const slotEnd = slot.end.getTime();
                const eventStartTime = eventStart.getTime();
                const eventEndTime = eventEnd.getTime();
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ (—Å–æ–±—ã—Ç–∏–µ –∑–∞–Ω–∏–º–∞–µ—Ç –º–∏–Ω–∏–º—É–º 30 –º–∏–Ω—É—Ç –≤ —Å–ª–æ—Ç–µ)
                const overlapStart = Math.max(slotStart, eventStartTime);
                const overlapEnd = Math.min(slotEnd, eventEndTime);
                const overlapDuration = overlapEnd - overlapStart;
                
                if (overlapDuration >= 30 * 60 * 1000) { // 30 –º–∏–Ω—É—Ç –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
                    slot.isOccupied = true;
                }
            });
        }
    });
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
    const availableRanges = [];
    let currentRangeStart = null;
    
    slots.forEach((slot, index) => {
        if (!slot.isOccupied) {
            if (currentRangeStart === null) {
                currentRangeStart = slot.hour;
            }
        } else {
            if (currentRangeStart !== null) {
                // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω
                if (currentRangeStart === slot.hour - 1) {
                    availableRanges.push(currentRangeStart.toString());
                } else {
                    // –î–æ–±–∞–≤–ª—è–µ–º +1 –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —á–∞—Å—É –¥–∏–∞–ø–∞–∑–æ–Ω–∞, —Ç–∞–∫ –∫–∞–∫ —Å–ª–æ—Ç –æ–∑–Ω–∞—á–∞–µ—Ç –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–∞—Å–∞
                    availableRanges.push(`${currentRangeStart}-${slot.hour}`);
                }
                currentRangeStart = null;
            }
        }
    });
    
    // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if (currentRangeStart !== null) {
        const lastSlot = slots[slots.length - 1];
        if (currentRangeStart === lastSlot.hour) {
            availableRanges.push(currentRangeStart.toString());
        } else {
            // –î–æ–±–∞–≤–ª—è–µ–º +1 –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —á–∞—Å—É, —Ç–∞–∫ –∫–∞–∫ —Å–ª–æ—Ç 17 –æ–∑–Ω–∞—á–∞–µ—Ç –≤—Ä–µ–º—è 17:00-18:00
            availableRanges.push(`${currentRangeStart}-${lastSlot.hour + 1}`);
        }
    }
    
    return availableRanges.length > 0 ? availableRanges.join(', ') : '–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤';
}

function generateWeekSlots(weekOffset) {
    const today = new Date();
    const startOfWeek = new Date(today);
    
    // –ù–∞—Ö–æ–¥–∏–º –Ω–∞—á–∞–ª–æ –Ω–µ–¥–µ–ª–∏ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)
    const dayOfWeek = today.getDay();
    const daysToMonday = dayOfWeek === 0 ? -6 : 1 - dayOfWeek;
    startOfWeek.setDate(today.getDate() + daysToMonday + (weekOffset * 7));
    
    console.log(`üìÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª–æ—Ç–æ–≤ –¥–ª—è –Ω–µ–¥–µ–ª–∏ ${weekOffset}, –Ω–∞—á–∞–ª–æ –Ω–µ–¥–µ–ª–∏:`, startOfWeek.toDateString());
    
    const slots = [];
    const weekdays = ['–ü–ù', '–í–¢', '–°–†', '–ß–¢', '–ü–¢', '–°–ë', '–í–°'];
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã –¥–ª—è —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-–ø—è—Ç–Ω–∏—Ü–∞)
    for (let i = 0; i < 5; i++) {
        const date = new Date(startOfWeek);
        date.setDate(startOfWeek.getDate() + i);
        
        const dateStr = date.toLocaleDateString('ru-RU', { day: '2-digit', month: '2-digit' });
        
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—à–µ–¥—à–∏–µ –¥–Ω–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏ (–≤–∫–ª—é—á–∞—è —Å–µ–≥–æ–¥–Ω—è)
        if (weekOffset === 0) {
            const now = new Date();
            const dateStart = new Date(date);
            dateStart.setHours(0, 0, 0, 0);
            const nowStart = new Date(now);
            nowStart.setHours(0, 0, 0, 0);
            
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å –∏ –≤—Å–µ –ø—Ä–æ—à–µ–¥—à–∏–µ –¥–Ω–∏
            if (dateStart <= nowStart) {
                console.log(`üö´ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–µ–Ω—å ${dateStr} (—Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ –ø—Ä–æ—à–µ–¥—à–∏–π)`);
                continue;
            }
        }
        
        let meetingsCount = 0;
        let availableSlots = '';
        
        if (typeof calendarEvents !== 'undefined' && Array.isArray(calendarEvents)) {
            console.log(`üîç –ü–æ–∏—Å–∫ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –¥–∞—Ç—ã ${dateStr} (${date.toDateString()})`);
            
            const dayEvents = calendarEvents.filter(event => {
                const eventDate = new Date(event.start);
                const isMatch = eventDate.toDateString() === date.toDateString();
                if (isMatch) {
                    console.log(`  ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ: "${event.title}" –Ω–∞ ${eventDate.toDateString()}`);
                }
                return isMatch;
            });
            
            // –ò—Å–∫–ª—é—á–∞–µ–º –≤—Å—Ç—Ä–µ—á–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º "–û–±–µ–¥" –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –≤—Å—Ç—Ä–µ—á
            const meetingsWithoutLunch = dayEvents.filter(event => {
                const title = event.title.toLowerCase();
                const isLunch = title.includes('–æ–±–µ–¥') || title.includes('lunch');
                if (isLunch) {
                    console.log(`  üçΩÔ∏è –ò—Å–∫–ª—é—á–∞–µ–º –æ–±–µ–¥: "${event.title}"`);
                }
                return !isLunch;
            });
            
            meetingsCount = meetingsWithoutLunch.length;
            
            // –í—ã—á–∏—Å–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –≤—Ä–µ–º–µ–Ω–∏ (11-18, –∏—Å–∫–ª—é—á–∞—è –æ–±–µ–¥)
            availableSlots = calculateAvailableSlots(dayEvents, date);
            
            console.log(`üìÖ –î–∞—Ç–∞ ${dateStr}: ${meetingsWithoutLunch.length} –≤—Å—Ç—Ä–µ—á (–∏—Å–∫–ª—é—á–∞—è –æ–±–µ–¥ –∏–∑ ${dayEvents.length} –æ–±—â–∏—Ö), —Å–ª–æ—Ç—ã: ${availableSlots}`);
        } else {
            console.log(`‚ö†Ô∏è calendarEvents –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –¥–∞—Ç—ã ${dateStr}`);
            // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ–±—ã—Ç–∏—è—Ö, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Å–ª–æ—Ç—ã –∫–∞–∫ –¥–æ—Å—Ç—É–ø–Ω—ã–µ
            availableSlots = '11-18';
        }
        
        slots.push({
            date: date,
            dateStr: dateStr,
            weekday: weekdays[i],
            meetingsCount: meetingsCount,
            availableSlots: availableSlots
        });
    }
    
    console.log(`üìÖ –ò—Ç–æ–≥–æ —Å–ª–æ—Ç–æ–≤ –¥–ª—è –Ω–µ–¥–µ–ª–∏ ${weekOffset}: ${slots.length}`);
    return slots;
}

function initializeSlots() {
    console.log('üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–æ—Ç–æ–≤...');
    console.log('üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è:', typeof calendarEvents, calendarEvents ? calendarEvents.length : '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    const currentWeekSection = document.querySelector('.week-section.current-week');
    const nextWeekSection = document.querySelector('.week-section.next-week');
    console.log('üìÖ –°–µ–∫—Ü–∏—è —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏:', currentWeekSection);
    console.log('üìÖ –°–µ–∫—Ü–∏—è —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–∏:', nextWeekSection);
    
    if (!currentWeekSection || !nextWeekSection) {
        console.error('‚ùå –°–µ–∫—Ü–∏–∏ –Ω–µ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!');
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ calendarEvents
    if (!calendarEvents || !Array.isArray(calendarEvents)) {
        console.error('‚ùå calendarEvents –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º!');
        return;
    }
    
    console.log('üìä calendarEvents —Å–æ–¥–µ—Ä–∂–∏—Ç', calendarEvents.length, '—Å–æ–±—ã—Ç–∏–π');
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π –∏ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–∏
    console.log('üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏...');
    const currentWeekSlots = generateWeekSlots(0);
    console.log('üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–∏...');
    const nextWeekSlots = generateWeekSlots(1);
    
    console.log('üìÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏:', currentWeekSlots);
    console.log('üìÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–∏:', nextWeekSlots);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º DOM —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–ª–æ—Ç–æ–≤
    console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–æ—Ç–æ–≤...');
    updateSlotsDisplay(currentWeekSlots, nextWeekSlots);
    
    console.log('‚úÖ –°–ª–æ—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    updateLastUpdateTime();
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
function updateLastUpdateTime() {
    const timestampElement = document.getElementById('update-timestamp');
    if (timestampElement) {
        const now = new Date();
        const timeString = now.toLocaleTimeString('ru-RU', { 
            hour: '2-digit', 
            minute: '2-digit',
            second: '2-digit'
        });
        timestampElement.textContent = timeString;
        console.log(`üïê –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${timeString}`);
    }
}

function updateSlotsDisplay(currentWeekSlots, nextWeekSlots) {
    console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ª–æ—Ç–æ–≤...');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é
    const currentWeekSection = document.querySelector('.week-section.current-week');
    if (currentWeekSection && currentWeekSlots.length > 0) {
        const slotsRow = currentWeekSection.querySelector('.row');
        if (slotsRow) {
            slotsRow.innerHTML = '';
            currentWeekSlots.forEach(slot => {
                const slotHtml = createSlotCard(slot);
                slotsRow.insertAdjacentHTML('beforeend', slotHtml);
            });
        }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é
    const nextWeekSection = document.querySelector('.week-section.next-week');
    if (nextWeekSection && nextWeekSlots.length > 0) {
        const slotsRow = nextWeekSection.querySelector('.row');
        if (slotsRow) {
            slotsRow.innerHTML = '';
            nextWeekSlots.forEach(slot => {
                const slotHtml = createSlotCard(slot);
                slotsRow.insertAdjacentHTML('beforeend', slotHtml);
            });
        }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–ª–æ—Ç–æ–≤ –∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    updateSlotButtons(currentWeekSlots, nextWeekSlots);
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫ —Å–ª–æ—Ç–æ–≤
function updateSlotButtons(currentWeekSlots, nextWeekSlots) {
    console.log('üîò –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫ —Å–ª–æ—Ç–æ–≤...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –≤ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–µ
    const currentWeekHasSlots = currentWeekSlots && currentWeekSlots.length > 0 && 
        currentWeekSlots.some(slot => slot.availableSlots !== '–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –≤ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ
    const nextWeekHasSlots = nextWeekSlots && nextWeekSlots.length > 0 && 
        nextWeekSlots.some(slot => slot.availableSlots !== '–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤');
    
    console.log(`üìÖ –¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è –∏–º–µ–µ—Ç —Å–ª–æ—Ç—ã: ${currentWeekHasSlots}`);
    console.log(`üìÖ –°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è –∏–º–µ–µ—Ç —Å–ª–æ—Ç—ã: ${nextWeekHasSlots}`);
    
    // –ö–Ω–æ–ø–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–æ—Ç–æ–≤ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
    const currentWeekBtn = document.querySelector('.btn-copy-current-week');
    if (currentWeekBtn) {
        if (currentWeekHasSlots) {
            currentWeekBtn.disabled = false;
            currentWeekBtn.classList.remove('disabled');
            currentWeekBtn.title = '–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ—Ç—ã —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏';
        } else {
            currentWeekBtn.disabled = true;
            currentWeekBtn.classList.add('disabled');
            currentWeekBtn.title = '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–∞ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–µ';
        }
    }
    
    // –ö–Ω–æ–ø–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–æ—Ç–æ–≤ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–∏
    const nextWeekBtn = document.querySelector('.btn-copy-next-week');
    if (nextWeekBtn) {
        if (nextWeekHasSlots) {
            nextWeekBtn.disabled = false;
            nextWeekBtn.classList.remove('disabled');
            nextWeekBtn.title = '–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ—Ç—ã —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–∏';
        } else {
            nextWeekBtn.disabled = true;
            nextWeekBtn.classList.add('disabled');
            nextWeekBtn.title = '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ';
        }
    }
    
    // –ö–Ω–æ–ø–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Å–ª–æ—Ç–æ–≤ (–¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è, –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –Ω–µ–¥–µ–ª—è –Ω–µ –∏–º–µ–µ—Ç —Å–ª–æ—Ç–æ–≤)
    const allSlotsBtn = document.querySelector('.btn-copy-all-slots');
    if (allSlotsBtn) {
        if (currentWeekHasSlots && nextWeekHasSlots) {
            allSlotsBtn.disabled = false;
            allSlotsBtn.classList.remove('disabled');
            allSlotsBtn.title = '–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Å–ª–æ—Ç—ã';
        } else {
            allSlotsBtn.disabled = true;
            allSlotsBtn.classList.add('disabled');
            allSlotsBtn.title = '–ù–µ –≤—Å–µ –Ω–µ–¥–µ–ª–∏ –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã';
        }
    }
    
    console.log('‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —Å–ª–æ—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–æ');
}

function createSlotCard(slot) {
    const slotsCount = slot.availableSlots === '–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤' ? 0 : slot.availableSlots.split(',').length;
    const badgeClass = slotsCount > 0 ? 'bg-primary' : 'bg-secondary';
    
    return `
        <div class="col-md-6 col-lg-4 mb-3">
            <div class="slot-card card h-100">
                <div class="card-body p-3">
                    <div class="d-flex justify-content-between align-items-start mb-2">
                        <span class="fw-bold">${slot.dateStr}</span>
                        <span class="badge ${badgeClass} rounded-pill">${slotsCount}</span>
                    </div>
                    <div class="text-muted small mb-2">${slot.weekday}</div>
                    <div class="text-primary small">${slot.availableSlots}</div>
                </div>
            </div>
        </div>
    `;
}

// –§—É–Ω–∫—Ü–∏–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–æ—Ç–æ–≤ (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω—ã –∏–∑ calendar_events.html)
window.copyAllSlots = function() {
    console.log('üìã –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–ª–æ—Ç–æ–≤...');
    
    const currentWeekSlots = [];
    const nextWeekSlots = [];
    
    // –ö–æ–ø–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã –∏–∑ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
    const currentWeekSection = document.querySelector('.week-section.current-week');
    if (currentWeekSection) {
        currentWeekSection.querySelectorAll('.slot-card').forEach(card => {
            const slotData = extractSlotData(card);
            if (slotData) {
                currentWeekSlots.push(slotData);
            }
        });
    }
    
    // –ö–æ–ø–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã –∏–∑ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–∏
    const nextWeekSection = document.querySelector('.week-section.next-week');
    if (nextWeekSection) {
        nextWeekSection.querySelectorAll('.slot-card').forEach(card => {
            const slotData = extractSlotData(card);
            if (slotData) {
                nextWeekSlots.push(slotData);
            }
        });
    }
    
    if (currentWeekSlots.length === 0 && nextWeekSlots.length === 0) {
        showNotification('–ù–µ—Ç —Å–ª–æ—Ç–æ–≤ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è', 'warning');
        return;
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫
    let text = '';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–π –ø—Ä–µ—Ñ–∏–∫—Å, –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
    if (slotsSettings.allSlotsPrefix) {
        text += `${slotsSettings.allSlotsPrefix}\n`;
    }
    
    if (currentWeekSlots.length > 0) {
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ—Ç—ã —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
        currentWeekSlots.forEach(slot => {
            text += `${slot.weekday} ${slot.slots}\n`;
        });
    }
    
    if (nextWeekSlots.length > 0) {
        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª—è—é—â–∏–π —Ç–µ–∫—Å—Ç –º–µ–∂–¥—É –Ω–µ–¥–µ–ª—è–º–∏, –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
        if (slotsSettings.separatorText) {
            text += `\n${slotsSettings.separatorText}\n`;
        } else {
            text += '\n';
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ—Ç—ã —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–∏
        nextWeekSlots.forEach(slot => {
            text += `${slot.weekday} (${slot.date}) ${slot.slots}\n`;
        });
    }
    
    copySlotsToClipboard(text.trim());
};

window.copyWeekSlots = function(weekType) {
    console.log(`üìã –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ—Ç–æ–≤ ${weekType} –Ω–µ–¥–µ–ª–∏...`);
    
    // –ù–∞—Ö–æ–¥–∏–º —Å–µ–∫—Ü–∏—é –Ω–µ–¥–µ–ª–∏ –ø–æ —Ç–∏–ø—É
    let weekSection;
    if (weekType === 'current') {
        weekSection = document.querySelector('.week-section.current-week');
    } else if (weekType === 'next') {
        weekSection = document.querySelector('.week-section.next-week');
    }
    
    if (!weekSection) {
        showNotification('–°–µ–∫—Ü–∏—è –Ω–µ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', 'error');
        return;
    }
    
    const slots = [];
    weekSection.querySelectorAll('.slot-card').forEach(card => {
        const slotData = extractSlotData(card);
        if (slotData) {
            slots.push(slotData);
        }
    });
    
    if (slots.length === 0) {
        showNotification('–ù–µ—Ç —Å–ª–æ—Ç–æ–≤ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ', 'warning');
        return;
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫
    let text = '';
    if (weekType === 'current') {
        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏, –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
        if (slotsSettings.currentWeekPrefix) {
            text += `${slotsSettings.currentWeekPrefix}\n`;
        }
        // –§–æ—Ä–º–∞—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏: –ü–ù 12-15, 17
        slots.forEach(slot => {
            text += `${slot.weekday} ${slot.slots}\n`;
        });
    } else if (weekType === 'next') {
        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–∏, –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
        if (slotsSettings.nextWeekPrefix) {
            text += `${slotsSettings.nextWeekPrefix}\n`;
        }
        // –§–æ—Ä–º–∞—Ç –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–∏: –ü–ù (15.09) 11-14, 15
        slots.forEach(slot => {
            text += `${slot.weekday} (${slot.date}) ${slot.slots}\n`;
        });
    }
    
    copySlotsToClipboard(text.trim());
};

function extractSlotData(card) {
    try {
        const dateElement = card.querySelector('.fw-bold');
        const weekdayElement = card.querySelector('.text-muted');
        const slotsElement = card.querySelector('.text-primary, .text-info');
        
        if (!dateElement || !weekdayElement || !slotsElement) {
            console.warn('‚ö†Ô∏è –ù–µ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã –≤ –∫–∞—Ä—Ç–æ—á–∫–µ —Å–ª–æ—Ç–∞');
            return null;
        }
        
        const slotData = {
            date: dateElement.textContent.trim(),
            weekday: weekdayElement.textContent.trim(),
            slots: slotsElement.textContent.trim()
        };
        
        console.log('üîç –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–ª–æ—Ç–∞:', slotData);
        return slotData;
    } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–ª–æ—Ç–∞:', e);
        return null;
    }
}

function copySlotsToClipboard(text) {
    if (navigator.clipboard && window.isSecureContext) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π API
        navigator.clipboard.writeText(text).then(() => {
            showNotification('–°–ª–æ—Ç—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!', 'success');
        }).catch(err => {
            console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', err);
            fallbackCopySlotsToClipboard(text);
        });
    } else {
        // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
        fallbackCopySlotsToClipboard(text);
    }
}

function fallbackCopySlotsToClipboard(text) {
    const textArea = document.createElement('textarea');
    textArea.value = text;
    textArea.style.position = 'fixed';
    textArea.style.left = '-999999px';
    textArea.style.top = '-999999px';
    document.body.appendChild(textArea);
    textArea.focus();
    textArea.select();
    
    try {
        document.execCommand('copy');
        showNotification('–°–ª–æ—Ç—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!', 'success');
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ fallback –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', err);
        showNotification('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–¥–µ–ª–∏—Ç—å —Ç–µ–∫—Å—Ç –≤—Ä—É—á–Ω—É—é.', 'error');
    }
    
    document.body.removeChild(textArea);
}