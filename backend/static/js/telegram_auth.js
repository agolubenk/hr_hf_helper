/**
 * JavaScript –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
 */

let checkInterval;
let isChecking = false;

// –°–æ–∫—Ä–∞—â–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å 5 —Å–µ–∫—É–Ω–¥ –¥–æ 2 —Å–µ–∫—É–Ω–¥
const CHECK_INTERVAL = 2000; // 2 —Å–µ–∫—É–Ω–¥—ã

async function generateQR() {
    try {
        console.log('–°–æ–∑–¥–∞–Ω–∏–µ QR...');
        showStatus('–°–æ–∑–¥–∞–Ω–∏–µ QR-–∫–æ–¥–∞...', 'info');
        
        const response = await fetch('/telegram/api/generate-qr/', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRFToken': getCookie('csrftoken')
            }
        });
        
        const data = await response.json();
        console.log('QR response:', data);
        
        if (data.success) {
            // –°–µ—Ä–≤–µ—Ä —É–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç data URL
            document.getElementById('qr-image').src = data.qr_image;
            showElement('qr-container');
            hideElement('step-initial');
            startAuthCheck();
            showStatus('QR-–∫–æ–¥ —Å–æ–∑–¥–∞–Ω. –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ –µ–≥–æ –≤ Telegram', 'warning');
        } else if (data.redirect) {
            location.reload();
        } else {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è QR:', data);
            showError('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è QR: ' + (data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ generateQR:', error);
        showError('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ' + error.message);
    }
}

function startAuthCheck() {
    if (checkInterval) {
        clearInterval(checkInterval);
    }
    
    isChecking = true;
    console.log('–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∫–∞–∂–¥—ã–µ', CHECK_INTERVAL, '–º—Å');
    
    // –î–µ–ª–∞–µ–º –ø–µ—Ä–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ä–∞–∑—É
    checkAuthStatus();
    
    // –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
    checkInterval = setInterval(() => {
        if (isChecking) {
            checkAuthStatus();
        }
    }, CHECK_INTERVAL);
}

async function checkAuthStatus() {
    try {
        console.log('–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
        
        const response = await fetch('/telegram/api/check-auth/', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRFToken': getCookie('csrftoken')
            }
        });
        
        const data = await response.json();
        console.log('Auth status response:', data);
        
        if (data.status === 'success') {
            console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!', data.user);
            stopAuthCheck();
            showSuccess(data.user);
            
        } else if (data.status === '2fa_required') {
            console.log('üîê –¢—Ä–µ–±—É–µ—Ç—Å—è 2FA');
            stopAuthCheck();
            show2FA();
            
        } else if (data.status === 'waiting' || data.status === 'timeout') {
            console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
            showStatus('–û–∂–∏–¥–∞–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è QR-–∫–æ–¥–∞...', 'warning');
            
        } else if (data.status === 'error') {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', data.error);
            showStatus('–û—à–∏–±–∫–∞: ' + data.error, 'danger');
            
            // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
            if (data.error.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω') || data.error.includes('–Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω')) {
                stopAuthCheck();
            }
        } else {
            console.log('‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å:', data.status);
            showStatus('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ' + data.status, 'warning');
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:', error);
        showStatus('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ' + error.message, 'danger');
    }
}

function stopAuthCheck() {
    if (checkInterval) {
        clearInterval(checkInterval);
        checkInterval = null;
    }
    isChecking = false;
    console.log('–û—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
}

function show2FA() {
    hideElement('qr-container');
    showElement('tfa-container');
    showStatus('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏', 'info');
    
    const passwordField = document.getElementById('tfa-password');
    if (passwordField) {
        passwordField.focus();
    }
}

async function submit2FA(event) {
    event.preventDefault();
    
    const passwordField = document.getElementById('tfa-password');
    const password = passwordField.value.trim();
    
    if (!password) {
        showError('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å 2FA');
        passwordField.focus();
        return;
    }
    
    try {
        console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º 2FA...');
        showStatus('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è 2FA...', 'info');
        
        const response = await fetch('/telegram/api/handle-2fa/', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRFToken': getCookie('csrftoken')
            },
            body: JSON.stringify({password: password})
        });
        
        const data = await response.json();
        console.log('2FA response:', data);
        
        if (data.success) {
            console.log('‚úÖ 2FA —É—Å–ø–µ—à–Ω–æ!', data.user);
            showSuccess(data.user);
        } else {
            console.error('‚ùå –û—à–∏–±–∫–∞ 2FA:', data.error);
            showError('–û—à–∏–±–∫–∞ 2FA: ' + data.error);
            passwordField.value = '';
            passwordField.focus();
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ submit2FA:', error);
        showError('–û—à–∏–±–∫–∞: ' + error.message);
        passwordField.focus();
    }
}

function showSuccess(user) {
    console.log('–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω —É—Å–ø–µ—Ö–∞ –¥–ª—è:', user);
    
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    hideElement('qr-container');
    hideElement('tfa-container');
    hideElement('step-initial');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—Ö
    showElement('success-container');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    const userDisplay = document.getElementById('user-info-display');
    if (userDisplay && user) {
        const displayName = user.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
        const username = user.username ? `(@${user.username})` : '';
        userDisplay.innerHTML = `<strong>${displayName}</strong> ${username}`;
    }
    
    showStatus('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!', 'success');
    
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –¥–∞—à–±–æ—Ä–¥ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(() => {
                console.log('–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –¥–∞—à–±–æ—Ä–¥...');
                window.location.href = '/telegram/dashboard/';
            }, 2000);
}

async function resetAuth() {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é Telegram?')) {
        return;
    }
    
    try {
        console.log('–°–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...');
        
        const response = await fetch('/telegram/api/reset-auth/', {
            method: 'POST',
            headers: {
                'X-CSRFToken': getCookie('csrftoken')
            }
        });
        
        const data = await response.json();
        
        if (data.success) {
            console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å–±—Ä–æ—à–µ–Ω–∞');
            alert('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å–±—Ä–æ—à–µ–Ω–∞');
            location.reload();
        } else {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞:', data.error);
            showError('–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞: ' + data.error);
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ resetAuth:', error);
        showError('–û—à–∏–±–∫–∞: ' + error.message);
    }
}

function cancelAuth() {
    console.log('–û—Ç–º–µ–Ω—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é');
    stopAuthCheck();
    
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    hideElement('qr-container');
    hideElement('tfa-container');
    hideElement('success-container');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω
    showElement('step-initial');
    showStatus('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞', 'info');
}

function showQR() {
    hideElement('tfa-container');
    showElement('qr-container');
    showStatus('QR-–∫–æ–¥ —Å–æ–∑–¥–∞–Ω. –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ –µ–≥–æ –≤ Telegram', 'warning');
    startAuthCheck();
}

async function recreateQR() {
    try {
        console.log('–ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ QR-–∫–æ–¥–∞...');
        showStatus('–ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ QR-–∫–æ–¥–∞...', 'info');
        
        const response = await fetch('/telegram/api/recreate-qr/', {
            method: 'POST',
            headers: {
                'X-CSRFToken': getCookie('csrftoken')
            }
        });
        
        const data = await response.json();
        
        if (data.success) {
            console.log('‚úÖ QR-–∫–æ–¥ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω');
            document.getElementById('qr-image').src = data.qr_image;
            showElement('qr-container');
            hideElement('tfa-container');
            startAuthCheck();
            showStatus('QR-–∫–æ–¥ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω. –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ –µ–≥–æ –≤ Telegram', 'warning');
        } else {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è QR:', data.error);
            showError('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è QR: ' + data.error);
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ recreateQR:', error);
        showError('–û—à–∏–±–∫–∞: ' + error.message);
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function showElement(id) {
    const element = document.getElementById(id);
    if (element) {
        element.classList.remove('d-none');
    }
}

function hideElement(id) {
    const element = document.getElementById(id);
    if (element) {
        element.classList.add('d-none');
    }
}

function showStatus(message, type = 'info') {
    const statusElement = document.getElementById('status-display');
    if (statusElement) {
        statusElement.className = `alert alert-${type} text-center`;
        
        let icon = 'fas fa-info-circle';
        if (type === 'warning') icon = 'fas fa-spinner fa-spin';
        if (type === 'success') icon = 'fas fa-check-circle';
        if (type === 'danger') icon = 'fas fa-exclamation-triangle';
        
        statusElement.innerHTML = `<i class="${icon}"></i> ${message}`;
    }
}

function showError(message) {
    console.error('–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É:', message);
    alert('–û—à–∏–±–∫–∞: ' + message);
    showStatus(message, 'danger');
}

function getCookie(name) {
    let cookieValue = null;
    if (document.cookie && document.cookie !== '') {
        const cookies = document.cookie.split(';');
        for (let i = 0; i < cookies.length; i++) {
            const cookie = cookies[i].trim();
            if (cookie.substring(0, name.length + 1) === (name + '=')) {
                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                break;
            }
        }
    }
    return cookieValue;
}

// –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('beforeunload', function() {
    stopAuthCheck();
});

// –î–µ–±–∞–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
console.log('Telegram Auth JavaScript –∑–∞–≥—Ä—É–∂–µ–Ω');
console.log('–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏:', CHECK_INTERVAL, '–º—Å');