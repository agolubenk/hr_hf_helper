#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
"""
import os
import sys
import django

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

from django.contrib.auth import get_user_model
from apps.huntflow.services import HuntflowService

User = get_user_model()

def main():
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = User.objects.first()
        if not user:
            print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username}")
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å Huntflow
        huntflow_service = HuntflowService(user)
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã
        accounts = huntflow_service.get_accounts()
        if not accounts or 'items' not in accounts:
            print("‚ùå –ê–∫–∫–∞—É–Ω—Ç—ã Huntflow –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        account_id = accounts['items'][0]['id']
        print(f"üè¢ –ê–∫–∫–∞—É–Ω—Ç ID: {account_id}")
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        parsed_data = {
            'fields': {
                'name': {
                    'first': '–¢–µ—Å—Ç',
                    'last': '–ö–∞–Ω–¥–∏–¥–∞—Ç'
                }
            },
            'text': '–¢–µ—Å—Ç–æ–≤–æ–µ —Ä–µ–∑—é–º–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞'
        }
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ ClickUp
        task_data = {
            'name': '–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞',
            'description': '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–¥–∞—á–∏',
            'status': 'reject',
            'custom_fields': [
                {
                    'name': '–¢–µ–ª–µ—Ñ–æ–Ω',
                    'value': '+375 29 123-45-67',
                    'type': 'text'
                },
                {
                    'name': 'Email',
                    'value': 'test@example.com',
                    'type': 'text'
                },
                {
                    'name': 'Telegram',
                    'value': '@testuser',
                    'type': 'text'
                }
            ]
        }
        
        print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞...")
        print(f"üìä –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏: {task_data['status']}")
        print(f"üìã Custom fields: {len(task_data['custom_fields'])} –ø–æ–ª–µ–π")
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        applicant = huntflow_service.create_applicant_from_parsed_data(
            account_id=account_id,
            parsed_data=parsed_data,
            vacancy_id=None,
            task_name=task_data['name'],
            task_description=task_data['description'],
            task_comments=[],
            assignees=[],
            task_status=task_data['status'],
            task_data=task_data
        )
        
        if applicant:
            print(f"‚úÖ –ö–∞–Ω–¥–∏–¥–∞—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
            print(f"üìä ID –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: {applicant.get('id')}")
            print(f"üìä –ò–º—è: {applicant.get('first_name')} {applicant.get('last_name')}")
            print(f"üìä Email: {applicant.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
            print(f"üìä –¢–µ–ª–µ—Ñ–æ–Ω: {applicant.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
            if applicant.get('social'):
                print(f"üìä Telegram: {applicant['social'][0].get('value', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
